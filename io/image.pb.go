// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/image/image.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageUse int32

const (
	// Mandatory icon, used in Apple Wallet lockscreen (87px x 87px)
	ImageUse_icon ImageUse = 0
	// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px)
	ImageUse_logo ImageUse = 1
	// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If ommitted, the square
	// logo image will be used.  (<=480px x 150px)
	ImageUse_appleLogo ImageUse = 2
	// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px)
	ImageUse_hero ImageUse = 3
	// Apple Wallet strip image for EventTicket pass types (1125px x 294px)
	ImageUse_eventStrip ImageUse = 4
	// Apple Wallet strip image for other pass types with a  strip image (1125px x 369px)
	ImageUse_strip ImageUse = 5
	// Used on Membership passes and Apple event tickets with a background image
	// (>=270px x >=270px in a ratio range of 2:3-3:2)
	ImageUse_thumbnail ImageUse = 6
	// used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality
	// image.  Note it may also be slightly cropped on some devices (180px x 220px)
	ImageUse_background ImageUse = 7
	// displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px)
	ImageUse_footer ImageUse = 8
	// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheckÂ®).  Width of 1600px is
	// shared with the boarding privilege logo (<=1600px x 80px)
	ImageUse_security ImageUse = 9
	// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo
	// (<=1600px x 80px)
	ImageUse_privilege ImageUse = 10
	// Google Pay - used to denote airline alliance on boarding pass types (<=1600px x 80px)
	ImageUse_airlineAlliance ImageUse = 11
	// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented
	// (<=450px x 120px)
	ImageUse_personalization ImageUse = 12
	// used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density
	ImageUse_banner ImageUse = 13
	// used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile
	// website (1860px x <=930px)
	ImageUse_message ImageUse = 14
	// used for user Profile images (300px x 300px)
	ImageUse_profile ImageUse = 15
)

var ImageUse_name = map[int32]string{
	0:  "icon",
	1:  "logo",
	2:  "appleLogo",
	3:  "hero",
	4:  "eventStrip",
	5:  "strip",
	6:  "thumbnail",
	7:  "background",
	8:  "footer",
	9:  "security",
	10: "privilege",
	11: "airlineAlliance",
	12: "personalization",
	13: "banner",
	14: "message",
	15: "profile",
}

var ImageUse_value = map[string]int32{
	"icon":            0,
	"logo":            1,
	"appleLogo":       2,
	"hero":            3,
	"eventStrip":      4,
	"strip":           5,
	"thumbnail":       6,
	"background":      7,
	"footer":          8,
	"security":        9,
	"privilege":       10,
	"airlineAlliance": 11,
	"personalization": 12,
	"banner":          13,
	"message":         14,
	"profile":         15,
}

func (x ImageUse) String() string {
	return proto.EnumName(ImageUse_name, int32(x))
}

func (ImageUse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{0}
}

// See image 'Use' enum for descriptions and sizes.
type ImageIds struct {
	Icon                 string   `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Logo                 string   `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	AppleLogo            string   `protobuf:"bytes,3,opt,name=appleLogo,proto3" json:"appleLogo,omitempty"`
	Hero                 string   `protobuf:"bytes,4,opt,name=hero,proto3" json:"hero,omitempty"`
	EventStrip           string   `protobuf:"bytes,5,opt,name=eventStrip,proto3" json:"eventStrip,omitempty"`
	Strip                string   `protobuf:"bytes,6,opt,name=strip,proto3" json:"strip,omitempty"`
	Thumbnail            string   `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Background           string   `protobuf:"bytes,8,opt,name=background,proto3" json:"background,omitempty"`
	Footer               string   `protobuf:"bytes,9,opt,name=footer,proto3" json:"footer,omitempty"`
	Security             string   `protobuf:"bytes,10,opt,name=security,proto3" json:"security,omitempty"`
	Privilege            string   `protobuf:"bytes,11,opt,name=privilege,proto3" json:"privilege,omitempty"`
	AirlineAlliance      string   `protobuf:"bytes,12,opt,name=airlineAlliance,proto3" json:"airlineAlliance,omitempty"`
	Personalization      string   `protobuf:"bytes,13,opt,name=personalization,proto3" json:"personalization,omitempty"`
	Banner               string   `protobuf:"bytes,14,opt,name=banner,proto3" json:"banner,omitempty"`
	Message              string   `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	Profile              string   `protobuf:"bytes,16,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageIds) Reset()         { *m = ImageIds{} }
func (m *ImageIds) String() string { return proto.CompactTextString(m) }
func (*ImageIds) ProtoMessage()    {}
func (*ImageIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{0}
}

func (m *ImageIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageIds.Unmarshal(m, b)
}
func (m *ImageIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageIds.Marshal(b, m, deterministic)
}
func (m *ImageIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageIds.Merge(m, src)
}
func (m *ImageIds) XXX_Size() int {
	return xxx_messageInfo_ImageIds.Size(m)
}
func (m *ImageIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageIds.DiscardUnknown(m)
}

var xxx_messageInfo_ImageIds proto.InternalMessageInfo

func (m *ImageIds) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ImageIds) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *ImageIds) GetAppleLogo() string {
	if m != nil {
		return m.AppleLogo
	}
	return ""
}

func (m *ImageIds) GetHero() string {
	if m != nil {
		return m.Hero
	}
	return ""
}

func (m *ImageIds) GetEventStrip() string {
	if m != nil {
		return m.EventStrip
	}
	return ""
}

func (m *ImageIds) GetStrip() string {
	if m != nil {
		return m.Strip
	}
	return ""
}

func (m *ImageIds) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *ImageIds) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *ImageIds) GetFooter() string {
	if m != nil {
		return m.Footer
	}
	return ""
}

func (m *ImageIds) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ImageIds) GetPrivilege() string {
	if m != nil {
		return m.Privilege
	}
	return ""
}

func (m *ImageIds) GetAirlineAlliance() string {
	if m != nil {
		return m.AirlineAlliance
	}
	return ""
}

func (m *ImageIds) GetPersonalization() string {
	if m != nil {
		return m.Personalization
	}
	return ""
}

func (m *ImageIds) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *ImageIds) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImageIds) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

// Images strings can be either a base64 image or a url. See image 'Use' enum for descriptions and sizes.
type ImageData struct {
	// Mandatory icon, used in Apple Wallet lock screen (87px x 87px).
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px).
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If ommitted, the square logo image will be used.  (<=480px x 150px).
	AppleLogo string `protobuf:"bytes,3,opt,name=appleLogo,proto3" json:"appleLogo,omitempty"`
	// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px).
	Hero string `protobuf:"bytes,4,opt,name=hero,proto3" json:"hero,omitempty"`
	// Apple Wallet strip image for EventTicket pass types (1125px x 294px).
	EventStrip string `protobuf:"bytes,5,opt,name=eventStrip,proto3" json:"eventStrip,omitempty"`
	// Apple Wallet strip image for other pass types with a  strip image (1125px x 369px).
	Strip string `protobuf:"bytes,6,opt,name=strip,proto3" json:"strip,omitempty"`
	// Used on Membership passes and Apple event tickets with a background image (>=270px x >=270px in a ratio range of 2:3-3:2).
	Thumbnail string `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// Used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality image.  Note it may also be slightly cropped on some devices (180px x 220px).
	Background string `protobuf:"bytes,8,opt,name=background,proto3" json:"background,omitempty"`
	// Displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px)
	Footer string `protobuf:"bytes,9,opt,name=footer,proto3" json:"footer,omitempty"`
	// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheckÂ®).  Width of 1600px is shared with the boarding privilege logo (<=1600px x 80px).
	Security string `protobuf:"bytes,10,opt,name=security,proto3" json:"security,omitempty"`
	// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo (<=1600px x 80px).
	Privilege string `protobuf:"bytes,11,opt,name=privilege,proto3" json:"privilege,omitempty"`
	// Google Pay - used to denote airline alliance on boarding pass types (<=1600px x 80px).
	AirlineAlliance string `protobuf:"bytes,12,opt,name=airlineAlliance,proto3" json:"airlineAlliance,omitempty"`
	// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented (<=450px x 120px).
	Personalization string `protobuf:"bytes,13,opt,name=personalization,proto3" json:"personalization,omitempty"`
	// Used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density.
	Banner string `protobuf:"bytes,14,opt,name=banner,proto3" json:"banner,omitempty"`
	// Used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile website (1860px x <=930px).
	Message string `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	// // used for user Profile images (300px x 300px). Cannot be localized.
	Profile string `protobuf:"bytes,16,opt,name=profile,proto3" json:"profile,omitempty"`
	// Sets different icon images for non-default languages.
	LocalizedIcon *LocalizedString `protobuf:"bytes,31,opt,name=localizedIcon,proto3" json:"localizedIcon,omitempty"`
	// Sets different logo images for non-default languages.
	LocalizedLogo *LocalizedString `protobuf:"bytes,32,opt,name=localizedLogo,proto3" json:"localizedLogo,omitempty"`
	// Sets different Apple Logo images for non-default languages.
	LocalizedAppleLogo *LocalizedString `protobuf:"bytes,33,opt,name=localizedAppleLogo,proto3" json:"localizedAppleLogo,omitempty"`
	// Sets different hero images for non-default languages.
	LocalizedHero *LocalizedString `protobuf:"bytes,34,opt,name=localizedHero,proto3" json:"localizedHero,omitempty"`
	// Sets different event strip images for non-default languages.
	LocalizedEventStrip *LocalizedString `protobuf:"bytes,35,opt,name=localizedEventStrip,proto3" json:"localizedEventStrip,omitempty"`
	// Sets different strip images for non-default languages.
	LocalizedStrip *LocalizedString `protobuf:"bytes,36,opt,name=localizedStrip,proto3" json:"localizedStrip,omitempty"`
	// Sets different thumbnail images for non-default languages.
	LocalizedThumbnail *LocalizedString `protobuf:"bytes,37,opt,name=localizedThumbnail,proto3" json:"localizedThumbnail,omitempty"`
	// Sets different background images for non-default languages.
	LocalizedBackground *LocalizedString `protobuf:"bytes,38,opt,name=localizedBackground,proto3" json:"localizedBackground,omitempty"`
	// Sets different footer images for non-default languages.
	LocalizedFooter *LocalizedString `protobuf:"bytes,39,opt,name=localizedFooter,proto3" json:"localizedFooter,omitempty"`
	// Sets different security images for non-default languages.
	LocalizedSecurity *LocalizedString `protobuf:"bytes,40,opt,name=localizedSecurity,proto3" json:"localizedSecurity,omitempty"`
	// Sets different privilege images for non-default languages.
	LocalizedPrivilege *LocalizedString `protobuf:"bytes,41,opt,name=localizedPrivilege,proto3" json:"localizedPrivilege,omitempty"`
	// Sets different airline alliance images for non-default languages.
	LocalizedAirlineAlliance *LocalizedString `protobuf:"bytes,42,opt,name=localizedAirlineAlliance,proto3" json:"localizedAirlineAlliance,omitempty"`
	// Sets different personalized images for non-default languages.
	LocalizedPersonalization *LocalizedString `protobuf:"bytes,43,opt,name=localizedPersonalization,proto3" json:"localizedPersonalization,omitempty"`
	// Sets different banner images for non-default languages.
	LocalizedBanner *LocalizedString `protobuf:"bytes,44,opt,name=localizedBanner,proto3" json:"localizedBanner,omitempty"`
	// Sets different message images for non-default languages.
	LocalizedMessage     *LocalizedString `protobuf:"bytes,45,opt,name=localizedMessage,proto3" json:"localizedMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ImageData) Reset()         { *m = ImageData{} }
func (m *ImageData) String() string { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()    {}
func (*ImageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{1}
}

func (m *ImageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageData.Unmarshal(m, b)
}
func (m *ImageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageData.Marshal(b, m, deterministic)
}
func (m *ImageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageData.Merge(m, src)
}
func (m *ImageData) XXX_Size() int {
	return xxx_messageInfo_ImageData.Size(m)
}
func (m *ImageData) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageData.DiscardUnknown(m)
}

var xxx_messageInfo_ImageData proto.InternalMessageInfo

func (m *ImageData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ImageData) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *ImageData) GetAppleLogo() string {
	if m != nil {
		return m.AppleLogo
	}
	return ""
}

func (m *ImageData) GetHero() string {
	if m != nil {
		return m.Hero
	}
	return ""
}

func (m *ImageData) GetEventStrip() string {
	if m != nil {
		return m.EventStrip
	}
	return ""
}

func (m *ImageData) GetStrip() string {
	if m != nil {
		return m.Strip
	}
	return ""
}

func (m *ImageData) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *ImageData) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *ImageData) GetFooter() string {
	if m != nil {
		return m.Footer
	}
	return ""
}

func (m *ImageData) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

func (m *ImageData) GetPrivilege() string {
	if m != nil {
		return m.Privilege
	}
	return ""
}

func (m *ImageData) GetAirlineAlliance() string {
	if m != nil {
		return m.AirlineAlliance
	}
	return ""
}

func (m *ImageData) GetPersonalization() string {
	if m != nil {
		return m.Personalization
	}
	return ""
}

func (m *ImageData) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *ImageData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImageData) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *ImageData) GetLocalizedIcon() *LocalizedString {
	if m != nil {
		return m.LocalizedIcon
	}
	return nil
}

func (m *ImageData) GetLocalizedLogo() *LocalizedString {
	if m != nil {
		return m.LocalizedLogo
	}
	return nil
}

func (m *ImageData) GetLocalizedAppleLogo() *LocalizedString {
	if m != nil {
		return m.LocalizedAppleLogo
	}
	return nil
}

func (m *ImageData) GetLocalizedHero() *LocalizedString {
	if m != nil {
		return m.LocalizedHero
	}
	return nil
}

func (m *ImageData) GetLocalizedEventStrip() *LocalizedString {
	if m != nil {
		return m.LocalizedEventStrip
	}
	return nil
}

func (m *ImageData) GetLocalizedStrip() *LocalizedString {
	if m != nil {
		return m.LocalizedStrip
	}
	return nil
}

func (m *ImageData) GetLocalizedThumbnail() *LocalizedString {
	if m != nil {
		return m.LocalizedThumbnail
	}
	return nil
}

func (m *ImageData) GetLocalizedBackground() *LocalizedString {
	if m != nil {
		return m.LocalizedBackground
	}
	return nil
}

func (m *ImageData) GetLocalizedFooter() *LocalizedString {
	if m != nil {
		return m.LocalizedFooter
	}
	return nil
}

func (m *ImageData) GetLocalizedSecurity() *LocalizedString {
	if m != nil {
		return m.LocalizedSecurity
	}
	return nil
}

func (m *ImageData) GetLocalizedPrivilege() *LocalizedString {
	if m != nil {
		return m.LocalizedPrivilege
	}
	return nil
}

func (m *ImageData) GetLocalizedAirlineAlliance() *LocalizedString {
	if m != nil {
		return m.LocalizedAirlineAlliance
	}
	return nil
}

func (m *ImageData) GetLocalizedPersonalization() *LocalizedString {
	if m != nil {
		return m.LocalizedPersonalization
	}
	return nil
}

func (m *ImageData) GetLocalizedBanner() *LocalizedString {
	if m != nil {
		return m.LocalizedBanner
	}
	return nil
}

func (m *ImageData) GetLocalizedMessage() *LocalizedString {
	if m != nil {
		return m.LocalizedMessage
	}
	return nil
}

type ImageRecord struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Use                  ImageUse             `protobuf:"varint,5,opt,name=use,proto3,enum=io.ImageUse" json:"use,omitempty"`
	Languages            []LanguageCode       `protobuf:"varint,6,rep,packed,name=languages,proto3,enum=io.LanguageCode" json:"languages,omitempty"`
	OwnerUsername        string               `protobuf:"bytes,7,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ImageRecord) Reset()         { *m = ImageRecord{} }
func (m *ImageRecord) String() string { return proto.CompactTextString(m) }
func (*ImageRecord) ProtoMessage()    {}
func (*ImageRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{2}
}

func (m *ImageRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageRecord.Unmarshal(m, b)
}
func (m *ImageRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageRecord.Marshal(b, m, deterministic)
}
func (m *ImageRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRecord.Merge(m, src)
}
func (m *ImageRecord) XXX_Size() int {
	return xxx_messageInfo_ImageRecord.Size(m)
}
func (m *ImageRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRecord proto.InternalMessageInfo

func (m *ImageRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageRecord) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImageRecord) GetUse() ImageUse {
	if m != nil {
		return m.Use
	}
	return ImageUse_icon
}

func (m *ImageRecord) GetLanguages() []LanguageCode {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *ImageRecord) GetOwnerUsername() string {
	if m != nil {
		return m.OwnerUsername
	}
	return ""
}

func (m *ImageRecord) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ImageRecord) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type ProfileImageInput struct {
	// Provide an image URL or base64 image data.
	ImageData            string   `protobuf:"bytes,1,opt,name=imageData,proto3" json:"imageData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileImageInput) Reset()         { *m = ProfileImageInput{} }
func (m *ProfileImageInput) String() string { return proto.CompactTextString(m) }
func (*ProfileImageInput) ProtoMessage()    {}
func (*ProfileImageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{3}
}

func (m *ProfileImageInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileImageInput.Unmarshal(m, b)
}
func (m *ProfileImageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileImageInput.Marshal(b, m, deterministic)
}
func (m *ProfileImageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileImageInput.Merge(m, src)
}
func (m *ProfileImageInput) XXX_Size() int {
	return xxx_messageInfo_ProfileImageInput.Size(m)
}
func (m *ProfileImageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileImageInput.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileImageInput proto.InternalMessageInfo

func (m *ProfileImageInput) GetImageData() string {
	if m != nil {
		return m.ImageData
	}
	return ""
}

type MultipleImages struct {
	Images               []*ImageRecord `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultipleImages) Reset()         { *m = MultipleImages{} }
func (m *MultipleImages) String() string { return proto.CompactTextString(m) }
func (*MultipleImages) ProtoMessage()    {}
func (*MultipleImages) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{4}
}

func (m *MultipleImages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultipleImages.Unmarshal(m, b)
}
func (m *MultipleImages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultipleImages.Marshal(b, m, deterministic)
}
func (m *MultipleImages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleImages.Merge(m, src)
}
func (m *MultipleImages) XXX_Size() int {
	return xxx_messageInfo_MultipleImages.Size(m)
}
func (m *MultipleImages) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleImages.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleImages proto.InternalMessageInfo

func (m *MultipleImages) GetImages() []*ImageRecord {
	if m != nil {
		return m.Images
	}
	return nil
}

type CreateImageInput struct {
	// If multiple images types are uploaded, then the image type will be appended to the name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Image data can be either a base64 image or a url.
	ImageData            *ImageData `protobuf:"bytes,2,opt,name=imageData,proto3" json:"imageData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateImageInput) Reset()         { *m = CreateImageInput{} }
func (m *CreateImageInput) String() string { return proto.CompactTextString(m) }
func (*CreateImageInput) ProtoMessage()    {}
func (*CreateImageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{5}
}

func (m *CreateImageInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateImageInput.Unmarshal(m, b)
}
func (m *CreateImageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateImageInput.Marshal(b, m, deterministic)
}
func (m *CreateImageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateImageInput.Merge(m, src)
}
func (m *CreateImageInput) XXX_Size() int {
	return xxx_messageInfo_CreateImageInput.Size(m)
}
func (m *CreateImageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateImageInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateImageInput proto.InternalMessageInfo

func (m *CreateImageInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateImageInput) GetImageData() *ImageData {
	if m != nil {
		return m.ImageData
	}
	return nil
}

type UpdateImageInput struct {
	// The image id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional, if ommitted, the original name will remain the same.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional, if ommitted, the original image will remain the same.
	ImageData string `protobuf:"bytes,3,opt,name=imageData,proto3" json:"imageData,omitempty"`
	// Optional, provided localizations will be added/replaced, existing ommitted localizations will remain in place.
	LocalizedImageData   *LocalizedString `protobuf:"bytes,4,opt,name=localizedImageData,proto3" json:"localizedImageData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateImageInput) Reset()         { *m = UpdateImageInput{} }
func (m *UpdateImageInput) String() string { return proto.CompactTextString(m) }
func (*UpdateImageInput) ProtoMessage()    {}
func (*UpdateImageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{6}
}

func (m *UpdateImageInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateImageInput.Unmarshal(m, b)
}
func (m *UpdateImageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateImageInput.Marshal(b, m, deterministic)
}
func (m *UpdateImageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateImageInput.Merge(m, src)
}
func (m *UpdateImageInput) XXX_Size() int {
	return xxx_messageInfo_UpdateImageInput.Size(m)
}
func (m *UpdateImageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateImageInput.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateImageInput proto.InternalMessageInfo

func (m *UpdateImageInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateImageInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateImageInput) GetImageData() string {
	if m != nil {
		return m.ImageData
	}
	return ""
}

func (m *UpdateImageInput) GetLocalizedImageData() *LocalizedString {
	if m != nil {
		return m.LocalizedImageData
	}
	return nil
}

type ImageBundle struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageBundle) Reset()         { *m = ImageBundle{} }
func (m *ImageBundle) String() string { return proto.CompactTextString(m) }
func (*ImageBundle) ProtoMessage()    {}
func (*ImageBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{7}
}

func (m *ImageBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageBundle.Unmarshal(m, b)
}
func (m *ImageBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageBundle.Marshal(b, m, deterministic)
}
func (m *ImageBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageBundle.Merge(m, src)
}
func (m *ImageBundle) XXX_Size() int {
	return xxx_messageInfo_ImageBundle.Size(m)
}
func (m *ImageBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ImageBundle proto.InternalMessageInfo

func (m *ImageBundle) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type LocalizedImageInput struct {
	// Image id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Language code of the image.
	LanguageCode         string   `protobuf:"bytes,2,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalizedImageInput) Reset()         { *m = LocalizedImageInput{} }
func (m *LocalizedImageInput) String() string { return proto.CompactTextString(m) }
func (*LocalizedImageInput) ProtoMessage()    {}
func (*LocalizedImageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_296101b7980067fa, []int{8}
}

func (m *LocalizedImageInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalizedImageInput.Unmarshal(m, b)
}
func (m *LocalizedImageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalizedImageInput.Marshal(b, m, deterministic)
}
func (m *LocalizedImageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizedImageInput.Merge(m, src)
}
func (m *LocalizedImageInput) XXX_Size() int {
	return xxx_messageInfo_LocalizedImageInput.Size(m)
}
func (m *LocalizedImageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizedImageInput.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizedImageInput proto.InternalMessageInfo

func (m *LocalizedImageInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LocalizedImageInput) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func init() {
	proto.RegisterEnum("io.ImageUse", ImageUse_name, ImageUse_value)
	proto.RegisterType((*ImageIds)(nil), "io.ImageIds")
	proto.RegisterType((*ImageData)(nil), "io.ImageData")
	proto.RegisterType((*ImageRecord)(nil), "io.ImageRecord")
	proto.RegisterType((*ProfileImageInput)(nil), "io.ProfileImageInput")
	proto.RegisterType((*MultipleImages)(nil), "io.MultipleImages")
	proto.RegisterType((*CreateImageInput)(nil), "io.CreateImageInput")
	proto.RegisterType((*UpdateImageInput)(nil), "io.UpdateImageInput")
	proto.RegisterType((*ImageBundle)(nil), "io.ImageBundle")
	proto.RegisterType((*LocalizedImageInput)(nil), "io.LocalizedImageInput")
}

func init() { proto.RegisterFile("io/image/image.proto", fileDescriptor_296101b7980067fa) }

var fileDescriptor_296101b7980067fa = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xd1, 0x8e, 0x1b, 0x35,
	0x14, 0x65, 0x92, 0xed, 0x76, 0xe3, 0x64, 0x93, 0xa9, 0xb7, 0xa0, 0x61, 0x55, 0xb5, 0x26, 0x2d,
	0x34, 0xa4, 0xdd, 0x19, 0x08, 0x08, 0xd1, 0x45, 0x80, 0xb2, 0x4b, 0x51, 0x57, 0x6d, 0x45, 0x48,
	0xbb, 0x3c, 0x20, 0x21, 0xe4, 0xcc, 0x38, 0xb3, 0x56, 0x27, 0xf6, 0xc8, 0x9e, 0x69, 0x55, 0x3e,
	0x23, 0xef, 0xfc, 0x00, 0x52, 0x7f, 0x66, 0x3f, 0x03, 0xfe, 0x01, 0x21, 0xdb, 0x13, 0x4f, 0x26,
	0xbb, 0x51, 0xf3, 0xc0, 0x0b, 0x12, 0x2f, 0xbb, 0xe3, 0x73, 0xcf, 0xbd, 0xf6, 0xbd, 0xbe, 0xb6,
	0x4f, 0xc0, 0x75, 0xca, 0x03, 0x3a, 0xc3, 0x31, 0x31, 0x7f, 0xfd, 0x54, 0xf0, 0x8c, 0xc3, 0x1a,
	0xe5, 0xfb, 0x37, 0x28, 0x0f, 0x42, 0x3e, 0x9b, 0x71, 0x16, 0x24, 0x3c, 0xc4, 0x09, 0xfd, 0x0d,
	0x67, 0x94, 0x33, 0xc3, 0xd8, 0xbf, 0xaf, 0xff, 0x85, 0x07, 0x31, 0x61, 0x07, 0xf2, 0x15, 0x8e,
	0x63, 0x22, 0x02, 0x9e, 0x2a, 0x82, 0x0c, 0x30, 0x63, 0x3c, 0xd3, 0x64, 0x59, 0xb0, 0x6f, 0xc5,
	0x9c, 0xc7, 0x09, 0x09, 0xf4, 0x68, 0x92, 0x4f, 0x83, 0x8c, 0xce, 0x88, 0xcc, 0xf0, 0x2c, 0x35,
	0x84, 0xee, 0xdf, 0x75, 0xb0, 0x73, 0xa2, 0x16, 0x70, 0x12, 0x49, 0x08, 0xc1, 0x16, 0x0d, 0x39,
	0xf3, 0x1c, 0xe4, 0xf4, 0x1a, 0x63, 0xfd, 0xad, 0xb0, 0x84, 0xc7, 0xdc, 0xab, 0x19, 0x4c, 0x7d,
	0xc3, 0x1b, 0xa0, 0x81, 0xd3, 0x34, 0x21, 0x4f, 0x94, 0xa1, 0xae, 0x0d, 0x25, 0xa0, 0x3c, 0xce,
	0x88, 0xe0, 0xde, 0x96, 0xf1, 0x50, 0xdf, 0xf0, 0x26, 0x00, 0xe4, 0x25, 0x61, 0xd9, 0xb3, 0x4c,
	0xd0, 0xd4, 0xbb, 0xa2, 0x2d, 0x4b, 0x08, 0xbc, 0x0e, 0xae, 0x48, 0x6d, 0xda, 0xd6, 0x26, 0x33,
	0x50, 0xf3, 0x64, 0x67, 0xf9, 0x6c, 0xc2, 0x30, 0x4d, 0xbc, 0xab, 0x66, 0x1e, 0x0b, 0xa8, 0x98,
	0x13, 0x1c, 0xbe, 0x88, 0x05, 0xcf, 0x59, 0xe4, 0xed, 0x98, 0x98, 0x25, 0x02, 0xdf, 0x03, 0xdb,
	0x53, 0xce, 0x33, 0x22, 0xbc, 0x86, 0xb6, 0x15, 0x23, 0xb8, 0x0f, 0x76, 0x24, 0x09, 0x73, 0x41,
	0xb3, 0xd7, 0x1e, 0xd0, 0x16, 0x3b, 0x56, 0x33, 0xa6, 0x82, 0xbe, 0xa4, 0x09, 0x89, 0x89, 0xd7,
	0x34, 0x33, 0x5a, 0x00, 0xf6, 0x40, 0x07, 0x53, 0x91, 0x50, 0x46, 0x86, 0x49, 0x42, 0x31, 0x0b,
	0x89, 0xd7, 0xd2, 0x9c, 0x55, 0x58, 0x31, 0x53, 0x22, 0x24, 0x67, 0x76, 0xfb, 0xbc, 0x5d, 0xc3,
	0x5c, 0x81, 0xd5, 0x2a, 0x27, 0x98, 0x31, 0x22, 0xbc, 0xb6, 0x59, 0xa5, 0x19, 0x41, 0x0f, 0x5c,
	0x9d, 0x11, 0x29, 0x71, 0x4c, 0xbc, 0x8e, 0x36, 0x2c, 0x86, 0xca, 0x92, 0x0a, 0x3e, 0xa5, 0x09,
	0xf1, 0x5c, 0x63, 0x29, 0x86, 0x87, 0x83, 0xf9, 0x30, 0x00, 0x07, 0xfd, 0x86, 0xde, 0x50, 0x74,
	0x12, 0xc9, 0xc1, 0xfb, 0xcf, 0xcf, 0xa8, 0x44, 0x33, 0xcc, 0x70, 0x4c, 0x24, 0xd2, 0x9d, 0x26,
	0xd1, 0xe4, 0x35, 0xa2, 0xd1, 0xb9, 0xa3, 0xf7, 0xb7, 0x3b, 0x6f, 0x01, 0xc3, 0xff, 0x0e, 0x67,
	0xf8, 0xff, 0x0e, 0xf8, 0x6f, 0x77, 0x00, 0x7c, 0x00, 0x76, 0x8b, 0x3b, 0x83, 0x44, 0x27, 0x6a,
	0x23, 0x6f, 0x21, 0xa7, 0xd7, 0x1c, 0xec, 0xf9, 0x94, 0xfb, 0x4f, 0x16, 0x06, 0x55, 0x70, 0x16,
	0x8f, 0xab, 0xcc, 0x8a, 0xab, 0xde, 0x56, 0xb4, 0x89, 0xab, 0xde, 0xef, 0x63, 0x00, 0x2d, 0x30,
	0xb4, 0x6d, 0xf1, 0xc1, 0x7a, 0xff, 0x4b, 0xe8, 0x95, 0xf9, 0x1f, 0xa9, 0xee, 0xe9, 0x6e, 0x32,
	0xbf, 0x62, 0xc2, 0x87, 0x60, 0xcf, 0x02, 0x0f, 0xcb, 0x26, 0xbb, 0xbd, 0x3e, 0xc0, 0x65, 0x7c,
	0xf8, 0x15, 0x68, 0x27, 0xcb, 0xbc, 0xd4, 0xbb, 0xb3, 0x3e, 0xc2, 0x0a, 0xb5, 0x52, 0x83, 0xe7,
	0xb6, 0x65, 0x3f, 0xdc, 0xa4, 0x06, 0x96, 0x5e, 0x49, 0xe4, 0xa8, 0xec, 0xec, 0x8f, 0x36, 0x49,
	0xa4, 0xe4, 0xc3, 0xaf, 0x41, 0xc7, 0xc2, 0xdf, 0x9b, 0x03, 0x70, 0x77, 0x7d, 0x88, 0x55, 0x2e,
	0x1c, 0x82, 0x6b, 0x65, 0x72, 0x8b, 0x73, 0xd2, 0x5b, 0x1f, 0xe0, 0x22, 0xbb, 0x52, 0x8d, 0x91,
	0x3d, 0x4e, 0x1f, 0x6f, 0x52, 0x0d, 0x4b, 0x87, 0x3f, 0x00, 0xaf, 0xec, 0x93, 0x95, 0x53, 0xd7,
	0x5f, 0x1f, 0x6a, 0xad, 0x53, 0x25, 0xe0, 0x68, 0xe5, 0x70, 0xde, 0xdb, 0x24, 0xe0, 0x8a, 0x53,
	0xa5, 0xd0, 0x47, 0xe6, 0x0c, 0xdf, 0xdf, 0xa4, 0xd0, 0x86, 0x0b, 0xbf, 0x05, 0xae, 0x85, 0x9e,
	0x16, 0x47, 0xfd, 0x60, 0xbd, 0xff, 0x05, 0xf2, 0xe1, 0x4f, 0xf3, 0xe1, 0x33, 0xf0, 0x63, 0x1f,
	0x98, 0x0b, 0x5f, 0xdd, 0xe0, 0x83, 0x63, 0xf3, 0x1d, 0xe1, 0x0c, 0xa3, 0x10, 0x33, 0x34, 0x21,
	0x28, 0x15, 0xfc, 0x25, 0x8d, 0x48, 0x84, 0xb0, 0x44, 0x84, 0x66, 0x67, 0x44, 0x20, 0x8c, 0x72,
	0x91, 0x20, 0x2e, 0xd0, 0x04, 0x4b, 0x82, 0xbe, 0xf8, 0x1c, 0x11, 0x16, 0x72, 0x45, 0x51, 0x7e,
	0x7e, 0xf7, 0x4d, 0x0d, 0x34, 0x75, 0x9c, 0x31, 0x09, 0xb9, 0x88, 0x60, 0x1b, 0xd4, 0x68, 0x54,
	0x3c, 0x0a, 0x35, 0x1a, 0xa9, 0x0b, 0x9e, 0xe1, 0x19, 0x59, 0x3c, 0x09, 0xea, 0x1b, 0xba, 0xa0,
	0x9e, 0x8b, 0xa4, 0x78, 0x0c, 0xd4, 0x27, 0xbc, 0x09, 0xea, 0xb9, 0x24, 0xfa, 0xae, 0x6f, 0x0f,
	0x5a, 0x2a, 0x23, 0x1d, 0xf3, 0x54, 0x92, 0xb1, 0x32, 0x40, 0x1f, 0x34, 0x12, 0xcc, 0xe2, 0x5c,
	0x3d, 0x4a, 0xde, 0x36, 0xaa, 0xf7, 0xda, 0x03, 0x57, 0xe7, 0x5d, 0x80, 0xc7, 0x3c, 0x22, 0xe3,
	0x92, 0x02, 0xef, 0x80, 0x5d, 0xfe, 0x8a, 0x11, 0x71, 0x2a, 0x89, 0xd0, 0xd3, 0x9b, 0x07, 0xa1,
	0x0a, 0xc2, 0x2f, 0x41, 0x23, 0x14, 0x04, 0x67, 0x24, 0x1a, 0x66, 0xfa, 0x4d, 0x68, 0x0e, 0xf6,
	0x7d, 0x23, 0x83, 0xfc, 0x85, 0x0c, 0xf2, 0x9f, 0x2f, 0x64, 0xd0, 0xb8, 0x24, 0x2b, 0xcf, 0x3c,
	0x8d, 0x0a, 0xcf, 0xc6, 0xdb, 0x3d, 0x2d, 0xb9, 0xfb, 0x29, 0xb8, 0x36, 0x32, 0x37, 0xb0, 0xd1,
	0x52, 0x2c, 0xcd, 0x33, 0xf5, 0x92, 0xd0, 0xc5, 0xc3, 0x5a, 0xd4, 0xae, 0x04, 0xba, 0x0f, 0x40,
	0xfb, 0x69, 0x9e, 0x64, 0x34, 0x2d, 0x7c, 0x24, 0xbc, 0x0b, 0xb6, 0xcd, 0x03, 0xed, 0x39, 0xa8,
	0xde, 0x6b, 0x0e, 0x3a, 0xb6, 0x62, 0x66, 0x17, 0xc6, 0x85, 0xb9, 0xfb, 0xbb, 0x03, 0xdc, 0x63,
	0xbd, 0xea, 0xa5, 0xd9, 0x16, 0x5b, 0xe2, 0x2c, 0x6d, 0xc9, 0xbd, 0xe5, 0x15, 0xd4, 0x74, 0x42,
	0xbb, 0x36, 0xa8, 0x02, 0x97, 0x16, 0x74, 0xf8, 0x68, 0x3e, 0x7c, 0x08, 0x8e, 0xfb, 0xd0, 0x44,
	0x46, 0x85, 0x86, 0x50, 0xb1, 0x07, 0xfb, 0x5a, 0x45, 0x98, 0x42, 0x15, 0x2a, 0x02, 0x09, 0xbd,
	0x26, 0xff, 0xdc, 0xd1, 0x53, 0x9d, 0x3b, 0x4b, 0xa9, 0xfd, 0xe5, 0x00, 0xf7, 0x54, 0xd7, 0x66,
	0x69, 0x7d, 0x9b, 0xb4, 0x50, 0xa5, 0x62, 0xf5, 0x95, 0x8a, 0x55, 0xee, 0x14, 0x9b, 0x81, 0xd6,
	0x18, 0x6f, 0xbd, 0x53, 0x2c, 0xfd, 0x70, 0x34, 0x1f, 0x3e, 0x05, 0x8f, 0xfb, 0xd0, 0xac, 0xaf,
	0x92, 0xe5, 0x27, 0x97, 0x69, 0x25, 0x49, 0x32, 0x34, 0xe5, 0x02, 0x45, 0x74, 0x3a, 0x25, 0x82,
	0xb0, 0x0c, 0xd9, 0x7e, 0xf4, 0xcf, 0x9d, 0x1a, 0x8d, 0xba, 0xb7, 0x8b, 0xa3, 0x72, 0x94, 0xb3,
	0x28, 0x21, 0x4a, 0xc7, 0x68, 0x57, 0x9d, 0x6a, 0x6b, 0x6c, 0x06, 0xdd, 0x37, 0x0e, 0xd8, 0x7b,
	0x52, 0x59, 0xcd, 0xe5, 0x55, 0xe9, 0x82, 0x56, 0xb2, 0xd4, 0xfd, 0x45, 0x75, 0x2a, 0xd8, 0xe1,
	0x64, 0x3e, 0xfc, 0x15, 0xfc, 0xd2, 0x7f, 0xd7, 0xc6, 0xfb, 0x17, 0xb2, 0x38, 0x77, 0x2a, 0x73,
	0xf4, 0xff, 0x74, 0x8a, 0x9f, 0x05, 0xa7, 0x92, 0xc0, 0x1d, 0x23, 0x0a, 0xdd, 0x77, 0xd4, 0x97,
	0x92, 0x7f, 0xae, 0x03, 0x77, 0x97, 0x04, 0xa0, 0x5b, 0x53, 0x06, 0xa5, 0xf2, 0xdc, 0x3a, 0x6c,
	0x2f, 0xeb, 0x3c, 0x77, 0x0b, 0x36, 0x0a, 0x5d, 0xe7, 0x5e, 0x51, 0x3e, 0x56, 0xbb, 0xb9, 0xdb,
	0x8a, 0x59, 0x6a, 0x35, 0xf7, 0x2a, 0x04, 0x0b, 0xb5, 0xe6, 0xee, 0xc0, 0x56, 0xa9, 0xd0, 0xdc,
	0x86, 0x72, 0xb4, 0x12, 0xcc, 0x05, 0x70, 0xef, 0x82, 0x08, 0x73, 0x9b, 0x0a, 0x5c, 0x11, 0x56,
	0x6e, 0x4b, 0x85, 0x34, 0x62, 0xca, 0xdd, 0x85, 0x4d, 0x2b, 0xa7, 0xdc, 0xb6, 0x1a, 0x14, 0x92,
	0xc9, 0xed, 0x1c, 0x7d, 0x03, 0x3a, 0x94, 0xfb, 0x29, 0x96, 0xf2, 0x05, 0xcd, 0xfc, 0xd1, 0x63,
	0xca, 0x7f, 0xbe, 0x23, 0x33, 0x2c, 0xcf, 0x2c, 0x16, 0xf2, 0x59, 0x40, 0x79, 0x30, 0xe3, 0x11,
	0x49, 0x02, 0x19, 0xbd, 0x08, 0x62, 0x1e, 0x50, 0xfe, 0x47, 0x6d, 0x6b, 0xf4, 0xf8, 0x84, 0x4f,
	0xb6, 0xf5, 0xe5, 0xf0, 0xd9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x4c, 0xf9, 0x08, 0xd3,
	0x0d, 0x00, 0x00,
}
