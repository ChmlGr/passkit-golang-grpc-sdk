// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/common/localization.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This is a list of supported languages.
type LanguageCode int32

const (
	// English
	LanguageCode_EN LanguageCode = 0
	// (Arabic) العربية
	LanguageCode_AR LanguageCode = 4
	// 简体中文 (Chinese)
	LanguageCode_ZH_HANS LanguageCode = 8
	// 繁體中文 (Traditional Chinese)
	LanguageCode_ZH_HANT LanguageCode = 12
	// 香港中文 (Cantonese)
	LanguageCode_ZH_HK LanguageCode = 16
	// Català (Catalan)
	LanguageCode_CA LanguageCode = 20
	// Hrvatski (Croatian)
	LanguageCode_HR LanguageCode = 24
	// Čeština (Czech)
	LanguageCode_CS LanguageCode = 28
	// Dansk (Danish)
	LanguageCode_DA LanguageCode = 32
	// Deutsch (German)
	LanguageCode_DE LanguageCode = 36
	// English (Australia)
	LanguageCode_EN_AU LanguageCode = 40
	// English (British)
	LanguageCode_EN_GB LanguageCode = 44
	// English (Canada)
	LanguageCode_EN_CA LanguageCode = 48
	// English (India)
	LanguageCode_EN_US LanguageCode = 52
	// English (United States)
	LanguageCode_EN_IN LanguageCode = 56
	// Español (Spanish)
	LanguageCode_ES LanguageCode = 60
	// Español (Latin America)
	LanguageCode_ES_419 LanguageCode = 64
	// Suomi (Finnish)
	LanguageCode_FI LanguageCode = 68
	// Français (French)
	LanguageCode_FR LanguageCode = 72
	// Français (Canada)
	LanguageCode_FR_CA LanguageCode = 76
	// Ελληνικά (Greek)
	LanguageCode_EL LanguageCode = 80
	// (Hebrew) עברית
	LanguageCode_HE LanguageCode = 84
	// हिन्दी (Hindi)
	LanguageCode_HI LanguageCode = 88
	// Magyar (Hungarian)
	LanguageCode_HU LanguageCode = 92
	// Bahasa Indonesia (Indonesian)
	LanguageCode_ID LanguageCode = 96
	// Italiano (Italian)
	LanguageCode_IT LanguageCode = 100
	// 日本語 (Japanese)
	LanguageCode_JA LanguageCode = 104
	// 한국어 (Korean)
	LanguageCode_KO LanguageCode = 108
	// Bahasa Melayu (Malay)
	LanguageCode_MS LanguageCode = 112
	// Malti (Maltese)
	LanguageCode_MT LanguageCode = 116
	// Nederlands (Dutch)
	LanguageCode_NL LanguageCode = 120
	// Norsk Bokmål (Norwegian)
	LanguageCode_NB LanguageCode = 124
	// Polski (Polish)
	LanguageCode_PL LanguageCode = 128
	// Português de Portugal (Portuguese)
	LanguageCode_PT LanguageCode = 132
	// Português (Brazilian Portuguese)
	LanguageCode_PT_BR LanguageCode = 136
	// Română (Romanian)
	LanguageCode_RO LanguageCode = 140
	// Русский (Russian)
	LanguageCode_RU LanguageCode = 144
	// Slovenčina (Slovakian)
	LanguageCode_SK LanguageCode = 148
	// Svenska (Swedish)
	LanguageCode_SV LanguageCode = 152
	// ภาษาไทย (Thai)
	LanguageCode_TH LanguageCode = 156
	// Türkçe (Turkish)
	LanguageCode_TR LanguageCode = 160
	// Українська (Ukrainian)
	LanguageCode_UK LanguageCode = 164
	// Tiếng Việt (Vietnamese)
	LanguageCode_VI LanguageCode = 168
)

var LanguageCode_name = map[int32]string{
	0:   "EN",
	4:   "AR",
	8:   "ZH_HANS",
	12:  "ZH_HANT",
	16:  "ZH_HK",
	20:  "CA",
	24:  "HR",
	28:  "CS",
	32:  "DA",
	36:  "DE",
	40:  "EN_AU",
	44:  "EN_GB",
	48:  "EN_CA",
	52:  "EN_US",
	56:  "EN_IN",
	60:  "ES",
	64:  "ES_419",
	68:  "FI",
	72:  "FR",
	76:  "FR_CA",
	80:  "EL",
	84:  "HE",
	88:  "HI",
	92:  "HU",
	96:  "ID",
	100: "IT",
	104: "JA",
	108: "KO",
	112: "MS",
	116: "MT",
	120: "NL",
	124: "NB",
	128: "PL",
	132: "PT",
	136: "PT_BR",
	140: "RO",
	144: "RU",
	148: "SK",
	152: "SV",
	156: "TH",
	160: "TR",
	164: "UK",
	168: "VI",
}

var LanguageCode_value = map[string]int32{
	"EN":      0,
	"AR":      4,
	"ZH_HANS": 8,
	"ZH_HANT": 12,
	"ZH_HK":   16,
	"CA":      20,
	"HR":      24,
	"CS":      28,
	"DA":      32,
	"DE":      36,
	"EN_AU":   40,
	"EN_GB":   44,
	"EN_CA":   48,
	"EN_US":   52,
	"EN_IN":   56,
	"ES":      60,
	"ES_419":  64,
	"FI":      68,
	"FR":      72,
	"FR_CA":   76,
	"EL":      80,
	"HE":      84,
	"HI":      88,
	"HU":      92,
	"ID":      96,
	"IT":      100,
	"JA":      104,
	"KO":      108,
	"MS":      112,
	"MT":      116,
	"NL":      120,
	"NB":      124,
	"PL":      128,
	"PT":      132,
	"PT_BR":   136,
	"RO":      140,
	"RU":      144,
	"SK":      148,
	"SV":      152,
	"TH":      156,
	"TR":      160,
	"UK":      164,
	"VI":      168,
}

func (x LanguageCode) String() string {
	return proto.EnumName(LanguageCode_name, int32(x))
}

func (LanguageCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5d028b621b54491, []int{0}
}

// Localized strings are optionally used to provide translated values for each of supported language.
type LocalizedString struct {
	// Translations key is a valid LanguageCode. The value represents the translated string.
	// @tag: validateGeneric:"languageCode"
	Translations         map[string]string `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validateGeneric:"languageCode"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LocalizedString) Reset()         { *m = LocalizedString{} }
func (m *LocalizedString) String() string { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()    {}
func (*LocalizedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d028b621b54491, []int{0}
}

func (m *LocalizedString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalizedString.Unmarshal(m, b)
}
func (m *LocalizedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalizedString.Marshal(b, m, deterministic)
}
func (m *LocalizedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizedString.Merge(m, src)
}
func (m *LocalizedString) XXX_Size() int {
	return xxx_messageInfo_LocalizedString.Size(m)
}
func (m *LocalizedString) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizedString.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizedString proto.InternalMessageInfo

func (m *LocalizedString) GetTranslations() map[string]string {
	if m != nil {
		return m.Translations
	}
	return nil
}

func init() {
	proto.RegisterEnum("io.LanguageCode", LanguageCode_name, LanguageCode_value)
	proto.RegisterType((*LocalizedString)(nil), "io.LocalizedString")
	proto.RegisterMapType((map[string]string)(nil), "io.LocalizedString.TranslationsEntry")
}

func init() {
	proto.RegisterFile("io/common/localization.proto", fileDescriptor_d5d028b621b54491)
}

var fileDescriptor_d5d028b621b54491 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcd, 0x8b, 0xd3, 0x40,
	0x1c, 0x86, 0x4d, 0xba, 0xed, 0xba, 0xb3, 0x85, 0x7d, 0x1d, 0xf6, 0x50, 0x64, 0x0f, 0x45, 0x56,
	0x28, 0x22, 0x89, 0x1f, 0x7b, 0x58, 0x45, 0xd4, 0xb4, 0xcd, 0xda, 0x98, 0xd8, 0x2d, 0xf9, 0x58,
	0x64, 0x11, 0x6a, 0x6c, 0x42, 0x77, 0x68, 0x9a, 0x29, 0x4d, 0x56, 0x5c, 0xf1, 0xe0, 0xc1, 0x83,
	0x07, 0x0f, 0x1e, 0x04, 0x3d, 0x28, 0x78, 0xf0, 0x20, 0xfe, 0x95, 0x32, 0xbf, 0x14, 0x3f, 0x4f,
	0xcf, 0xf3, 0xbe, 0x79, 0x27, 0xcc, 0x61, 0xd8, 0x8e, 0x90, 0xe6, 0x44, 0xce, 0xe7, 0x32, 0x37,
	0x33, 0x39, 0x89, 0x33, 0xf1, 0x32, 0x2e, 0x85, 0xcc, 0x8d, 0xc5, 0x52, 0x96, 0x92, 0xeb, 0x42,
	0x5e, 0xfa, 0xa2, 0xb1, 0x2d, 0xaf, 0xfa, 0x94, 0x26, 0x41, 0xb9, 0x14, 0xf9, 0x94, 0x3b, 0xac,
	0x59, 0x2e, 0xe3, 0xbc, 0xc8, 0x68, 0x5c, 0xb4, 0xb4, 0x76, 0xad, 0xb3, 0x79, 0xe3, 0xb2, 0x21,
	0xa4, 0xf1, 0xcf, 0xd4, 0x08, 0xff, 0xd8, 0xd9, 0x79, 0xb9, 0x3c, 0xf3, 0xff, 0x3a, 0x7a, 0xf1,
	0x1e, 0xbb, 0xf0, 0xdf, 0x84, 0x83, 0xd5, 0x66, 0xe9, 0x59, 0x4b, 0x6b, 0x6b, 0x9d, 0x0d, 0x5f,
	0x29, 0xdf, 0x66, 0xf5, 0xe7, 0x71, 0x76, 0x9a, 0xb6, 0x74, 0xea, 0xaa, 0x70, 0x5b, 0xdf, 0xd7,
	0xae, 0x7c, 0xac, 0xb1, 0xa6, 0x17, 0xe7, 0xd3, 0xd3, 0x78, 0x9a, 0xf6, 0x64, 0x92, 0xf2, 0x06,
	0xd3, 0xed, 0x21, 0xce, 0x29, 0x5a, 0x3e, 0xd6, 0xf8, 0x26, 0x5b, 0x3f, 0x1e, 0x8c, 0x07, 0xd6,
	0x30, 0xc0, 0xf9, 0xdf, 0x21, 0x44, 0x93, 0x6f, 0xb0, 0xba, 0x0a, 0x2e, 0xa0, 0xc6, 0x3d, 0x0b,
	0xdb, 0x8a, 0x03, 0x1f, 0x2d, 0xca, 0x01, 0x76, 0x14, 0xfb, 0x16, 0xda, 0x44, 0x1b, 0xbb, 0xea,
	0x88, 0x3d, 0x1c, 0x5b, 0x11, 0x3a, 0x2b, 0x7d, 0xd0, 0xc5, 0xd5, 0x95, 0xf6, 0x2c, 0x5c, 0x5b,
	0x69, 0x14, 0x60, 0x6f, 0xa5, 0xce, 0x10, 0xfb, 0x74, 0xa7, 0x00, 0x77, 0x38, 0x63, 0x0d, 0x3b,
	0x18, 0xef, 0x5d, 0xbf, 0x85, 0xfb, 0xaa, 0x3b, 0x70, 0xd0, 0x27, 0xfa, 0x18, 0xa8, 0xf9, 0x81,
	0xaf, 0x7e, 0xe2, 0xd1, 0xdc, 0xc3, 0x88, 0x6e, 0x63, 0x23, 0x24, 0x3a, 0x78, 0x4c, 0x8c, 0xf0,
	0x44, 0xd1, 0xe9, 0xe3, 0x29, 0x31, 0x44, 0xa2, 0xf8, 0xd0, 0xc2, 0x89, 0xa2, 0x7b, 0x88, 0x4c,
	0xf1, 0x51, 0x80, 0x05, 0x31, 0x44, 0xa9, 0x38, 0xf4, 0xf0, 0x82, 0xd8, 0xc5, 0x2b, 0xbe, 0xce,
	0xf4, 0x91, 0x87, 0xd7, 0x1a, 0x49, 0x88, 0x37, 0x1a, 0x67, 0xac, 0x3e, 0x0a, 0xc7, 0x5d, 0x1f,
	0x6f, 0xa9, 0xf4, 0x0f, 0xf1, 0xae, 0x92, 0x08, 0xef, 0x49, 0x02, 0x17, 0x1f, 0x2a, 0x39, 0xc2,
	0x27, 0x92, 0x70, 0x80, 0xcf, 0x95, 0xf8, 0xf8, 0x4a, 0x12, 0xb9, 0xf8, 0x46, 0x72, 0xe4, 0xe0,
	0xbb, 0xd6, 0xbd, 0xcb, 0xb6, 0x84, 0x34, 0x16, 0x71, 0x51, 0xcc, 0x44, 0x69, 0x8c, 0x5c, 0x21,
	0x8f, 0x77, 0x8b, 0x32, 0x2e, 0x4e, 0x7e, 0x75, 0x13, 0x39, 0x37, 0x85, 0x34, 0xe7, 0x32, 0x49,
	0x33, 0xb3, 0x48, 0x66, 0xe6, 0x54, 0x9a, 0x42, 0xfe, 0xd0, 0xd7, 0x46, 0xae, 0x23, 0x9f, 0x35,
	0xe8, 0x11, 0xde, 0xfc, 0x19, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x19, 0x77, 0x0d, 0xa4, 0x02, 0x00,
	0x00,
}
