// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/common/personal.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Gender, as per government issued id.
type Gender int32

const (
	// Use only where gender is not known
	Gender_NOT_KNOWN Gender = 0
	// Male
	Gender_MALE Gender = 1
	// Female
	Gender_FEMALE Gender = 2
)

var Gender_name = map[int32]string{
	0: "NOT_KNOWN",
	1: "MALE",
	2: "FEMALE",
}

var Gender_value = map[string]int32{
	"NOT_KNOWN": 0,
	"MALE":      1,
	"FEMALE":    2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}

func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_206c14567a70d5f6, []int{0}
}

// A person represents a single, identifiable individual.
type Person struct {
	// Surname / Family name.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Surname string `protobuf:"bytes,1,opt,name=surname,proto3" json:"surname,omitempty"`
	// Forename / Given name.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Forename string `protobuf:"bytes,2,opt,name=forename,proto3" json:"forename,omitempty"`
	// Other names.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OtherNames []string `protobuf:"bytes,3,rep,name=otherNames,proto3" json:"otherNames,omitempty"`
	// Salutation or title.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Salutation string `protobuf:"bytes,4,opt,name=salutation,proto3" json:"salutation,omitempty"`
	// Suffix. For multiple suffixes, separate with spaces.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Suffix string `protobuf:"bytes,5,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// If required, a string representing the user's preferred designation.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DisplayName string `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// Gender, as per government issued id.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Gender Gender `protobuf:"varint,7,opt,name=gender,proto3,enum=io.Gender" json:"gender,omitempty"`
	// Date of birth.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DateOfBirth *Date `protobuf:"bytes,8,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	// Email address.
	// @tag: validateGeneric:"omitempty,email" validateCreate:"omitempty,email" validateUpdate:"omitempty,email"
	EmailAddress string `protobuf:"bytes,9,opt,name=emailAddress,proto3" json:"emailAddress,omitempty"`
	// Telephone number. Enter in the format +{countryCode}{telephoneNumber} with no commas, spaces or other delimiters.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MobileNumber         string   `protobuf:"bytes,10,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_206c14567a70d5f6, []int{0}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *Person) GetForename() string {
	if m != nil {
		return m.Forename
	}
	return ""
}

func (m *Person) GetOtherNames() []string {
	if m != nil {
		return m.OtherNames
	}
	return nil
}

func (m *Person) GetSalutation() string {
	if m != nil {
		return m.Salutation
	}
	return ""
}

func (m *Person) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Person) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Person) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_NOT_KNOWN
}

func (m *Person) GetDateOfBirth() *Date {
	if m != nil {
		return m.DateOfBirth
	}
	return nil
}

func (m *Person) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *Person) GetMobileNumber() string {
	if m != nil {
		return m.MobileNumber
	}
	return ""
}

type Address struct {
	AddressLine1         string   `protobuf:"bytes,1,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2         string   `protobuf:"bytes,2,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	AddressLine3         string   `protobuf:"bytes,3,opt,name=addressLine3,proto3" json:"addressLine3,omitempty"`
	City                 string   `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode              string   `protobuf:"bytes,6,opt,name=zipCode,proto3" json:"zipCode,omitempty"`
	CountryCode          string   `protobuf:"bytes,7,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_206c14567a70d5f6, []int{1}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddressLine1() string {
	if m != nil {
		return m.AddressLine1
	}
	return ""
}

func (m *Address) GetAddressLine2() string {
	if m != nil {
		return m.AddressLine2
	}
	return ""
}

func (m *Address) GetAddressLine3() string {
	if m != nil {
		return m.AddressLine3
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *Address) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func init() {
	proto.RegisterEnum("io.Gender", Gender_name, Gender_value)
	proto.RegisterType((*Person)(nil), "io.Person")
	proto.RegisterType((*Address)(nil), "io.Address")
}

func init() { proto.RegisterFile("io/common/personal.proto", fileDescriptor_206c14567a70d5f6) }

var fileDescriptor_206c14567a70d5f6 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x8e, 0xd2, 0x40,
	0x18, 0xc5, 0x2d, 0xb0, 0x05, 0x3e, 0xfc, 0xb3, 0x99, 0x18, 0x33, 0xc1, 0xc4, 0x10, 0xae, 0xc8,
	0x46, 0xda, 0x08, 0x4f, 0xb0, 0xe8, 0x6a, 0x0c, 0x2b, 0x10, 0x62, 0x62, 0xe2, 0xcd, 0x66, 0x68,
	0x87, 0xf2, 0xb9, 0xed, 0x7c, 0xcd, 0xcc, 0x34, 0x8a, 0x8f, 0xe4, 0xd3, 0x78, 0xef, 0xcb, 0x98,
	0x4e, 0x8b, 0x29, 0xeb, 0xdd, 0x39, 0xe7, 0x77, 0x66, 0x86, 0x1c, 0x0a, 0x1c, 0x29, 0x8c, 0x28,
	0xcb, 0x48, 0x85, 0xb9, 0xd4, 0x86, 0x94, 0x48, 0x83, 0x5c, 0x93, 0x25, 0xd6, 0x42, 0x1a, 0xbe,
	0x76, 0x32, 0x9a, 0x26, 0x52, 0x4d, 0xcd, 0x77, 0x91, 0x24, 0x52, 0x87, 0x94, 0x5b, 0x24, 0x65,
	0x42, 0xa1, 0x14, 0x59, 0xe1, 0x74, 0x75, 0x62, 0xf8, 0x12, 0x29, 0x14, 0x39, 0xd6, 0xf7, 0xdd,
	0xd1, 0xee, 0x9b, 0x8c, 0x6c, 0x0d, 0xc7, 0xbf, 0x5b, 0xe0, 0x6f, 0xdc, 0x0b, 0x8c, 0x43, 0xd7,
	0x14, 0x5a, 0x89, 0x4c, 0x72, 0x6f, 0xe4, 0x4d, 0xfa, 0xdb, 0x93, 0x65, 0x43, 0xe8, 0xed, 0x49,
	0x4b, 0x87, 0x5a, 0x0e, 0xfd, 0xf3, 0xec, 0x15, 0x00, 0xd9, 0x83, 0xd4, 0x2b, 0x91, 0x49, 0xc3,
	0xdb, 0xa3, 0xf6, 0xa4, 0xbf, 0x6d, 0x24, 0x25, 0x37, 0x22, 0x2d, 0xaa, 0x9f, 0xc4, 0x3b, 0xee,
	0x74, 0x23, 0x61, 0x2f, 0xc0, 0x37, 0xc5, 0x7e, 0x8f, 0x3f, 0xf8, 0x85, 0x63, 0xb5, 0x63, 0x23,
	0x18, 0xc4, 0x68, 0xf2, 0x54, 0x1c, 0xcb, 0x7b, 0xb8, 0xef, 0x60, 0x33, 0x62, 0x63, 0xf0, 0x13,
	0xa9, 0x62, 0xa9, 0x79, 0x77, 0xe4, 0x4d, 0x9e, 0xce, 0x20, 0x40, 0x0a, 0x3e, 0xb8, 0x64, 0x5b,
	0x13, 0x76, 0x05, 0x83, 0x58, 0x58, 0xb9, 0xde, 0x2f, 0x50, 0xdb, 0x03, 0xef, 0x8d, 0xbc, 0xc9,
	0x60, 0xd6, 0x2b, 0x8b, 0xef, 0x84, 0x95, 0xdb, 0x26, 0x64, 0x63, 0x78, 0x2c, 0x33, 0x81, 0xe9,
	0x75, 0x1c, 0x6b, 0x69, 0x0c, 0xef, 0xbb, 0x27, 0xcf, 0xb2, 0xb2, 0x93, 0xd1, 0x0e, 0x53, 0xb9,
	0x2a, 0xb2, 0x9d, 0xd4, 0x1c, 0xaa, 0x4e, 0x33, 0x1b, 0xff, 0xf1, 0xa0, 0xdb, 0xe8, 0x8b, 0x4a,
	0xde, 0xa2, 0x92, 0x6f, 0xea, 0x61, 0xcf, 0xb2, 0x07, 0x9d, 0x59, 0xbd, 0xf0, 0x59, 0xf6, 0xa0,
	0x33, 0xe7, 0xed, 0xff, 0x3a, 0x73, 0xc6, 0xa0, 0x13, 0xa1, 0x3d, 0xd6, 0x1b, 0x3b, 0xcd, 0x9e,
	0xc3, 0x85, 0xb1, 0xc2, 0xca, 0x7a, 0xdc, 0xca, 0x94, 0xff, 0xf4, 0x4f, 0xcc, 0xdf, 0x52, 0x7c,
	0xda, 0xf5, 0x64, 0xcb, 0xd5, 0x23, 0x2a, 0x94, 0xd5, 0x47, 0x47, 0xbb, 0xd5, 0xea, 0x8d, 0xe8,
	0x6a, 0x0a, 0x7e, 0xb5, 0x31, 0x7b, 0x02, 0xfd, 0xd5, 0xfa, 0xf3, 0xdd, 0x72, 0xb5, 0xfe, 0xb2,
	0xba, 0x7c, 0xc4, 0x7a, 0xd0, 0xf9, 0x74, 0x7d, 0x7b, 0x73, 0xe9, 0x31, 0x00, 0xff, 0xfd, 0x8d,
	0xd3, 0xad, 0xc5, 0x02, 0x9e, 0x21, 0x05, 0xb9, 0x30, 0xe6, 0x1e, 0x6d, 0xb0, 0x59, 0x22, 0x7d,
	0x9d, 0x24, 0x68, 0x0f, 0xc5, 0x2e, 0x88, 0x28, 0x0b, 0x37, 0xc2, 0x98, 0x25, 0xda, 0xb0, 0x2e,
	0x4c, 0x13, 0x4a, 0x85, 0x4a, 0xa6, 0x26, 0xbe, 0x0f, 0x91, 0x7e, 0xb5, 0x3a, 0x9b, 0xe5, 0x47,
	0xda, 0xf9, 0xee, 0x53, 0x9d, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x29, 0xff, 0xc2, 0xbb, 0x15,
	0x03, 0x00, 0x00,
}
