// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/core/a_rpc.proto

package io

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("io/core/a_rpc.proto", fileDescriptor_97cd888ecc02e359) }

var fileDescriptor_97cd888ecc02e359 = []byte{
	// 3007 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0x5b, 0x8c, 0x1c, 0xc5,
	0xd5, 0x56, 0x8d, 0xb1, 0x8d, 0x6b, 0xaf, 0xae, 0xd9, 0x8b, 0xdd, 0x5e, 0xec, 0x72, 0x1b, 0x30,
	0x2c, 0xbf, 0x67, 0x06, 0x5f, 0x78, 0xe0, 0xff, 0x7f, 0x89, 0xde, 0x35, 0x46, 0x6b, 0x1b, 0xb2,
	0xd9, 0xf5, 0x62, 0x89, 0x28, 0xac, 0x7a, 0xba, 0x6b, 0x7b, 0xcb, 0xdb, 0xd3, 0x35, 0xe9, 0xea,
	0x9e, 0x65, 0xb1, 0x36, 0x01, 0x8b, 0x88, 0x48, 0xa0, 0x20, 0x4d, 0x50, 0x1e, 0x03, 0x09, 0x89,
	0x22, 0xf9, 0x25, 0x09, 0x52, 0x12, 0x29, 0x16, 0x51, 0x24, 0x22, 0xe5, 0x35, 0x02, 0x89, 0x28,
	0x8a, 0x14, 0x22, 0x05, 0xf1, 0x96, 0xf0, 0x92, 0x28, 0xaf, 0x51, 0x5d, 0xfa, 0x36, 0xb3, 0xb3,
	0xbb, 0xc6, 0x03, 0x44, 0x79, 0xb1, 0x77, 0xea, 0xf2, 0x9d, 0xfa, 0xce, 0x39, 0x55, 0xe7, 0xab,
	0xee, 0x86, 0x65, 0xca, 0xaa, 0x0e, 0x0b, 0x49, 0xd5, 0x5e, 0x0e, 0x9b, 0x4e, 0xa5, 0x19, 0xb2,
	0x88, 0xa1, 0x12, 0x65, 0xc6, 0x94, 0xc7, 0x98, 0xe7, 0x93, 0xaa, 0xdd, 0xa4, 0x55, 0x3b, 0x08,
	0x58, 0x64, 0x47, 0x94, 0x05, 0x5c, 0x8d, 0x30, 0x8e, 0xe8, 0x5e, 0xf9, 0xab, 0x1e, 0xaf, 0x54,
	0x49, 0xa3, 0x19, 0x6d, 0xe8, 0xce, 0xff, 0x91, 0xff, 0x39, 0xa7, 0x3c, 0x12, 0x9c, 0xe2, 0xeb,
	0xb6, 0xe7, 0x91, 0xb0, 0xca, 0x9a, 0x72, 0xfa, 0x56, 0x50, 0x94, 0x49, 0x23, 0x0e, 0x6b, 0x34,
	0x58, 0xb0, 0xcc, 0xea, 0xd7, 0x88, 0x13, 0x25, 0x9d, 0x58, 0x2c, 0x8f, 0x84, 0x11, 0x5d, 0xa1,
	0x8e, 0x1d, 0x91, 0xfc, 0xdf, 0x7a, 0xc4, 0x94, 0x24, 0x20, 0xa6, 0x56, 0x5d, 0xca, 0xa3, 0x90,
	0xd6, 0x63, 0x81, 0xae, 0x7b, 0x27, 0xb3, 0xde, 0x66, 0xc8, 0x04, 0xb2, 0xee, 0x38, 0x94, 0x75,
	0x44, 0xa4, 0xd1, 0xf4, 0x33, 0xc0, 0xdc, 0x94, 0x06, 0xe1, 0xdc, 0xf6, 0x92, 0x8e, 0x72, 0xd6,
	0x71, 0x8d, 0xd5, 0x75, 0xa3, 0x91, 0x33, 0x60, 0x7b, 0x34, 0xb0, 0x73, 0xc6, 0x8f, 0x64, 0x7d,
	0x34, 0x88, 0x88, 0x17, 0xe6, 0x3b, 0xc7, 0x28, 0xab, 0xd2, 0x86, 0xed, 0x11, 0xf5, 0xaf, 0x6e,
	0x45, 0x94, 0x55, 0x63, 0x4e, 0x42, 0xf9, 0x8f, 0x6a, 0x3b, 0xfd, 0x31, 0x84, 0x83, 0xb3, 0x19,
	0x6f, 0x8e, 0x5e, 0x06, 0x70, 0xca, 0x23, 0x51, 0xae, 0x6d, 0x91, 0x7a, 0x01, 0x0d, 0xbc, 0x05,
	0xf2, 0xb5, 0x98, 0xf0, 0x08, 0x4d, 0x54, 0x54, 0x78, 0x2a, 0x49, 0x78, 0x2a, 0x8f, 0x8b, 0xf0,
	0x18, 0xf7, 0x54, 0x28, 0xab, 0xf4, 0x9c, 0x66, 0xd6, 0x6e, 0xbc, 0xff, 0xd1, 0x77, 0x4a, 0xd3,
	0xe8, 0x81, 0x5e, 0x2e, 0x5f, 0xe6, 0x6a, 0xc2, 0x72, 0xa8, 0x0d, 0xb9, 0xb0, 0x6c, 0xbb, 0xae,
	0xd5, 0x6c, 0xfa, 0x24, 0x07, 0x8b, 0x86, 0x84, 0x9d, 0x0b, 0xd4, 0x27, 0x33, 0x1b, 0x11, 0xe1,
	0x46, 0xb9, 0xc3, 0xec, 0x79, 0x3b, 0xb2, 0xcd, 0x07, 0xa5, 0xb1, 0x13, 0xe6, 0xd1, 0x82, 0x31,
	0x5b, 0x40, 0x2d, 0xe7, 0x5a, 0x1e, 0x05, 0xd3, 0xc8, 0x83, 0x13, 0x71, 0xd3, 0xb5, 0x23, 0x72,
	0x27, 0x86, 0x8c, 0x5d, 0x18, 0xa2, 0x70, 0xd2, 0x23, 0x51, 0xa7, 0x15, 0x81, 0x82, 0x26, 0x04,
	0xf4, 0xbc, 0xcd, 0xf9, 0x95, 0x8d, 0x26, 0x99, 0x73, 0x49, 0x20, 0x7a, 0x49, 0xb8, 0xb5, 0xc9,
	0xe3, 0xd2, 0xe4, 0x11, 0x74, 0xb8, 0x60, 0xf2, 0x7a, 0x33, 0x9d, 0xbe, 0x89, 0x96, 0xe0, 0xb8,
	0x4f, 0x79, 0x97, 0x2d, 0x8e, 0x86, 0x95, 0xa1, 0x24, 0x95, 0xb6, 0x36, 0x30, 0x2e, 0x0d, 0x8c,
	0xa0, 0xa1, 0xbc, 0x01, 0x5e, 0x03, 0x68, 0x1e, 0x4e, 0x38, 0x2c, 0x0e, 0x76, 0x81, 0x7b, 0x40,
	0xe2, 0x8a, 0xb1, 0xe6, 0x11, 0x89, 0x36, 0x8e, 0xca, 0x05, 0xb4, 0xaa, 0x04, 0x42, 0x8b, 0x70,
	0xc8, 0x76, 0xdd, 0xf9, 0x90, 0xb6, 0xec, 0x88, 0x5c, 0x22, 0x1b, 0x68, 0x5c, 0x02, 0xa5, 0xbf,
	0x75, 0xf2, 0x18, 0xfb, 0x44, 0xf3, 0x9c, 0x6b, 0x9e, 0x90, 0x60, 0xf7, 0x98, 0x87, 0x0a, 0xdc,
	0x9b, 0x6a, 0xfc, 0xf2, 0x1a, 0xd9, 0x10, 0x8e, 0xbe, 0x0a, 0x47, 0x5d, 0xe2, 0x93, 0x88, 0xe4,
	0x70, 0x35, 0x80, 0xd1, 0x23, 0x79, 0x13, 0xe0, 0xe9, 0x6d, 0x81, 0x9f, 0x81, 0x23, 0xc2, 0xad,
	0x19, 0x6c, 0x37, 0x71, 0x54, 0x5c, 0xff, 0x36, 0x01, 0xcb, 0x61, 0x0b, 0xdf, 0x3e, 0x0d, 0x47,
	0xa5, 0x4b, 0xb6, 0x03, 0xcf, 0x79, 0xf5, 0xa4, 0xc4, 0x3c, 0x8e, 0x8e, 0xf5, 0xc4, 0xd4, 0x1e,
	0x5e, 0x86, 0x07, 0x6d, 0xd7, 0xbd, 0x72, 0x79, 0x31, 0x9f, 0xd9, 0x87, 0x05, 0x50, 0xb1, 0xad,
	0xd3, 0xd3, 0xda, 0x80, 0x39, 0x55, 0x30, 0x10, 0xf9, 0xbc, 0x33, 0xad, 0x97, 0xe1, 0x98, 0xf2,
	0x76, 0x87, 0x8d, 0x9d, 0x3c, 0xae, 0x0d, 0x4c, 0xef, 0x68, 0x80, 0xc0, 0xb2, 0xf0, 0x7a, 0x11,
	0xbe, 0xdb, 0x39, 0x13, 0xdd, 0x9c, 0xa4, 0xf7, 0xef, 0x95, 0x76, 0x8e, 0xa2, 0x6d, 0xed, 0xd4,
	0x00, 0x7a, 0x16, 0x8e, 0x49, 0x8f, 0xed, 0x64, 0x27, 0x17, 0x84, 0x87, 0x24, 0xf4, 0x7d, 0xe8,
	0xc4, 0x76, 0xd0, 0x3a, 0x10, 0xa7, 0xff, 0x54, 0x86, 0x07, 0xae, 0xe8, 0x62, 0xc0, 0xd1, 0x47,
	0x00, 0x0e, 0x3b, 0x21, 0xb1, 0x23, 0x92, 0xb4, 0xa1, 0xd1, 0xf4, 0x10, 0xd0, 0x2d, 0x69, 0x2c,
	0x7e, 0x09, 0xda, 0xd6, 0x1b, 0x00, 0x8d, 0xcd, 0xca, 0x09, 0x58, 0x8c, 0xc1, 0xe9, 0xa0, 0x63,
	0xaa, 0x95, 0x63, 0x1b, 0x8b, 0x23, 0x00, 0x27, 0x05, 0x07, 0x87, 0xc4, 0x61, 0xa1, 0x5b, 0xb9,
	0x58, 0x83, 0x7b, 0xce, 0xd6, 0x6a, 0xe8, 0x41, 0x78, 0xf2, 0xca, 0x2a, 0x09, 0x09, 0xa6, 0x72,
	0x68, 0xc8, 0xea, 0x3e, 0x69, 0xe0, 0x75, 0x1a, 0xad, 0xe2, 0x68, 0x95, 0x60, 0x1a, 0x34, 0xe3,
	0x08, 0xbb, 0x76, 0x64, 0x57, 0x2e, 0x9e, 0x15, 0x33, 0xce, 0xa0, 0x53, 0xf0, 0xa1, 0x05, 0x12,
	0xc5, 0x61, 0x40, 0x5c, 0xbc, 0xbe, 0x4a, 0x02, 0x39, 0x4e, 0x94, 0x0e, 0xec, 0xdb, 0xce, 0x1a,
	0xc7, 0x76, 0x1c, 0xad, 0xb2, 0x90, 0x3e, 0xaf, 0x0a, 0x8f, 0xf4, 0xc5, 0xb0, 0x79, 0x20, 0xad,
	0x78, 0x22, 0x76, 0x1f, 0x94, 0xe0, 0xb0, 0x3a, 0x5d, 0xb7, 0xa1, 0xd9, 0xd5, 0x62, 0xbe, 0x51,
	0x6a, 0x5b, 0x2f, 0x97, 0xd0, 0xd8, 0x92, 0x9c, 0xda, 0x41, 0x18, 0xab, 0x56, 0x8e, 0xed, 0xa0,
	0x6f, 0x8c, 0x4d, 0xc5, 0xf8, 0x08, 0x3c, 0xbc, 0xd4, 0x8b, 0xdf, 0xc5, 0xa3, 0x62, 0xcc, 0x59,
	0x34, 0x09, 0xc7, 0x17, 0xa4, 0x1d, 0xbc, 0x6e, 0x73, 0x1c, 0xb0, 0x08, 0xaf, 0xb0, 0x38, 0x70,
	0x2b, 0x17, 0xaf, 0xc2, 0x3d, 0xe7, 0x6a, 0x67, 0xd0, 0x3c, 0x7c, 0x6a, 0x91, 0x84, 0x2d, 0x12,
	0x0a, 0xb3, 0x71, 0x60, 0xb7, 0x6c, 0xea, 0xdb, 0x75, 0x9f, 0x54, 0xf0, 0x8c, 0xed, 0xac, 0x61,
	0xb6, 0xb2, 0x82, 0x57, 0x58, 0x88, 0x4f, 0x9f, 0xab, 0x35, 0x04, 0x05, 0x17, 0x87, 0xa4, 0x49,
	0xec, 0x08, 0xeb, 0xaa, 0x87, 0xe3, 0x20, 0xa2, 0x3e, 0xe6, 0xb1, 0xe3, 0x10, 0xce, 0x57, 0x62,
	0x5f, 0x3b, 0xd6, 0x28, 0x3a, 0xf6, 0x3d, 0x00, 0x07, 0x3c, 0x12, 0xa5, 0x5e, 0x4d, 0x76, 0xdb,
	0xa1, 0x4e, 0x5f, 0x2e, 0x10, 0xde, 0x64, 0x01, 0x27, 0xe6, 0x9b, 0xa0, 0x6d, 0xbd, 0x08, 0xd0,
	0xa1, 0x27, 0x48, 0x54, 0x74, 0x28, 0x56, 0x74, 0x8c, 0xe3, 0x0b, 0x24, 0x0a, 0x29, 0x69, 0x6d,
	0x93, 0x4a, 0x7d, 0x70, 0x53, 0x5a, 0x0d, 0x12, 0xf0, 0xaa, 0x88, 0x40, 0xf5, 0x3a, 0x75, 0x37,
	0xd1, 0x0b, 0x25, 0x88, 0x3c, 0x12, 0x9d, 0x27, 0x2b, 0x76, 0xec, 0x67, 0xdc, 0x0c, 0xc1, 0xa9,
	0xa3, 0x31, 0x39, 0xae, 0xba, 0x73, 0xe7, 0x16, 0x68, 0x5b, 0xaf, 0x00, 0x64, 0x0a, 0x9e, 0x16,
	0xd6, 0xd3, 0xbe, 0x70, 0xc6, 0xf7, 0xa3, 0x7b, 0x3b, 0x19, 0x2b, 0x1d, 0xcb, 0xfc, 0xcd, 0xea,
	0xf5, 0x90, 0xb4, 0x28, 0xa7, 0x2c, 0xd8, 0x44, 0x7f, 0x01, 0x70, 0xd0, 0x61, 0xcd, 0x8d, 0x94,
	0xfc, 0xb8, 0x3a, 0x6e, 0xb2, 0x96, 0x39, 0x91, 0xb6, 0xe9, 0xd1, 0xf0, 0x53, 0xd0, 0xb6, 0xbe,
	0x0b, 0xd0, 0x11, 0x31, 0x02, 0xdb, 0x5b, 0xd3, 0x3c, 0x33, 0xcb, 0x9a, 0xb4, 0x27, 0x47, 0x9d,
	0x83, 0x62, 0x9f, 0x8b, 0x21, 0x01, 0x59, 0xc7, 0xb4, 0x8f, 0xc4, 0x47, 0xcd, 0xe1, 0x8c, 0xb8,
	0x60, 0x86, 0x7e, 0x07, 0xe0, 0xb0, 0xae, 0x18, 0x9d, 0xd9, 0xdb, 0xab, 0x56, 0xbc, 0x0e, 0xda,
	0xd6, 0x75, 0x34, 0x76, 0x5e, 0xce, 0xea, 0x3c, 0xff, 0x54, 0x6b, 0xcf, 0xe3, 0xa0, 0x7f, 0x4c,
	0xa6, 0x73, 0x4c, 0x64, 0xbe, 0xde, 0x28, 0xc1, 0x31, 0x59, 0x9a, 0x92, 0x63, 0xfd, 0x02, 0x0b,
	0x85, 0x8d, 0xae, 0x9a, 0xd1, 0x7b, 0x57, 0xbe, 0x03, 0xda, 0xd6, 0x0f, 0x00, 0x3a, 0x26, 0xb3,
	0xd5, 0xf7, 0x8b, 0xdc, 0x38, 0xbe, 0xc0, 0x42, 0x2c, 0x10, 0x8d, 0xff, 0xcd, 0xa5, 0xaa, 0xef,
	0x17, 0x89, 0x72, 0xcc, 0x23, 0x16, 0x12, 0x17, 0xc7, 0x81, 0x4b, 0xc2, 0xec, 0x94, 0xb6, 0x1d,
	0x59, 0x79, 0xfa, 0x17, 0xcb, 0x83, 0x68, 0x24, 0xf5, 0x00, 0x97, 0x97, 0x88, 0x1a, 0x40, 0xff,
	0x00, 0x70, 0xa8, 0xe0, 0x84, 0xdb, 0x60, 0xff, 0x0b, 0xd0, 0xb6, 0xde, 0x4c, 0xf6, 0xea, 0xd6,
	0xec, 0x67, 0x59, 0xa3, 0x69, 0x07, 0x1b, 0xc6, 0x23, 0xb7, 0xe7, 0x00, 0x47, 0x4d, 0xeb, 0x1f,
	0xf7, 0x41, 0x04, 0x33, 0xee, 0x35, 0x80, 0x5e, 0x2a, 0xc1, 0x61, 0xa5, 0x17, 0x7a, 0xf2, 0xce,
	0x29, 0x85, 0x0f, 0x40, 0xdb, 0xfa, 0x15, 0x40, 0xea, 0xd7, 0x56, 0x54, 0xad, 0xa4, 0x4c, 0xe0,
	0x88, 0xe1, 0x2b, 0xab, 0x44, 0x45, 0xfd, 0x7c, 0xfe, 0x80, 0x92, 0xd6, 0x30, 0x5b, 0xd9, 0x55,
	0xf0, 0x4f, 0xf2, 0xfe, 0xbb, 0x00, 0xa1, 0xd1, 0x5c, 0xf8, 0x95, 0xbc, 0xfc, 0x66, 0x09, 0x8e,
	0x17, 0xdd, 0xd0, 0x6b, 0x0f, 0xe4, 0xbc, 0xf1, 0x7b, 0xd0, 0xb6, 0x7e, 0x02, 0xd0, 0x74, 0x4f,
	0x6f, 0x7c, 0x69, 0x5d, 0x68, 0x8e, 0xfa, 0x46, 0xe6, 0x89, 0xff, 0xbf, 0xfd, 0xfc, 0x3f, 0xc9,
	0xfb, 0xbf, 0x03, 0x26, 0xd1, 0x78, 0xc7, 0x0e, 0xd0, 0xea, 0xee, 0xbd, 0x09, 0xb8, 0x6f, 0x4e,
	0x5c, 0xb5, 0x39, 0xfa, 0x0a, 0x1c, 0xe1, 0x24, 0x9a, 0x0f, 0xd9, 0x0a, 0xf5, 0x89, 0x6c, 0x4b,
	0x6e, 0x35, 0x59, 0x8b, 0x3a, 0xc4, 0x7b, 0x1d, 0x77, 0x87, 0xa5, 0xad, 0xb2, 0x39, 0xac, 0xef,
	0xf0, 0x4d, 0x35, 0x53, 0xd4, 0xfd, 0x8b, 0x70, 0xc4, 0xeb, 0x00, 0xef, 0x75, 0x1f, 0xdf, 0x2f,
	0x8c, 0x2e, 0x85, 0xbe, 0x39, 0xa1, 0x8e, 0x2f, 0xd4, 0x01, 0x87, 0x66, 0x61, 0xb9, 0x03, 0x6b,
	0x66, 0x63, 0xce, 0x4d, 0x0f, 0xe3, 0x74, 0x7e, 0x76, 0x83, 0x2b, 0xcc, 0x57, 0x67, 0xe0, 0x1f,
	0x45, 0xc1, 0x92, 0x0a, 0x54, 0xd3, 0x1f, 0x93, 0x71, 0xce, 0x5a, 0x14, 0xd5, 0x41, 0x09, 0x2a,
	0x7f, 0xbb, 0xdc, 0xfc, 0x21, 0x68, 0x5b, 0xdf, 0x06, 0x68, 0x48, 0x0b, 0x5a, 0x35, 0xd3, 0x18,
	0x4f, 0x94, 0xac, 0x34, 0xf3, 0x85, 0xe8, 0xd7, 0x41, 0x73, 0xbf, 0x22, 0xc9, 0x85, 0xb3, 0xdf,
	0x2d, 0xc1, 0x01, 0xa5, 0x5e, 0x95, 0xa7, 0x25, 0xb5, 0xa5, 0xac, 0x41, 0x51, 0x1b, 0x49, 0xa9,
	0xa9, 0xbc, 0x31, 0x5f, 0x2d, 0xb5, 0xad, 0x7f, 0x01, 0x34, 0xa8, 0xd5, 0xab, 0xec, 0x32, 0x0e,
	0xe5, 0x54, 0xeb, 0x9d, 0xf2, 0xfb, 0x8f, 0x57, 0xab, 0x03, 0xc6, 0x3e, 0xe5, 0x46, 0xe1, 0xc5,
	0xb7, 0x94, 0x54, 0x95, 0x6e, 0x58, 0x5a, 0xb8, 0xdc, 0x9d, 0x5f, 0x37, 0x40, 0xdb, 0xf2, 0xd1,
	0x90, 0x28, 0x02, 0x72, 0x10, 0x5e, 0x5a, 0xb8, 0x6c, 0x4c, 0xe6, 0x36, 0x7c, 0xe2, 0xb1, 0x38,
	0xf4, 0xfb, 0xb7, 0x95, 0x87, 0xd0, 0x80, 0xce, 0x67, 0x99, 0xc7, 0xb7, 0x00, 0x1c, 0x4e, 0x56,
	0x39, 0x13, 0x07, 0xae, 0x9f, 0xa9, 0x92, 0x2c, 0xc0, 0xaa, 0xc3, 0x7c, 0x0d, 0xb4, 0xad, 0x10,
	0x8d, 0x66, 0x0b, 0x56, 0xed, 0x86, 0xb1, 0xc5, 0x9a, 0xeb, 0xb2, 0xab, 0x7f, 0xcb, 0x1e, 0x43,
	0x48, 0x2f, 0x5b, 0x21, 0xab, 0xd5, 0xff, 0x1c, 0xc0, 0xc1, 0x64, 0xf5, 0xf2, 0x89, 0x52, 0xf7,
	0xda, 0x75, 0x72, 0xbe, 0x02, 0xda, 0x56, 0x13, 0x0d, 0x67, 0x6b, 0x17, 0xc3, 0xb7, 0x5c, 0x79,
	0xbf, 0x25, 0xb0, 0x28, 0x1f, 0x6a, 0xe5, 0x99, 0xe2, 0xff, 0x10, 0xc0, 0x31, 0x8f, 0x44, 0x97,
	0x99, 0x63, 0xfb, 0xf4, 0x79, 0xe2, 0xa6, 0x49, 0x32, 0x29, 0xd6, 0x5d, 0x6c, 0x56, 0xbb, 0x2d,
	0xcd, 0x1a, 0x71, 0x86, 0x7c, 0x03, 0x4d, 0x0a, 0x22, 0xe9, 0xb8, 0x5c, 0xfe, 0xe0, 0x7c, 0xe9,
	0xf4, 0xd3, 0x01, 0x34, 0x19, 0xd0, 0x3f, 0x5e, 0x53, 0xc8, 0xc8, 0x25, 0x52, 0xf5, 0xba, 0x6f,
	0x07, 0x5e, 0x6c, 0x7b, 0x64, 0x96, 0xb9, 0x64, 0x13, 0xfd, 0x0c, 0xc0, 0x01, 0xa5, 0x76, 0xd5,
	0x19, 0xb2, 0x93, 0xd4, 0x7d, 0x11, 0xb4, 0xad, 0x35, 0x34, 0xa8, 0xa5, 0xae, 0x3a, 0x3b, 0x26,
	0x73, 0x12, 0x37, 0x1f, 0x9b, 0xfe, 0xed, 0x85, 0xe9, 0xc2, 0x5e, 0xf8, 0x18, 0x24, 0xcf, 0x74,
	0x8a, 0x11, 0xe8, 0x1d, 0x95, 0xae, 0x34, 0x7b, 0x0b, 0xb4, 0xad, 0xaf, 0xa3, 0x09, 0x4d, 0xa3,
	0x23, 0x40, 0x06, 0x4e, 0x09, 0x75, 0x85, 0xa6, 0xcf, 0xcc, 0xa6, 0xa6, 0xb7, 0x0b, 0xce, 0x5f,
	0x01, 0x3c, 0x28, 0xb4, 0xab, 0x2a, 0x40, 0xbd, 0x94, 0x4b, 0x17, 0xb9, 0x9b, 0xa0, 0x6d, 0xb5,
	0x81, 0xca, 0x3d, 0xa1, 0x5e, 0xd4, 0xf4, 0x4c, 0xac, 0x9f, 0x29, 0x8a, 0x15, 0x55, 0x50, 0x3e,
	0x2f, 0x91, 0x3e, 0x8c, 0x06, 0x75, 0x09, 0x4b, 0x14, 0xfa, 0xfb, 0x00, 0xc2, 0x8c, 0xe5, 0xce,
	0xf4, 0xbe, 0xaf, 0xaa, 0xf3, 0xa1, 0x84, 0x5e, 0xa6, 0x4d, 0x75, 0xa1, 0xae, 0xec, 0x8e, 0x5f,
	0xdf, 0x05, 0xe8, 0x01, 0x94, 0x54, 0xe7, 0x1a, 0x40, 0x7f, 0x07, 0x70, 0x40, 0xba, 0xae, 0x07,
	0xad, 0x9c, 0xde, 0x7c, 0x17, 0xb4, 0xad, 0x9b, 0x00, 0xdd, 0x9f, 0xe9, 0x4d, 0x1d, 0xb1, 0xad,
	0x55, 0xf7, 0xff, 0x6d, 0xa9, 0xba, 0xb7, 0x8b, 0xe2, 0x67, 0xa1, 0xb6, 0x47, 0xd0, 0x50, 0x12,
	0x47, 0x25, 0xb5, 0x3f, 0x01, 0x10, 0xe5, 0x08, 0xef, 0x42, 0x67, 0xbf, 0xa3, 0x9e, 0x1b, 0x9a,
	0x5d, 0xbc, 0xbb, 0xf5, 0xf5, 0xb9, 0xdd, 0xa7, 0xec, 0x67, 0xa1, 0xab, 0xd3, 0xaa, 0x56, 0x10,
	0xd5, 0xbf, 0x19, 0x81, 0x7b, 0x05, 0x2e, 0x47, 0x8f, 0xc1, 0x61, 0xd1, 0x1e, 0xd8, 0x0d, 0xf2,
	0xf8, 0x73, 0x94, 0x47, 0x3c, 0x3d, 0x47, 0x07, 0xc4, 0xff, 0x33, 0x8c, 0xf9, 0xc4, 0x0e, 0x12,
	0xe1, 0x8c, 0x0e, 0x2a, 0x14, 0x22, 0x87, 0xaa, 0x33, 0xed, 0x31, 0x08, 0x95, 0x4c, 0x95, 0x4e,
	0x93, 0xb3, 0x9e, 0x22, 0xeb, 0x92, 0x7b, 0x39, 0xf7, 0x23, 0xbd, 0x9a, 0x8e, 0x4a, 0x28, 0x68,
	0xee, 0x95, 0x50, 0x42, 0xc7, 0x9c, 0x83, 0xfb, 0x03, 0x35, 0xa8, 0x38, 0x5d, 0x56, 0xa4, 0x8b,
	0x57, 0xaf, 0x98, 0x63, 0xe9, 0x23, 0x50, 0x69, 0x3d, 0x20, 0xeb, 0x62, 0xda, 0x23, 0x70, 0x5f,
	0x8b, 0x84, 0x74, 0x65, 0x63, 0xeb, 0x25, 0x4f, 0xaa, 0x9b, 0xb5, 0x31, 0xa8, 0x26, 0xa9, 0xa1,
	0x62, 0xde, 0xb3, 0x70, 0x32, 0x24, 0x9c, 0x04, 0xee, 0xd3, 0xa2, 0x89, 0x3a, 0xd2, 0x9b, 0x8f,
	0x37, 0x6c, 0xea, 0xf7, 0x54, 0xfc, 0x05, 0xe0, 0xa3, 0x12, 0xf8, 0x90, 0x59, 0xce, 0x03, 0x57,
	0x15, 0xa4, 0xc0, 0x7f, 0x12, 0xee, 0xf7, 0x48, 0x24, 0xe9, 0xf4, 0xc2, 0x93, 0x8e, 0x79, 0x42,
	0x0d, 0x4a, 0x1d, 0x93, 0xbd, 0x1d, 0x92, 0xb8, 0xc9, 0x65, 0xe2, 0x2c, 0xdc, 0xeb, 0x33, 0x8f,
	0x06, 0x68, 0x44, 0xeb, 0x7f, 0xf9, 0x16, 0xcb, 0xf6, 0x79, 0xe6, 0x9f, 0x83, 0x4a, 0x1b, 0x9a,
	0xfb, 0xaa, 0x72, 0xa4, 0x58, 0xc4, 0x3c, 0x1c, 0x12, 0x2b, 0x8a, 0xc4, 0xfd, 0x6f, 0x9d, 0x85,
	0x6e, 0xf7, 0xec, 0x5e, 0x75, 0x52, 0x5f, 0x6a, 0x8c, 0x01, 0xb5, 0x0c, 0x89, 0x22, 0x10, 0xbf,
	0x2a, 0x1f, 0x21, 0xce, 0xab, 0xd7, 0xb1, 0xe9, 0x26, 0x99, 0xd4, 0x17, 0x30, 0xd1, 0xb8, 0x18,
	0xd9, 0x51, 0xcc, 0x2f, 0x50, 0x3f, 0x22, 0xa1, 0x72, 0x99, 0xee, 0x30, 0x8f, 0x49, 0xcc, 0xc3,
	0x68, 0x32, 0x79, 0x9d, 0xab, 0xb3, 0xf1, 0x3a, 0x97, 0x53, 0x36, 0x6b, 0x00, 0x7d, 0x59, 0x6a,
	0xd9, 0x04, 0x7e, 0x97, 0xb8, 0x46, 0x9a, 0xe3, 0x29, 0x6e, 0x0e, 0x72, 0x06, 0x8e, 0x66, 0x90,
	0x33, 0x1b, 0x4b, 0x31, 0x75, 0x8b, 0xa9, 0x92, 0xc0, 0x64, 0xd9, 0x9d, 0xc2, 0x50, 0x57, 0x65,
	0xb7, 0x03, 0x71, 0x86, 0x61, 0x05, 0x6e, 0x72, 0x95, 0x9e, 0xd9, 0x58, 0x5c, 0x65, 0x61, 0x24,
	0xaa, 0x5d, 0x8a, 0x39, 0x95, 0xc3, 0xcc, 0xf5, 0x2f, 0x10, 0x1e, 0xfb, 0x5b, 0x1a, 0xe1, 0x8e,
	0x32, 0xf2, 0x4f, 0x71, 0x00, 0xa9, 0x8b, 0x5d, 0xf6, 0xc2, 0x99, 0xab, 0x97, 0x97, 0xb9, 0x96,
	0x59, 0x16, 0xac, 0x50, 0x8f, 0xa7, 0x8f, 0x28, 0x7f, 0xad, 0x1e, 0x71, 0x95, 0x93, 0xcb, 0x5e,
	0x6e, 0xae, 0x71, 0x62, 0x91, 0x44, 0x1c, 0xc7, 0x4d, 0x9c, 0x7b, 0x85, 0x8d, 0x1d, 0x09, 0x10,
	0xeb, 0x31, 0x9f, 0xef, 0x05, 0x10, 0x99, 0x43, 0xf9, 0xd7, 0xe9, 0xf2, 0x1a, 0xf8, 0x09, 0x90,
	0x97, 0xee, 0x02, 0xe9, 0xc9, 0x0e, 0xd2, 0x3c, 0x79, 0x20, 0xdd, 0xc3, 0x1b, 0x52, 0x33, 0x6c,
	0xea, 0x3b, 0x43, 0xde, 0x03, 0xf7, 0x65, 0x07, 0xef, 0x76, 0x3e, 0xe8, 0xd7, 0x41, 0x7b, 0x2f,
	0x32, 0x0b, 0xfc, 0x0a, 0x8f, 0xa1, 0x1d, 0xdf, 0xe6, 0x7c, 0xce, 0xdd, 0x44, 0x7f, 0x28, 0x41,
	0xa4, 0x2f, 0xbe, 0xb7, 0x13, 0xe9, 0x37, 0x4b, 0x6d, 0xeb, 0xa5, 0x12, 0x2a, 0x27, 0x17, 0xdf,
	0x3c, 0xcf, 0xa3, 0xf9, 0xfb, 0x6f, 0x8e, 0xe8, 0x7f, 0xf1, 0x2d, 0x18, 0x19, 0xdd, 0xb9, 0xf4,
	0x37, 0x00, 0x91, 0xbe, 0x0e, 0xec, 0x32, 0x9d, 0xb6, 0x3e, 0xfe, 0x7e, 0x04, 0xda, 0xd6, 0x73,
	0xa8, 0x9c, 0x5c, 0x13, 0xf2, 0x9e, 0xbe, 0x27, 0x7f, 0x5b, 0xe8, 0xf2, 0x74, 0xff, 0x32, 0x69,
	0x7a, 0x17, 0x99, 0x74, 0xfa, 0xb5, 0x3d, 0xf0, 0xee, 0x27, 0xd5, 0x87, 0x2e, 0x1c, 0xfd, 0x16,
	0xc0, 0x01, 0x51, 0x7e, 0x74, 0x83, 0x2a, 0xa3, 0xfa, 0x47, 0x9a, 0x44, 0x6f, 0x80, 0xb6, 0xf5,
	0x2d, 0x80, 0x06, 0x17, 0x49, 0xe0, 0xe2, 0xa4, 0xf3, 0x42, 0xf6, 0x92, 0x33, 0x20, 0xeb, 0x58,
	0x7f, 0x3a, 0x83, 0xa9, 0xda, 0xd2, 0x22, 0x1f, 0xea, 0x36, 0x27, 0x32, 0x34, 0x71, 0x92, 0x67,
	0xbe, 0x8f, 0x43, 0xe2, 0x93, 0x96, 0x1d, 0x44, 0xf2, 0x79, 0x21, 0xf9, 0x34, 0x47, 0x89, 0xba,
	0x1e, 0x99, 0x77, 0x27, 0x5f, 0xeb, 0x88, 0x18, 0xde, 0x52, 0x0f, 0x34, 0x52, 0x5a, 0x9d, 0x0a,
	0x2c, 0x4f, 0xcb, 0x7c, 0x55, 0x06, 0x6a, 0x50, 0xec, 0xfb, 0x64, 0x42, 0xe7, 0xb3, 0x6c, 0x0d,
	0xcd, 0x71, 0xc3, 0x8e, 0x9c, 0x55, 0x1a, 0x78, 0x4a, 0x3d, 0x87, 0x34, 0x22, 0x21, 0x95, 0xcb,
	0x6b, 0x51, 0x97, 0xb8, 0x9f, 0x76, 0xf5, 0x03, 0xe8, 0x40, 0xb2, 0x7a, 0x5e, 0x03, 0xa7, 0x6f,
	0x95, 0xe0, 0xe0, 0xf9, 0xdc, 0xb7, 0x4c, 0xe8, 0x66, 0x09, 0x8e, 0x8a, 0xa8, 0x5c, 0x25, 0xbe,
	0xc3, 0x1a, 0x44, 0x49, 0x0c, 0x59, 0x24, 0xe4, 0x9f, 0xf9, 0xb1, 0x3b, 0x65, 0xe5, 0x87, 0xa0,
	0x6d, 0xbd, 0x03, 0x10, 0x92, 0xb1, 0xd3, 0x78, 0x58, 0xa2, 0x18, 0x15, 0xd1, 0x26, 0xd6, 0xbb,
	0xae, 0x9b, 0x89, 0x68, 0x16, 0xba, 0x5b, 0xa6, 0xa9, 0x4b, 0x5b, 0xd4, 0x8d, 0x6d, 0xff, 0x0e,
	0xce, 0x83, 0x9d, 0xf6, 0xfa, 0x7d, 0x62, 0xaf, 0xd7, 0xd0, 0x51, 0x38, 0xa5, 0x10, 0x45, 0xb7,
	0xde, 0x22, 0x61, 0x60, 0xfb, 0x98, 0x84, 0x21, 0x0b, 0x2b, 0xa9, 0x6a, 0xca, 0x7f, 0xef, 0x55,
	0x95, 0x8b, 0x7d, 0x14, 0x4c, 0x9f, 0x7e, 0xfb, 0x2e, 0x78, 0xd7, 0x45, 0x56, 0xe7, 0xe8, 0xcf,
	0x00, 0x1e, 0xa0, 0x8d, 0xa6, 0x28, 0x9e, 0xbc, 0xa5, 0x1f, 0x7a, 0xf2, 0xd6, 0x9c, 0x6c, 0xe9,
	0xfc, 0x96, 0xe2, 0x6d, 0xd0, 0xb6, 0x5e, 0x07, 0x08, 0xaa, 0x5e, 0x3c, 0xcb, 0x5b, 0xc6, 0xf4,
	0x15, 0x7b, 0x8d, 0x68, 0x4a, 0x32, 0xba, 0xd8, 0xe1, 0x2d, 0x99, 0xbf, 0xf5, 0x98, 0xfa, 0xd2,
	0x51, 0xb3, 0xbc, 0x85, 0xaf, 0xb1, 0xfa, 0xa7, 0x71, 0xc5, 0x03, 0x70, 0xcf, 0xd9, 0x87, 0xcf,
	0xa0, 0xe3, 0xf0, 0x98, 0x10, 0xf8, 0x42, 0x9f, 0x65, 0x76, 0x28, 0xc7, 0x11, 0x63, 0xd8, 0xb7,
	0x43, 0x8f, 0x68, 0xf1, 0x6d, 0x8e, 0x54, 0xaf, 0xb1, 0x7a, 0xd5, 0xe1, 0xad, 0x65, 0x45, 0x49,
	0x64, 0xf9, 0x8f, 0x81, 0x14, 0x88, 0x92, 0x6c, 0x67, 0x86, 0x2b, 0x49, 0xc7, 0xea, 0xe6, 0x0b,
	0xf2, 0x69, 0xd2, 0xdd, 0x22, 0xbb, 0xc5, 0x40, 0xe3, 0x74, 0x31, 0xb3, 0xaf, 0xb1, 0xfa, 0x67,
	0x95, 0xd5, 0xfb, 0xd1, 0x5e, 0xb1, 0x68, 0x71, 0x13, 0xfc, 0x1e, 0x80, 0xfb, 0xd4, 0x4a, 0x8b,
	0xcf, 0x16, 0xc5, 0x02, 0x6f, 0x80, 0xb6, 0x15, 0xa0, 0xfd, 0x7a, 0x81, 0xc6, 0xc3, 0xf9, 0xab,
	0xdd, 0x35, 0x56, 0x4f, 0xde, 0x81, 0xa6, 0x66, 0x1c, 0x16, 0x86, 0x52, 0xe9, 0xba, 0x62, 0xc5,
	0xf4, 0x8e, 0x36, 0x9d, 0xf0, 0xa9, 0x10, 0x4e, 0x33, 0x33, 0x70, 0x84, 0xb2, 0x8a, 0x38, 0x83,
	0xd6, 0x68, 0x54, 0x99, 0xbf, 0x44, 0xd9, 0x33, 0x0f, 0x78, 0x34, 0x5a, 0x8d, 0xeb, 0x15, 0x87,
	0x35, 0xaa, 0x42, 0xfc, 0x5e, 0xa2, 0x51, 0x55, 0x0f, 0x38, 0xe5, 0x31, 0xdf, 0x0e, 0xbc, 0x53,
	0xdc, 0x5d, 0xab, 0x52, 0x76, 0xb3, 0x74, 0xd7, 0xfc, 0xa5, 0x39, 0x56, 0xdf, 0x27, 0xb7, 0xda,
	0x99, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x77, 0x36, 0x3b, 0x53, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificatesClient is the client API for Certificates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificatesClient interface {
	GetCertificateSigningRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CertificateSigningRequest, error)
	AddAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error)
	UpdateAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error)
	GetAppleCertificateData(ctx context.Context, in *PassTypeIdentifier, opts ...grpc.CallOption) (*CertificateData, error)
	ListAppleCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesClient, error)
	CountAppleCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	AddPrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*Id, error)
	DeletePrivateKey(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPrivateKeys(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListPrivateKeysClient, error)
	CountPrivateKeys(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	AddTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*Id, error)
	DeleteTLSCertificate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTLSCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListTLSCertificatesClient, error)
	CountTLSCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
}

type certificatesClient struct {
	cc *grpc.ClientConn
}

func NewCertificatesClient(cc *grpc.ClientConn) CertificatesClient {
	return &certificatesClient{cc}
}

func (c *certificatesClient) GetCertificateSigningRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CertificateSigningRequest, error) {
	out := new(CertificateSigningRequest)
	err := c.cc.Invoke(ctx, "/io.Certificates/getCertificateSigningRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) AddAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/addAppleCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) UpdateAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/updateAppleCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) GetAppleCertificateData(ctx context.Context, in *PassTypeIdentifier, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/getAppleCertificateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) ListAppleCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Certificates_serviceDesc.Streams[0], "/io.Certificates/listAppleCertificates", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificatesListAppleCertificatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Certificates_ListAppleCertificatesClient interface {
	Recv() (*CertificateData, error)
	grpc.ClientStream
}

type certificatesListAppleCertificatesClient struct {
	grpc.ClientStream
}

func (x *certificatesListAppleCertificatesClient) Recv() (*CertificateData, error) {
	m := new(CertificateData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificatesClient) CountAppleCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Certificates/countAppleCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) AddPrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Certificates/addPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) DeletePrivateKey(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Certificates/deletePrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) ListPrivateKeys(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListPrivateKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Certificates_serviceDesc.Streams[1], "/io.Certificates/listPrivateKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificatesListPrivateKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Certificates_ListPrivateKeysClient interface {
	Recv() (*PrivateKeyData, error)
	grpc.ClientStream
}

type certificatesListPrivateKeysClient struct {
	grpc.ClientStream
}

func (x *certificatesListPrivateKeysClient) Recv() (*PrivateKeyData, error) {
	m := new(PrivateKeyData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificatesClient) CountPrivateKeys(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Certificates/countPrivateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) AddTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Certificates/addTLSCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) DeleteTLSCertificate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Certificates/deleteTLSCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) ListTLSCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListTLSCertificatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Certificates_serviceDesc.Streams[2], "/io.Certificates/listTLSCertificates", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificatesListTLSCertificatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Certificates_ListTLSCertificatesClient interface {
	Recv() (*TLSCertificateData, error)
	grpc.ClientStream
}

type certificatesListTLSCertificatesClient struct {
	grpc.ClientStream
}

func (x *certificatesListTLSCertificatesClient) Recv() (*TLSCertificateData, error) {
	m := new(TLSCertificateData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificatesClient) CountTLSCertificates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Certificates/countTLSCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificatesServer is the server API for Certificates service.
type CertificatesServer interface {
	GetCertificateSigningRequest(context.Context, *empty.Empty) (*CertificateSigningRequest, error)
	AddAppleCertificate(context.Context, *FileBytes) (*CertificateData, error)
	UpdateAppleCertificate(context.Context, *FileBytes) (*CertificateData, error)
	GetAppleCertificateData(context.Context, *PassTypeIdentifier) (*CertificateData, error)
	ListAppleCertificates(*Pagination, Certificates_ListAppleCertificatesServer) error
	CountAppleCertificates(context.Context, *Pagination) (*Count, error)
	AddPrivateKey(context.Context, *PrivateKeyRequest) (*Id, error)
	DeletePrivateKey(context.Context, *Id) (*empty.Empty, error)
	ListPrivateKeys(*Pagination, Certificates_ListPrivateKeysServer) error
	CountPrivateKeys(context.Context, *Pagination) (*Count, error)
	AddTLSCertificate(context.Context, *TLSCertificateRequest) (*Id, error)
	DeleteTLSCertificate(context.Context, *Id) (*empty.Empty, error)
	ListTLSCertificates(*Pagination, Certificates_ListTLSCertificatesServer) error
	CountTLSCertificates(context.Context, *Pagination) (*Count, error)
}

// UnimplementedCertificatesServer can be embedded to have forward compatible implementations.
type UnimplementedCertificatesServer struct {
}

func (*UnimplementedCertificatesServer) GetCertificateSigningRequest(ctx context.Context, req *empty.Empty) (*CertificateSigningRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateSigningRequest not implemented")
}
func (*UnimplementedCertificatesServer) AddAppleCertificate(ctx context.Context, req *FileBytes) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppleCertificate not implemented")
}
func (*UnimplementedCertificatesServer) UpdateAppleCertificate(ctx context.Context, req *FileBytes) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppleCertificate not implemented")
}
func (*UnimplementedCertificatesServer) GetAppleCertificateData(ctx context.Context, req *PassTypeIdentifier) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppleCertificateData not implemented")
}
func (*UnimplementedCertificatesServer) ListAppleCertificates(req *Pagination, srv Certificates_ListAppleCertificatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAppleCertificates not implemented")
}
func (*UnimplementedCertificatesServer) CountAppleCertificates(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppleCertificates not implemented")
}
func (*UnimplementedCertificatesServer) AddPrivateKey(ctx context.Context, req *PrivateKeyRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrivateKey not implemented")
}
func (*UnimplementedCertificatesServer) DeletePrivateKey(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivateKey not implemented")
}
func (*UnimplementedCertificatesServer) ListPrivateKeys(req *Pagination, srv Certificates_ListPrivateKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPrivateKeys not implemented")
}
func (*UnimplementedCertificatesServer) CountPrivateKeys(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPrivateKeys not implemented")
}
func (*UnimplementedCertificatesServer) AddTLSCertificate(ctx context.Context, req *TLSCertificateRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTLSCertificate not implemented")
}
func (*UnimplementedCertificatesServer) DeleteTLSCertificate(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTLSCertificate not implemented")
}
func (*UnimplementedCertificatesServer) ListTLSCertificates(req *Pagination, srv Certificates_ListTLSCertificatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTLSCertificates not implemented")
}
func (*UnimplementedCertificatesServer) CountTLSCertificates(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTLSCertificates not implemented")
}

func RegisterCertificatesServer(s *grpc.Server, srv CertificatesServer) {
	s.RegisterService(&_Certificates_serviceDesc, srv)
}

func _Certificates_GetCertificateSigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).GetCertificateSigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/GetCertificateSigningRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).GetCertificateSigningRequest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_AddAppleCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).AddAppleCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/AddAppleCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).AddAppleCertificate(ctx, req.(*FileBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_UpdateAppleCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).UpdateAppleCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/UpdateAppleCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).UpdateAppleCertificate(ctx, req.(*FileBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_GetAppleCertificateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTypeIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).GetAppleCertificateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/GetAppleCertificateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).GetAppleCertificateData(ctx, req.(*PassTypeIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_ListAppleCertificates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificatesServer).ListAppleCertificates(m, &certificatesListAppleCertificatesServer{stream})
}

type Certificates_ListAppleCertificatesServer interface {
	Send(*CertificateData) error
	grpc.ServerStream
}

type certificatesListAppleCertificatesServer struct {
	grpc.ServerStream
}

func (x *certificatesListAppleCertificatesServer) Send(m *CertificateData) error {
	return x.ServerStream.SendMsg(m)
}

func _Certificates_CountAppleCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).CountAppleCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/CountAppleCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).CountAppleCertificates(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_AddPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).AddPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/AddPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).AddPrivateKey(ctx, req.(*PrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_DeletePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).DeletePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/DeletePrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).DeletePrivateKey(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_ListPrivateKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificatesServer).ListPrivateKeys(m, &certificatesListPrivateKeysServer{stream})
}

type Certificates_ListPrivateKeysServer interface {
	Send(*PrivateKeyData) error
	grpc.ServerStream
}

type certificatesListPrivateKeysServer struct {
	grpc.ServerStream
}

func (x *certificatesListPrivateKeysServer) Send(m *PrivateKeyData) error {
	return x.ServerStream.SendMsg(m)
}

func _Certificates_CountPrivateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).CountPrivateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/CountPrivateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).CountPrivateKeys(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_AddTLSCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).AddTLSCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/AddTLSCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).AddTLSCertificate(ctx, req.(*TLSCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_DeleteTLSCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).DeleteTLSCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/DeleteTLSCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).DeleteTLSCertificate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_ListTLSCertificates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificatesServer).ListTLSCertificates(m, &certificatesListTLSCertificatesServer{stream})
}

type Certificates_ListTLSCertificatesServer interface {
	Send(*TLSCertificateData) error
	grpc.ServerStream
}

type certificatesListTLSCertificatesServer struct {
	grpc.ServerStream
}

func (x *certificatesListTLSCertificatesServer) Send(m *TLSCertificateData) error {
	return x.ServerStream.SendMsg(m)
}

func _Certificates_CountTLSCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).CountTLSCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/CountTLSCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).CountTLSCertificates(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Certificates",
	HandlerType: (*CertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCertificateSigningRequest",
			Handler:    _Certificates_GetCertificateSigningRequest_Handler,
		},
		{
			MethodName: "addAppleCertificate",
			Handler:    _Certificates_AddAppleCertificate_Handler,
		},
		{
			MethodName: "updateAppleCertificate",
			Handler:    _Certificates_UpdateAppleCertificate_Handler,
		},
		{
			MethodName: "getAppleCertificateData",
			Handler:    _Certificates_GetAppleCertificateData_Handler,
		},
		{
			MethodName: "countAppleCertificates",
			Handler:    _Certificates_CountAppleCertificates_Handler,
		},
		{
			MethodName: "addPrivateKey",
			Handler:    _Certificates_AddPrivateKey_Handler,
		},
		{
			MethodName: "deletePrivateKey",
			Handler:    _Certificates_DeletePrivateKey_Handler,
		},
		{
			MethodName: "countPrivateKeys",
			Handler:    _Certificates_CountPrivateKeys_Handler,
		},
		{
			MethodName: "addTLSCertificate",
			Handler:    _Certificates_AddTLSCertificate_Handler,
		},
		{
			MethodName: "deleteTLSCertificate",
			Handler:    _Certificates_DeleteTLSCertificate_Handler,
		},
		{
			MethodName: "countTLSCertificates",
			Handler:    _Certificates_CountTLSCertificates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listAppleCertificates",
			Handler:       _Certificates_ListAppleCertificates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPrivateKeys",
			Handler:       _Certificates_ListPrivateKeys_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTLSCertificates",
			Handler:       _Certificates_ListTLSCertificates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}

// TemplatesClient is the client API for Templates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplatesClient interface {
	CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error)
	UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error)
	GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error)
	GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error)
	CopyTemplate(ctx context.Context, in *CopyTemplateInput, opts ...grpc.CallOption) (*Id, error)
	DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTemplatesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesForUserClient, error)
	ListTemplates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesClient, error)
	CountTemplates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountTemplatesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
}

type templatesClient struct {
	cc *grpc.ClientConn
}

func NewTemplatesClient(cc *grpc.ClientConn) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/createTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error) {
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, "/io.Templates/updateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error) {
	out := new(PassTemplateResponse)
	err := c.cc.Invoke(ctx, "/io.Templates/getTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error) {
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, "/io.Templates/getDefaultTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CopyTemplate(ctx context.Context, in *CopyTemplateInput, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/copyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Templates/deleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListTemplatesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[0], "/io.Templates/listTemplatesForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesForUserClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesForUserClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesForUserClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListTemplates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[1], "/io.Templates/listTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) CountTemplates(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplatesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplatesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesServer is the server API for Templates service.
type TemplatesServer interface {
	CreateTemplate(context.Context, *PassTemplate) (*Id, error)
	UpdateTemplate(context.Context, *PassTemplate) (*PassTemplate, error)
	GetTemplate(context.Context, *Id) (*PassTemplateResponse, error)
	GetDefaultTemplate(context.Context, *DefaultTemplateRequest) (*PassTemplate, error)
	CopyTemplate(context.Context, *CopyTemplateInput) (*Id, error)
	DeleteTemplate(context.Context, *Id) (*empty.Empty, error)
	ListTemplatesForUser(*Pagination, Templates_ListTemplatesForUserServer) error
	ListTemplates(*Pagination, Templates_ListTemplatesServer) error
	CountTemplates(context.Context, *Pagination) (*Count, error)
	CountTemplatesForUser(context.Context, *Pagination) (*Count, error)
}

// UnimplementedTemplatesServer can be embedded to have forward compatible implementations.
type UnimplementedTemplatesServer struct {
}

func (*UnimplementedTemplatesServer) CreateTemplate(ctx context.Context, req *PassTemplate) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedTemplatesServer) UpdateTemplate(ctx context.Context, req *PassTemplate) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedTemplatesServer) GetTemplate(ctx context.Context, req *Id) (*PassTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplatesServer) GetDefaultTemplate(ctx context.Context, req *DefaultTemplateRequest) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultTemplate not implemented")
}
func (*UnimplementedTemplatesServer) CopyTemplate(ctx context.Context, req *CopyTemplateInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTemplate not implemented")
}
func (*UnimplementedTemplatesServer) DeleteTemplate(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplatesForUser(req *Pagination, srv Templates_ListTemplatesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesForUser not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplates(req *Pagination, srv Templates_ListTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplates(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplates not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplatesForUser(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesForUser not implemented")
}

func RegisterTemplatesServer(s *grpc.Server, srv TemplatesServer) {
	s.RegisterService(&_Templates_serviceDesc, srv)
}

func _Templates_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetDefaultTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetDefaultTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, req.(*DefaultTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CopyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CopyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyTemplate(ctx, req.(*CopyTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListTemplatesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesForUser(m, &templatesListTemplatesForUserServer{stream})
}

type Templates_ListTemplatesForUserServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesForUserServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesForUserServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplates(m, &templatesListTemplatesServer{stream})
}

type Templates_ListTemplatesServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_CountTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplates(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplatesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplatesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

var _Templates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTemplate",
			Handler:    _Templates_CreateTemplate_Handler,
		},
		{
			MethodName: "updateTemplate",
			Handler:    _Templates_UpdateTemplate_Handler,
		},
		{
			MethodName: "getTemplate",
			Handler:    _Templates_GetTemplate_Handler,
		},
		{
			MethodName: "getDefaultTemplate",
			Handler:    _Templates_GetDefaultTemplate_Handler,
		},
		{
			MethodName: "copyTemplate",
			Handler:    _Templates_CopyTemplate_Handler,
		},
		{
			MethodName: "deleteTemplate",
			Handler:    _Templates_DeleteTemplate_Handler,
		},
		{
			MethodName: "countTemplates",
			Handler:    _Templates_CountTemplates_Handler,
		},
		{
			MethodName: "countTemplatesForUser",
			Handler:    _Templates_CountTemplatesForUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listTemplatesForUser",
			Handler:       _Templates_ListTemplatesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplates",
			Handler:       _Templates_ListTemplates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}

// ImagesClient is the client API for Images service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImagesClient interface {
	SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProfileImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error)
	GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error)
	UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error)
	GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error)
	GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error)
	DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	ListImagesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesForUserClient, error)
	ListImages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesClient, error)
	CountImages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountImagesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
}

type imagesClient struct {
	cc *grpc.ClientConn
}

func NewImagesClient(cc *grpc.ClientConn) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Images/setProfileImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getProfileImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getProfileImageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error) {
	out := new(ImageIds)
	err := c.cc.Invoke(ctx, "/io.Images/createImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/updateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error) {
	out := new(ImageBundle)
	err := c.cc.Invoke(ctx, "/io.Images/getImageBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/getImageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getLocalizedImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Images/deleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/deleteLocalizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListImagesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[0], "/io.Images/listImagesForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesForUserClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesForUserClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesForUserClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) ListImages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[1], "/io.Images/listImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) CountImages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImagesForUser(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImagesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServer is the server API for Images service.
type ImagesServer interface {
	SetProfileImage(context.Context, *ProfileImageInput) (*empty.Empty, error)
	GetProfileImage(context.Context, *empty.Empty) (*Url, error)
	GetProfileImageById(context.Context, *Id) (*Url, error)
	CreateImages(context.Context, *CreateImageInput) (*ImageIds, error)
	UpdateImage(context.Context, *UpdateImageInput) (*ImageRecord, error)
	GetImageURL(context.Context, *Id) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(context.Context, *Id) (*ImageBundle, error)
	GetImageData(context.Context, *Id) (*ImageRecord, error)
	GetLocalizedImageURL(context.Context, *LocalizedImageInput) (*Url, error)
	DeleteImage(context.Context, *Id) (*empty.Empty, error)
	DeleteLocalizedImage(context.Context, *LocalizedImageInput) (*ImageRecord, error)
	ListImagesForUser(*Pagination, Images_ListImagesForUserServer) error
	ListImages(*Pagination, Images_ListImagesServer) error
	CountImages(context.Context, *Pagination) (*Count, error)
	CountImagesForUser(context.Context, *Pagination) (*Count, error)
}

// UnimplementedImagesServer can be embedded to have forward compatible implementations.
type UnimplementedImagesServer struct {
}

func (*UnimplementedImagesServer) SetProfileImage(ctx context.Context, req *ProfileImageInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileImage not implemented")
}
func (*UnimplementedImagesServer) GetProfileImage(ctx context.Context, req *empty.Empty) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImage not implemented")
}
func (*UnimplementedImagesServer) GetProfileImageById(ctx context.Context, req *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImageById not implemented")
}
func (*UnimplementedImagesServer) CreateImages(ctx context.Context, req *CreateImageInput) (*ImageIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImages not implemented")
}
func (*UnimplementedImagesServer) UpdateImage(ctx context.Context, req *UpdateImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (*UnimplementedImagesServer) GetImageURL(ctx context.Context, req *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageURL not implemented")
}
func (*UnimplementedImagesServer) GetImageBundle(ctx context.Context, req *Id) (*ImageBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageBundle not implemented")
}
func (*UnimplementedImagesServer) GetImageData(ctx context.Context, req *Id) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageData not implemented")
}
func (*UnimplementedImagesServer) GetLocalizedImageURL(ctx context.Context, req *LocalizedImageInput) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalizedImageURL not implemented")
}
func (*UnimplementedImagesServer) DeleteImage(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedImagesServer) DeleteLocalizedImage(ctx context.Context, req *LocalizedImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalizedImage not implemented")
}
func (*UnimplementedImagesServer) ListImagesForUser(req *Pagination, srv Images_ListImagesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesForUser not implemented")
}
func (*UnimplementedImagesServer) ListImages(req *Pagination, srv Images_ListImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (*UnimplementedImagesServer) CountImages(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImages not implemented")
}
func (*UnimplementedImagesServer) CountImagesForUser(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesForUser not implemented")
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

func _Images_SetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).SetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/SetProfileImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).SetProfileImage(ctx, req.(*ProfileImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetProfileImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetProfileImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImageById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CreateImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateImages(ctx, req.(*CreateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).UpdateImage(ctx, req.(*UpdateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageURL(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageBundle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageData(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetLocalizedImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetLocalizedImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteImage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteLocalizedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/DeleteLocalizedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListImagesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesForUser(m, &imagesListImagesForUserServer{stream})
}

type Images_ListImagesForUserServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesForUserServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesForUserServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_ListImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImages(m, &imagesListImagesServer{stream})
}

type Images_ListImagesServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_CountImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImages(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImagesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesForUser(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setProfileImage",
			Handler:    _Images_SetProfileImage_Handler,
		},
		{
			MethodName: "getProfileImage",
			Handler:    _Images_GetProfileImage_Handler,
		},
		{
			MethodName: "getProfileImageById",
			Handler:    _Images_GetProfileImageById_Handler,
		},
		{
			MethodName: "createImages",
			Handler:    _Images_CreateImages_Handler,
		},
		{
			MethodName: "updateImage",
			Handler:    _Images_UpdateImage_Handler,
		},
		{
			MethodName: "getImageURL",
			Handler:    _Images_GetImageURL_Handler,
		},
		{
			MethodName: "getImageBundle",
			Handler:    _Images_GetImageBundle_Handler,
		},
		{
			MethodName: "getImageData",
			Handler:    _Images_GetImageData_Handler,
		},
		{
			MethodName: "getLocalizedImageURL",
			Handler:    _Images_GetLocalizedImageURL_Handler,
		},
		{
			MethodName: "deleteImage",
			Handler:    _Images_DeleteImage_Handler,
		},
		{
			MethodName: "deleteLocalizedImage",
			Handler:    _Images_DeleteLocalizedImage_Handler,
		},
		{
			MethodName: "countImages",
			Handler:    _Images_CountImages_Handler,
		},
		{
			MethodName: "countImagesForUser",
			Handler:    _Images_CountImagesForUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listImagesForUser",
			Handler:       _Images_ListImagesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImages",
			Handler:       _Images_ListImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	UsernameExists(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error)
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*NewUserResponse, error)
	NewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*JWT, error)
	Verify(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error)
	ResendVerificationEmail(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Boolean, error)
	GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUserResponse, error)
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*JWT, error)
	ResetPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProjectsForUser(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsForUserClient, error)
	GetProjects(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsClient, error)
	GetProjectByUuid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error)
	GetProjectAndTemplateByShortCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProjectByShortCodeResult, error)
	CreateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error)
	GetIntegrations(ctx context.Context, in *IntegrationsRequest, opts ...grpc.CallOption) (*IntegrationConfigs, error)
	UpdateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error)
	DeleteIntegrations(ctx context.Context, in *IntegrationsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) UsernameExists(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/io.Users/usernameExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*NewUserResponse, error) {
	out := new(NewUserResponse)
	err := c.cc.Invoke(ctx, "/io.Users/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, "/io.Users/newUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Verify(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/io.Users/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ResendVerificationEmail(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/io.Users/resendVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/io.Users/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, "/io.Users/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ResetPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/resetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetProjectsForUser(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Users_serviceDesc.Streams[0], "/io.Users/getProjectsForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsForUserClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsForUserClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsForUserClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjects(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Users_serviceDesc.Streams[1], "/io.Users/getProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjectByUuid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/io.Users/getProjectByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetProjectAndTemplateByShortCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProjectByShortCodeResult, error) {
	out := new(ProjectByShortCodeResult)
	err := c.cc.Invoke(ctx, "/io.Users/getProjectAndTemplateByShortCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Users/createIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetIntegrations(ctx context.Context, in *IntegrationsRequest, opts ...grpc.CallOption) (*IntegrationConfigs, error) {
	out := new(IntegrationConfigs)
	err := c.cc.Invoke(ctx, "/io.Users/getIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Users/updateIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteIntegrations(ctx context.Context, in *IntegrationsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/deleteIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	UsernameExists(context.Context, *Id) (*Boolean, error)
	CreateUser(context.Context, *NewUser) (*NewUserResponse, error)
	NewUser(context.Context, *NewUser) (*JWT, error)
	Verify(context.Context, *Id) (*Boolean, error)
	ResendVerificationEmail(context.Context, *empty.Empty) (*Boolean, error)
	GetUser(context.Context, *empty.Empty) (*GetUserResponse, error)
	Login(context.Context, *Credentials) (*JWT, error)
	ResetPassword(context.Context, *Credentials) (*empty.Empty, error)
	GetProjectsForUser(*ProjectStatusFilter, Users_GetProjectsForUserServer) error
	GetProjects(*ProjectStatusFilter, Users_GetProjectsServer) error
	GetProjectByUuid(context.Context, *Id) (*Project, error)
	GetProjectAndTemplateByShortCode(context.Context, *Id) (*ProjectByShortCodeResult, error)
	CreateIntegrations(context.Context, *IntegrationConfigs) (*Id, error)
	GetIntegrations(context.Context, *IntegrationsRequest) (*IntegrationConfigs, error)
	UpdateIntegrations(context.Context, *IntegrationConfigs) (*Id, error)
	DeleteIntegrations(context.Context, *IntegrationsRequest) (*empty.Empty, error)
}

// UnimplementedUsersServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (*UnimplementedUsersServer) UsernameExists(ctx context.Context, req *Id) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernameExists not implemented")
}
func (*UnimplementedUsersServer) CreateUser(ctx context.Context, req *NewUser) (*NewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUsersServer) NewUser(ctx context.Context, req *NewUser) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (*UnimplementedUsersServer) Verify(ctx context.Context, req *Id) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (*UnimplementedUsersServer) ResendVerificationEmail(ctx context.Context, req *empty.Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerificationEmail not implemented")
}
func (*UnimplementedUsersServer) GetUser(ctx context.Context, req *empty.Empty) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUsersServer) Login(ctx context.Context, req *Credentials) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUsersServer) ResetPassword(ctx context.Context, req *Credentials) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedUsersServer) GetProjectsForUser(req *ProjectStatusFilter, srv Users_GetProjectsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsForUser not implemented")
}
func (*UnimplementedUsersServer) GetProjects(req *ProjectStatusFilter, srv Users_GetProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (*UnimplementedUsersServer) GetProjectByUuid(ctx context.Context, req *Id) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByUuid not implemented")
}
func (*UnimplementedUsersServer) GetProjectAndTemplateByShortCode(ctx context.Context, req *Id) (*ProjectByShortCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAndTemplateByShortCode not implemented")
}
func (*UnimplementedUsersServer) CreateIntegrations(ctx context.Context, req *IntegrationConfigs) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegrations not implemented")
}
func (*UnimplementedUsersServer) GetIntegrations(ctx context.Context, req *IntegrationsRequest) (*IntegrationConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (*UnimplementedUsersServer) UpdateIntegrations(ctx context.Context, req *IntegrationConfigs) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrations not implemented")
}
func (*UnimplementedUsersServer) DeleteIntegrations(ctx context.Context, req *IntegrationsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrations not implemented")
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_UsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/UsernameExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UsernameExists(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NewUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Verify(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ResendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ResendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/ResendVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ResendVerificationEmail(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ResetPassword(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetProjectsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectStatusFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsForUser(m, &usersGetProjectsForUserServer{stream})
}

type Users_GetProjectsForUserServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsForUserServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsForUserServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectStatusFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjects(m, &usersGetProjectsServer{stream})
}

type Users_GetProjectsServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjectByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetProjectByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/GetProjectByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetProjectByUuid(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetProjectAndTemplateByShortCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetProjectAndTemplateByShortCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/GetProjectAndTemplateByShortCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetProjectAndTemplateByShortCode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/CreateIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateIntegrations(ctx, req.(*IntegrationConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/GetIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetIntegrations(ctx, req.(*IntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/UpdateIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateIntegrations(ctx, req.(*IntegrationConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/DeleteIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteIntegrations(ctx, req.(*IntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "usernameExists",
			Handler:    _Users_UsernameExists_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "newUser",
			Handler:    _Users_NewUser_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _Users_Verify_Handler,
		},
		{
			MethodName: "resendVerificationEmail",
			Handler:    _Users_ResendVerificationEmail_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Users_Login_Handler,
		},
		{
			MethodName: "resetPassword",
			Handler:    _Users_ResetPassword_Handler,
		},
		{
			MethodName: "getProjectByUuid",
			Handler:    _Users_GetProjectByUuid_Handler,
		},
		{
			MethodName: "getProjectAndTemplateByShortCode",
			Handler:    _Users_GetProjectAndTemplateByShortCode_Handler,
		},
		{
			MethodName: "createIntegrations",
			Handler:    _Users_CreateIntegrations_Handler,
		},
		{
			MethodName: "getIntegrations",
			Handler:    _Users_GetIntegrations_Handler,
		},
		{
			MethodName: "updateIntegrations",
			Handler:    _Users_UpdateIntegrations_Handler,
		},
		{
			MethodName: "deleteIntegrations",
			Handler:    _Users_DeleteIntegrations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getProjectsForUser",
			Handler:       _Users_GetProjectsForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjects",
			Handler:       _Users_GetProjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagesClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Id, error)
	GetMessages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Messages_GetMessagesClient, error)
}

type messagesClient struct {
	cc *grpc.ClientConn
}

func NewMessagesClient(cc *grpc.ClientConn) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Messages/sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) GetMessages(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Messages_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messages_serviceDesc.Streams[0], "/io.Messages/getMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_GetMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesGetMessagesClient struct {
	grpc.ClientStream
}

func (x *messagesGetMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesServer is the server API for Messages service.
type MessagesServer interface {
	SendMessage(context.Context, *Message) (*Id, error)
	GetMessages(*Pagination, Messages_GetMessagesServer) error
}

// UnimplementedMessagesServer can be embedded to have forward compatible implementations.
type UnimplementedMessagesServer struct {
}

func (*UnimplementedMessagesServer) SendMessage(ctx context.Context, req *Message) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedMessagesServer) GetMessages(req *Pagination, srv Messages_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}

func RegisterMessagesServer(s *grpc.Server, srv MessagesServer) {
	s.RegisterService(&_Messages_serviceDesc, srv)
}

func _Messages_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Messages/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).GetMessages(m, &messagesGetMessagesServer{stream})
}

type Messages_GetMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messagesGetMessagesServer struct {
	grpc.ServerStream
}

func (x *messagesGetMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Messages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessage",
			Handler:    _Messages_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMessages",
			Handler:       _Messages_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributionClient interface {
	SendWelcomeEmail(ctx context.Context, in *EmailDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type distributionClient struct {
	cc *grpc.ClientConn
}

func NewDistributionClient(cc *grpc.ClientConn) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) SendWelcomeEmail(ctx context.Context, in *EmailDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Distribution/sendWelcomeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
type DistributionServer interface {
	SendWelcomeEmail(context.Context, *EmailDistributionRequest) (*empty.Empty, error)
}

// UnimplementedDistributionServer can be embedded to have forward compatible implementations.
type UnimplementedDistributionServer struct {
}

func (*UnimplementedDistributionServer) SendWelcomeEmail(ctx context.Context, req *EmailDistributionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcomeEmail not implemented")
}

func RegisterDistributionServer(s *grpc.Server, srv DistributionServer) {
	s.RegisterService(&_Distribution_serviceDesc, srv)
}

func _Distribution_SendWelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).SendWelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Distribution/SendWelcomeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).SendWelcomeEmail(ctx, req.(*EmailDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Distribution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendWelcomeEmail",
			Handler:    _Distribution_SendWelcomeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io/core/a_rpc.proto",
}

// JobsClient is the client API for Jobs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsClient interface {
	ImportCsv(ctx context.Context, in *CsvImportRequest, opts ...grpc.CallOption) (*Id, error)
	GetJobs(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Jobs_GetJobsClient, error)
	GetJob(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
}

type jobsClient struct {
	cc *grpc.ClientConn
}

func NewJobsClient(cc *grpc.ClientConn) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) ImportCsv(ctx context.Context, in *CsvImportRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Jobs/importCsv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) GetJobs(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Jobs_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jobs_serviceDesc.Streams[0], "/io.Jobs/getJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobsGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobs_GetJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type jobsGetJobsClient struct {
	grpc.ClientStream
}

func (x *jobsGetJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobsClient) GetJob(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/io.Jobs/getJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServer is the server API for Jobs service.
type JobsServer interface {
	ImportCsv(context.Context, *CsvImportRequest) (*Id, error)
	GetJobs(*Pagination, Jobs_GetJobsServer) error
	GetJob(context.Context, *Id) (*Job, error)
}

// UnimplementedJobsServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServer struct {
}

func (*UnimplementedJobsServer) ImportCsv(ctx context.Context, req *CsvImportRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCsv not implemented")
}
func (*UnimplementedJobsServer) GetJobs(req *Pagination, srv Jobs_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (*UnimplementedJobsServer) GetJob(ctx context.Context, req *Id) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}

func RegisterJobsServer(s *grpc.Server, srv JobsServer) {
	s.RegisterService(&_Jobs_serviceDesc, srv)
}

func _Jobs_ImportCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsvImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).ImportCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Jobs/ImportCsv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).ImportCsv(ctx, req.(*CsvImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServer).GetJobs(m, &jobsGetJobsServer{stream})
}

type Jobs_GetJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type jobsGetJobsServer struct {
	grpc.ServerStream
}

func (x *jobsGetJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Jobs_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Jobs/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).GetJob(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "importCsv",
			Handler:    _Jobs_ImportCsv_Handler,
		},
		{
			MethodName: "getJob",
			Handler:    _Jobs_GetJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getJobs",
			Handler:       _Jobs_GetJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc.proto",
}
