// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/common/template.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Apple pass types
type ApplePassType int32

const (
	// Use if you do not wish to support Apple Wallet
	ApplePassType_APPLE_NOT_SUPPORTED ApplePassType = 0
	ApplePassType_BOARDING_PASS       ApplePassType = 1
	ApplePassType_COUPON              ApplePassType = 2
	ApplePassType_EVENT_TICKET        ApplePassType = 3
	ApplePassType_GENERIC             ApplePassType = 4
	ApplePassType_STORE_CARD          ApplePassType = 5
)

var ApplePassType_name = map[int32]string{
	0: "APPLE_NOT_SUPPORTED",
	1: "BOARDING_PASS",
	2: "COUPON",
	3: "EVENT_TICKET",
	4: "GENERIC",
	5: "STORE_CARD",
}

var ApplePassType_value = map[string]int32{
	"APPLE_NOT_SUPPORTED": 0,
	"BOARDING_PASS":       1,
	"COUPON":              2,
	"EVENT_TICKET":        3,
	"GENERIC":             4,
	"STORE_CARD":          5,
}

func (x ApplePassType) String() string {
	return proto.EnumName(ApplePassType_name, int32(x))
}

func (ApplePassType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{0}
}

// Google Pay pass types
type GooglePayPassType int32

const (
	// Use if you do not wish to support Google Pay
	GooglePayPassType_GOOGLE_PAY_NOT_SUPPORTED GooglePayPassType = 0
	GooglePayPassType_EVENT                    GooglePayPassType = 1
	GooglePayPassType_FLIGHT                   GooglePayPassType = 2
	GooglePayPassType_GIFT                     GooglePayPassType = 3
	GooglePayPassType_LOYALTY                  GooglePayPassType = 4
	GooglePayPassType_OFFER                    GooglePayPassType = 5
	GooglePayPassType_TRANSIT                  GooglePayPassType = 6
)

var GooglePayPassType_name = map[int32]string{
	0: "GOOGLE_PAY_NOT_SUPPORTED",
	1: "EVENT",
	2: "FLIGHT",
	3: "GIFT",
	4: "LOYALTY",
	5: "OFFER",
	6: "TRANSIT",
}

var GooglePayPassType_value = map[string]int32{
	"GOOGLE_PAY_NOT_SUPPORTED": 0,
	"EVENT":                    1,
	"FLIGHT":                   2,
	"GIFT":                     3,
	"LOYALTY":                  4,
	"OFFER":                    5,
	"TRANSIT":                  6,
}

func (x GooglePayPassType) String() string {
	return proto.EnumName(GooglePayPassType_name, int32(x))
}

func (GooglePayPassType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{1}
}

// Barcode type sets the type of barcode for the pass.
type BarcodeType int32

const (
	BarcodeType_BARCODE_TYPE_DO_NOT_USE BarcodeType = 0
	// QR code can store 4 types of data: numeric, alphanumeric, byte/binary, and Kanji (Chinese characters).
	BarcodeType_QR BarcodeType = 1
	// Aztec codes are commonly used by the transportation industry such as tickets and airline boarding passes.
	BarcodeType_AZTEC BarcodeType = 2
	// 2D barcode which can store multiple data encodings. Not recommended for large payloads.
	BarcodeType_PDF417 BarcodeType = 3
	// Supports any character of the ASCII 128 character set which can store highly diversified information. Suitable for older scanners that may not support 2D barcodes, however, some older scanners may also not be able to read from a phone screen, so requires proper testing before use.
	BarcodeType_CODE128 BarcodeType = 4
	// This does not set a barcode. If you set barcode type as none, no barcode will be shown on the pass.
	BarcodeType_NONE BarcodeType = 5
)

var BarcodeType_name = map[int32]string{
	0: "BARCODE_TYPE_DO_NOT_USE",
	1: "QR",
	2: "AZTEC",
	3: "PDF417",
	4: "CODE128",
	5: "NONE",
}

var BarcodeType_value = map[string]int32{
	"BARCODE_TYPE_DO_NOT_USE": 0,
	"QR":                      1,
	"AZTEC":                   2,
	"PDF417":                  3,
	"CODE128":                 4,
	"NONE":                    5,
}

func (x BarcodeType) String() string {
	return proto.EnumName(BarcodeType_name, int32(x))
}

func (BarcodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{2}
}

// Field type categorize a type of field rendered on pass or data collection page. The value will be auto-configured on the backend.
type FieldType int32

const (
	FieldType_FIELD_TYPE_NONE FieldType = 0
	// Meta fields. DataField.UniqueName needs to be meta.FIELDNAME.
	FieldType_META FieldType = 1
	// PII fields. DataField.UniqueName needs to be person.FIELDNAME.
	FieldType_PII FieldType = 2
	// Universal fields used across protocols (e.g. Terms And Conditions, Locations, Messages). DataField.UniqueName needs to be universal.FIELDNAME (e.g. universal.messages).
	FieldType_UNIVERSAL_FIELDS FieldType = 3
	// Protocol specific fields. DataField.UniqueName needs to be protocol.OBJECT.FIELDNAME.
	FieldType_PROTOCOL_FIELDS FieldType = 4
	// Custom fields are fields which are created only for pass render purpose and does not belong to other field type.
	FieldType_CUSTOM_FIELDS FieldType = 5
)

var FieldType_name = map[int32]string{
	0: "FIELD_TYPE_NONE",
	1: "META",
	2: "PII",
	3: "UNIVERSAL_FIELDS",
	4: "PROTOCOL_FIELDS",
	5: "CUSTOM_FIELDS",
}

var FieldType_value = map[string]int32{
	"FIELD_TYPE_NONE":  0,
	"META":             1,
	"PII":              2,
	"UNIVERSAL_FIELDS": 3,
	"PROTOCOL_FIELDS":  4,
	"CUSTOM_FIELDS":    5,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}

func (FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{3}
}

type StandardFields int32

const (
	StandardFields_STANDARD_FIELDS_DO_NOT_USE StandardFields = 0
	StandardFields_STANDARD_MESSAGES          StandardFields = 1
	StandardFields_STANDARD_LEGAL             StandardFields = 2
	StandardFields_STANDARD_EXPIRY_DATE       StandardFields = 3
	StandardFields_STANDARD_USEFUL_LINKS      StandardFields = 4
	StandardFields_STANDARD_OPT_OUT           StandardFields = 5
	StandardFields_STANDARD_LOCATIONS         StandardFields = 6
)

var StandardFields_name = map[int32]string{
	0: "STANDARD_FIELDS_DO_NOT_USE",
	1: "STANDARD_MESSAGES",
	2: "STANDARD_LEGAL",
	3: "STANDARD_EXPIRY_DATE",
	4: "STANDARD_USEFUL_LINKS",
	5: "STANDARD_OPT_OUT",
	6: "STANDARD_LOCATIONS",
}

var StandardFields_value = map[string]int32{
	"STANDARD_FIELDS_DO_NOT_USE": 0,
	"STANDARD_MESSAGES":          1,
	"STANDARD_LEGAL":             2,
	"STANDARD_EXPIRY_DATE":       3,
	"STANDARD_USEFUL_LINKS":      4,
	"STANDARD_OPT_OUT":           5,
	"STANDARD_LOCATIONS":         6,
}

func (x StandardFields) String() string {
	return proto.EnumName(StandardFields_name, int32(x))
}

func (StandardFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{4}
}

type TextAlignment int32

const (
	TextAlignment_TEXT_ALIGNMENT_DO_NOT_USE TextAlignment = 0
	TextAlignment_LEFT                      TextAlignment = 1
	TextAlignment_CENTER                    TextAlignment = 2
	TextAlignment_RIGHT                     TextAlignment = 3
	// Used for Apple only.
	TextAlignment_NATURAL TextAlignment = 4
)

var TextAlignment_name = map[int32]string{
	0: "TEXT_ALIGNMENT_DO_NOT_USE",
	1: "LEFT",
	2: "CENTER",
	3: "RIGHT",
	4: "NATURAL",
}

var TextAlignment_value = map[string]int32{
	"TEXT_ALIGNMENT_DO_NOT_USE": 0,
	"LEFT":                      1,
	"CENTER":                    2,
	"RIGHT":                     3,
	"NATURAL":                   4,
}

func (x TextAlignment) String() string {
	return proto.EnumName(TextAlignment_name, int32(x))
}

func (TextAlignment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{5}
}

type DateTimeStyle int32

const (
	DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE DateTimeStyle = 0
	DateTimeStyle_DATE_TIME_STYLE_SHORT      DateTimeStyle = 1
	DateTimeStyle_DATE_TIME_STYLE_MEDIUM     DateTimeStyle = 2
	DateTimeStyle_DATE_TIME_STYLE_LONG       DateTimeStyle = 3
	DateTimeStyle_DATE_TIME_STYLE_FULL       DateTimeStyle = 4
)

var DateTimeStyle_name = map[int32]string{
	0: "DATE_TIME_STYLE_DO_NOT_USE",
	1: "DATE_TIME_STYLE_SHORT",
	2: "DATE_TIME_STYLE_MEDIUM",
	3: "DATE_TIME_STYLE_LONG",
	4: "DATE_TIME_STYLE_FULL",
}

var DateTimeStyle_value = map[string]int32{
	"DATE_TIME_STYLE_DO_NOT_USE": 0,
	"DATE_TIME_STYLE_SHORT":      1,
	"DATE_TIME_STYLE_MEDIUM":     2,
	"DATE_TIME_STYLE_LONG":       3,
	"DATE_TIME_STYLE_FULL":       4,
}

func (x DateTimeStyle) String() string {
	return proto.EnumName(DateTimeStyle_name, int32(x))
}

func (DateTimeStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{6}
}

type LinkDetector int32

const (
	LinkDetector_LINK_DETECTOR_DO_NOT_USE LinkDetector = 0
	LinkDetector_LINK_DETECTOR_ADDRESS    LinkDetector = 1
	LinkDetector_LINK_DETECTOR_DATE       LinkDetector = 2
	LinkDetector_LINK_DETECTOR_URL        LinkDetector = 3
	LinkDetector_LINK_DETECTOR_PHONE      LinkDetector = 4
)

var LinkDetector_name = map[int32]string{
	0: "LINK_DETECTOR_DO_NOT_USE",
	1: "LINK_DETECTOR_ADDRESS",
	2: "LINK_DETECTOR_DATE",
	3: "LINK_DETECTOR_URL",
	4: "LINK_DETECTOR_PHONE",
}

var LinkDetector_value = map[string]int32{
	"LINK_DETECTOR_DO_NOT_USE": 0,
	"LINK_DETECTOR_ADDRESS":    1,
	"LINK_DETECTOR_DATE":       2,
	"LINK_DETECTOR_URL":        3,
	"LINK_DETECTOR_PHONE":      4,
}

func (x LinkDetector) String() string {
	return proto.EnumName(LinkDetector_name, int32(x))
}

func (LinkDetector) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{7}
}

type NumberStyle int32

const (
	NumberStyle_NUMBER_STYLE_DO_NOT_USE NumberStyle = 0
	NumberStyle_NUMBER_STYLE_DECIMAL    NumberStyle = 1
	NumberStyle_NUMBER_STYLE_PERCENT    NumberStyle = 2
	NumberStyle_NUMBER_STYLE_SCIENTIFIC NumberStyle = 3
	NumberStyle_NUMBER_STYLE_SPELL      NumberStyle = 4
)

var NumberStyle_name = map[int32]string{
	0: "NUMBER_STYLE_DO_NOT_USE",
	1: "NUMBER_STYLE_DECIMAL",
	2: "NUMBER_STYLE_PERCENT",
	3: "NUMBER_STYLE_SCIENTIFIC",
	4: "NUMBER_STYLE_SPELL",
}

var NumberStyle_value = map[string]int32{
	"NUMBER_STYLE_DO_NOT_USE": 0,
	"NUMBER_STYLE_DECIMAL":    1,
	"NUMBER_STYLE_PERCENT":    2,
	"NUMBER_STYLE_SCIENTIFIC": 3,
	"NUMBER_STYLE_SPELL":      4,
}

func (x NumberStyle) String() string {
	return proto.EnumName(NumberStyle_name, int32(x))
}

func (NumberStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{8}
}

type TransitType int32

const (
	TransitType_TRANSIT_TYPE_DO_NOT_USE TransitType = 0
	TransitType_TRANSIT_TYPE_AIR        TransitType = 1
	TransitType_TRANSIT_TYPE_BOAT       TransitType = 2
	TransitType_TRANSIT_TYPE_BUS        TransitType = 3
	TransitType_TRANSIT_TYPE_GENERIC    TransitType = 4
	TransitType_TRANSIT_TYPE_TRAIN      TransitType = 5
	// Google Pay only.
	TransitType_TRANSIT_TYPE_TRAM TransitType = 6
)

var TransitType_name = map[int32]string{
	0: "TRANSIT_TYPE_DO_NOT_USE",
	1: "TRANSIT_TYPE_AIR",
	2: "TRANSIT_TYPE_BOAT",
	3: "TRANSIT_TYPE_BUS",
	4: "TRANSIT_TYPE_GENERIC",
	5: "TRANSIT_TYPE_TRAIN",
	6: "TRANSIT_TYPE_TRAM",
}

var TransitType_value = map[string]int32{
	"TRANSIT_TYPE_DO_NOT_USE": 0,
	"TRANSIT_TYPE_AIR":        1,
	"TRANSIT_TYPE_BOAT":       2,
	"TRANSIT_TYPE_BUS":        3,
	"TRANSIT_TYPE_GENERIC":    4,
	"TRANSIT_TYPE_TRAIN":      5,
	"TRANSIT_TYPE_TRAM":       6,
}

func (x TransitType) String() string {
	return proto.EnumName(TransitType_name, int32(x))
}

func (TransitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{9}
}

// Indicates the type of data.
// IMPOTANT: If string is changed, please update data collection page data-collection-page.html.tmpl if statements.
type DataType int32

const (
	DataType_DATA_TYPE_NONE DataType = 0
	DataType_TEXT           DataType = 1
	// The only difference with TEXT is that TEXT_LONG renders textarea tag on the data collection landing page.
	DataType_TEXT_LONG DataType = 2
	// Date containing year, month and date. No style.
	DataType_DATE_YYYYMMDD DataType = 3
	// Date containing year and month. No style.
	DataType_DATE_YYYYMM DataType = 4
	// Date containing month and date. No style.
	DataType_DATE_MMDD DataType = 5
	DataType_TIME      DataType = 6
	DataType_DATE_TIME DataType = 7
	// A number (No decimal support).
	DataType_INT DataType = 8
	// A number with decimal support.
	DataType_NUMBER  DataType = 9
	DataType_EMAIL   DataType = 10
	DataType_URL     DataType = 11
	DataType_TEL     DataType = 12
	DataType_ADDRESS DataType = 13
	// FILE = 14; // we can comment out FILE when backend implement the string logic for uploaded file.
	// IMAGE = 15; // we can comment out IMAGE when backend implement the string logic for uploaded image file.
	// A value of money amount in float (e.g. 5, 10.00, 40.95, 60.9333333333) .
	DataType_CURRENCY DataType = 16
	DataType_BOOLEAN  DataType = 17
	// A list of key value pairs
	DataType_OPTIONS DataType = 18
	DataType_DATE_MM DataType = 19
)

var DataType_name = map[int32]string{
	0:  "DATA_TYPE_NONE",
	1:  "TEXT",
	2:  "TEXT_LONG",
	3:  "DATE_YYYYMMDD",
	4:  "DATE_YYYYMM",
	5:  "DATE_MMDD",
	6:  "TIME",
	7:  "DATE_TIME",
	8:  "INT",
	9:  "NUMBER",
	10: "EMAIL",
	11: "URL",
	12: "TEL",
	13: "ADDRESS",
	16: "CURRENCY",
	17: "BOOLEAN",
	18: "OPTIONS",
	19: "DATE_MM",
}

var DataType_value = map[string]int32{
	"DATA_TYPE_NONE": 0,
	"TEXT":           1,
	"TEXT_LONG":      2,
	"DATE_YYYYMMDD":  3,
	"DATE_YYYYMM":    4,
	"DATE_MMDD":      5,
	"TIME":           6,
	"DATE_TIME":      7,
	"INT":            8,
	"NUMBER":         9,
	"EMAIL":          10,
	"URL":            11,
	"TEL":            12,
	"ADDRESS":        13,
	"CURRENCY":       16,
	"BOOLEAN":        17,
	"OPTIONS":        18,
	"DATE_MM":        19,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{10}
}

// Data style controls how value will be rendered on the pass.
type DataStyle int32

const (
	DataStyle_NO_STYLE DataStyle = 0
	// Date containing year, month and date. Numeric only (e.g. 11/23/37).
	DataStyle_DATE_SHORT DataStyle = 1
	// Date containing year, month and date. With abbreviated text (e.g. Nov 23, 1937).
	DataStyle_DATE_MEDIUM DataStyle = 2
	// Date containing year, month and date. With full text (e.g. November 23, 1937).
	DataStyle_DATE_LONG DataStyle = 3
	// Date containing year, month and date. With complete details (e.g. Tuesday, April 12, 1952 AD).
	DataStyle_DATE_FULL DataStyle = 4
	// Date containing year, month and date. Numeric only (e.g. 3:30 PM).
	DataStyle_TIME_SHORT DataStyle = 5
	// Date containing year, month and date. With abbreviated text (e.g. 3:30:32 PM).
	DataStyle_TIME_MEDIUM DataStyle = 6
	// Date containing year, month and date. With full text (e.g. 3:30:32 PM PST).
	DataStyle_TIME_LONG DataStyle = 7
	// Date containing year, month and date. With complete details (e.g. 3:30:42 PM Pacific Standard Time).
	DataStyle_TIME_FULL DataStyle = 8
	// Date containing year, month and date. Numeric only (e.g. 11/23/37 3:30 PM).
	DataStyle_DATE_TIME_SHORT DataStyle = 9
	// Date containing year, month and date. With abbreviated text (e.g. Nov 23, 1937 3:30:32 PM).
	DataStyle_DATE_TIME_MEDIUM DataStyle = 10
	// Date containing year, month and date. With full text (e.g. November 23, 1937 3:30:32 PM PST).
	DataStyle_DATE_TIME_LONG DataStyle = 11
	// Date containing year, month and date. With complete details (e.g. Tuesday, April 12, 1952 AD 3:30:42 PM Pacific Standard Time).
	DataStyle_DATE_TIME_FULL DataStyle = 12
	DataStyle_NUMBER_DECIMAL DataStyle = 13
)

var DataStyle_name = map[int32]string{
	0:  "NO_STYLE",
	1:  "DATE_SHORT",
	2:  "DATE_MEDIUM",
	3:  "DATE_LONG",
	4:  "DATE_FULL",
	5:  "TIME_SHORT",
	6:  "TIME_MEDIUM",
	7:  "TIME_LONG",
	8:  "TIME_FULL",
	9:  "DATE_TIME_SHORT",
	10: "DATE_TIME_MEDIUM",
	11: "DATE_TIME_LONG",
	12: "DATE_TIME_FULL",
	13: "NUMBER_DECIMAL",
}

var DataStyle_value = map[string]int32{
	"NO_STYLE":         0,
	"DATE_SHORT":       1,
	"DATE_MEDIUM":      2,
	"DATE_LONG":        3,
	"DATE_FULL":        4,
	"TIME_SHORT":       5,
	"TIME_MEDIUM":      6,
	"TIME_LONG":        7,
	"TIME_FULL":        8,
	"DATE_TIME_SHORT":  9,
	"DATE_TIME_MEDIUM": 10,
	"DATE_TIME_LONG":   11,
	"DATE_TIME_FULL":   12,
	"NUMBER_DECIMAL":   13,
}

func (x DataStyle) String() string {
	return proto.EnumName(DataStyle_name, int32(x))
}

func (DataStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{11}
}

type FieldSection int32

const (
	FieldSection_FIELD_SECTION_DO_NOT_USE FieldSection = 0
	FieldSection_BACK_FIELDS              FieldSection = 1
	FieldSection_PRIMARY_FIELDS           FieldSection = 2
	FieldSection_SECONDARY_FIELDS         FieldSection = 3
	FieldSection_AUXILIARY_FIELDS         FieldSection = 4
	FieldSection_HEADER_FIELDS            FieldSection = 5
)

var FieldSection_name = map[int32]string{
	0: "FIELD_SECTION_DO_NOT_USE",
	1: "BACK_FIELDS",
	2: "PRIMARY_FIELDS",
	3: "SECONDARY_FIELDS",
	4: "AUXILIARY_FIELDS",
	5: "HEADER_FIELDS",
}

var FieldSection_value = map[string]int32{
	"FIELD_SECTION_DO_NOT_USE": 0,
	"BACK_FIELDS":              1,
	"PRIMARY_FIELDS":           2,
	"SECONDARY_FIELDS":         3,
	"AUXILIARY_FIELDS":         4,
	"HEADER_FIELDS":            5,
}

func (x FieldSection) String() string {
	return proto.EnumName(FieldSection_name, int32(x))
}

func (FieldSection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{12}
}

type GooglePayField int32

const (
	GooglePayField_GOOGLE_PAY_FIELD_DO_NOT_USE GooglePayField = 0
	// Boarding 1-99
	GooglePayField_GOOGLE_PAY_BOARDING_AIRLINE_NAME    GooglePayField = 1
	GooglePayField_GOOGLE_PAY_BOARDING_AIRLINE_CODE    GooglePayField = 2
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN          GooglePayField = 3
	GooglePayField_GOOGLE_PAY_BOARDING_DESTINATION     GooglePayField = 4
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL GooglePayField = 5
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN_GATE     GooglePayField = 6
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_TIME         GooglePayField = 7
	GooglePayField_GOOGLE_PAY_BOARDING_PASSENGER_NAME        GooglePayField = 8
	GooglePayField_GOOGLE_PAY_BOARDING_ZONE_GROUP            GooglePayField = 9
	GooglePayField_GOOGLE_PAY_BOARDING_SEAT                  GooglePayField = 10
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_POSITION     GooglePayField = 11
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE     GooglePayField = 12
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_DOOR         GooglePayField = 13
	GooglePayField_GOOGLE_PAY_BOARDING_FLIGHT_NUMBER         GooglePayField = 14
	GooglePayField_GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER   GooglePayField = 15
	GooglePayField_GOOGLE_PAY_BOARDING_TICKET_NUMBER         GooglePayField = 16
	GooglePayField_GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER GooglePayField = 17
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_GATE_CLOSES GooglePayField = 18
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_DEPARTURE_TIME GooglePayField = 19
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_TIME     GooglePayField = 20
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL GooglePayField = 21
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_GATE     GooglePayField = 22
	// Event 100-199
	GooglePayField_GOOGLE_PAY_EVENT_NAME          GooglePayField = 100
	GooglePayField_GOOGLE_PAY_EVENT_VENUE_NAME    GooglePayField = 101
	GooglePayField_GOOGLE_PAY_EVENT_VENUE_ADDRESS GooglePayField = 102
	GooglePayField_GOOGLE_PAY_EVENT_GATE          GooglePayField = 103
	GooglePayField_GOOGLE_PAY_EVENT_SECTION       GooglePayField = 104
	GooglePayField_GOOGLE_PAY_EVENT_ROW           GooglePayField = 105
	GooglePayField_GOOGLE_PAY_EVENT_SEAT          GooglePayField = 106
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_HOLDER GooglePayField = 107
	GooglePayField_GOOGLE_PAY_EVENT_DOORS_OPEN    GooglePayField = 108
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_EVENT_START GooglePayField = 109
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_EVENT_END                 GooglePayField = 110
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_TYPE         GooglePayField = 111
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_NUMBER       GooglePayField = 112
	GooglePayField_GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER GooglePayField = 113
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_EVENT_FACE_VALUE GooglePayField = 114
	GooglePayField_GOOGLE_PAY_EVENT_FINE_PRINT GooglePayField = 115
	// Gift 200-299
	GooglePayField_GOOGLE_PAY_GIFT_MERCHANT_NAME GooglePayField = 200
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_GIFT_BALANCE GooglePayField = 201
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_GIFT_CARD_NUMBER         GooglePayField = 202
	GooglePayField_GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME GooglePayField = 203
	GooglePayField_GOOGLE_PAY_GIFT_PIN                 GooglePayField = 204
	GooglePayField_GOOGLE_PAY_GIFT_EVENT_NUMBER        GooglePayField = 205
	// Loyalty 300-399
	GooglePayField_GOOGLE_PAY_LOYALTY_PROGRAM_NAME           GooglePayField = 300
	GooglePayField_GOOGLE_PAY_LOYALTY_POINTS                 GooglePayField = 301
	GooglePayField_GOOGLE_PAY_LOYALTY_SECONDARY_POINTS       GooglePayField = 302
	GooglePayField_GOOGLE_PAY_LOYALTY_ACCOUNT_NAME           GooglePayField = 303
	GooglePayField_GOOGLE_PAY_LOYALTY_ACCOUNT_ID             GooglePayField = 304
	GooglePayField_GOOGLE_PAY_LOYALTY_REWARDS_TIER           GooglePayField = 305
	GooglePayField_GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER GooglePayField = 306
	// Offer 400-499
	GooglePayField_GOOGLE_PAY_OFFER_TITLE      GooglePayField = 400
	GooglePayField_GOOGLE_PAY_OFFER_PROVIDER   GooglePayField = 401
	GooglePayField_GOOGLE_PAY_OFFER_DETAILS    GooglePayField = 402
	GooglePayField_GOOGLE_PAY_OFFER_FINE_PRINT GooglePayField = 403
	// Transit 500-599
	GooglePayField_GOOGLE_PAY_TRANSIT_ISSUER_NAME    GooglePayField = 500
	GooglePayField_GOOGLE_PAY_TRANSIT_DEPARTURE      GooglePayField = 501
	GooglePayField_GOOGLE_PAY_TRANSIT_DEPARTURE_TIME GooglePayField = 502
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_VALID_FROM GooglePayField = 503
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_VALID_UNTIL               GooglePayField = 504
	GooglePayField_GOOGLE_PAY_TRANSIT_ARRIVAL                   GooglePayField = 505
	GooglePayField_GOOGLE_PAY_TRANSIT_PASSENGER_NAMES           GooglePayField = 506
	GooglePayField_GOOGLE_PAY_TRANSIT_CARRIAGE                  GooglePayField = 507
	GooglePayField_GOOGLE_PAY_TRANSIT_COACH                     GooglePayField = 508
	GooglePayField_GOOGLE_PAY_TRANSIT_SEAT                      GooglePayField = 509
	GooglePayField_GOOGLE_PAY_TRANSIT_TICKET_NUMBER             GooglePayField = 510
	GooglePayField_GOOGLE_PAY_TRANSIT_TICKET_STATUS             GooglePayField = 511
	GooglePayField_GOOGLE_PAY_TRANSIT_FARE_NAME                 GooglePayField = 512
	GooglePayField_GOOGLE_PAY_TRANSIT_PLATFORM                  GooglePayField = 513
	GooglePayField_GOOGLE_PAY_TRANSIT_ZONE                      GooglePayField = 514
	GooglePayField_GOOGLE_PAY_TRANSIT_FARE_CLASS                GooglePayField = 515
	GooglePayField_GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY       GooglePayField = 516
	GooglePayField_GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS        GooglePayField = 517
	GooglePayField_GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS GooglePayField = 518
	GooglePayField_GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS         GooglePayField = 519
	GooglePayField_GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS        GooglePayField = 520
	GooglePayField_GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER            GooglePayField = 521
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_PURCHASE_DATE     GooglePayField = 522
	GooglePayField_GOOGLE_PAY_TRANSIT_ACCOUNT_ID        GooglePayField = 523
	GooglePayField_GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE GooglePayField = 524
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_TRANSIT_FACE_VALUE GooglePayField = 525
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_TRANSIT_PURCHASE_PRICE   GooglePayField = 526
	GooglePayField_GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE GooglePayField = 527
	// Common Fields >= 1000
	GooglePayField_GOOGLE_PAY_TEXT_MODULE GooglePayField = 1000
	GooglePayField_GOOGLE_PAY_ISSUER_NAME GooglePayField = 1001
)

var GooglePayField_name = map[int32]string{
	0:    "GOOGLE_PAY_FIELD_DO_NOT_USE",
	1:    "GOOGLE_PAY_BOARDING_AIRLINE_NAME",
	2:    "GOOGLE_PAY_BOARDING_AIRLINE_CODE",
	3:    "GOOGLE_PAY_BOARDING_ORIGIN",
	4:    "GOOGLE_PAY_BOARDING_DESTINATION",
	5:    "GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL",
	6:    "GOOGLE_PAY_BOARDING_ORIGIN_GATE",
	7:    "GOOGLE_PAY_BOARDING_BOARDING_TIME",
	8:    "GOOGLE_PAY_BOARDING_PASSENGER_NAME",
	9:    "GOOGLE_PAY_BOARDING_ZONE_GROUP",
	10:   "GOOGLE_PAY_BOARDING_SEAT",
	11:   "GOOGLE_PAY_BOARDING_BOARDING_POSITION",
	12:   "GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE",
	13:   "GOOGLE_PAY_BOARDING_BOARDING_DOOR",
	14:   "GOOGLE_PAY_BOARDING_FLIGHT_NUMBER",
	15:   "GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER",
	16:   "GOOGLE_PAY_BOARDING_TICKET_NUMBER",
	17:   "GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER",
	18:   "GOOGLE_PAY_BOARDING_GATE_CLOSES",
	19:   "GOOGLE_PAY_BOARDING_DEPARTURE_TIME",
	20:   "GOOGLE_PAY_BOARDING_ARRIVAL_TIME",
	21:   "GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL",
	22:   "GOOGLE_PAY_BOARDING_ARRIVAL_GATE",
	100:  "GOOGLE_PAY_EVENT_NAME",
	101:  "GOOGLE_PAY_EVENT_VENUE_NAME",
	102:  "GOOGLE_PAY_EVENT_VENUE_ADDRESS",
	103:  "GOOGLE_PAY_EVENT_GATE",
	104:  "GOOGLE_PAY_EVENT_SECTION",
	105:  "GOOGLE_PAY_EVENT_ROW",
	106:  "GOOGLE_PAY_EVENT_SEAT",
	107:  "GOOGLE_PAY_EVENT_TICKET_HOLDER",
	108:  "GOOGLE_PAY_EVENT_DOORS_OPEN",
	109:  "GOOGLE_PAY_EVENT_START",
	110:  "GOOGLE_PAY_EVENT_END",
	111:  "GOOGLE_PAY_EVENT_TICKET_TYPE",
	112:  "GOOGLE_PAY_EVENT_TICKET_NUMBER",
	113:  "GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER",
	114:  "GOOGLE_PAY_EVENT_FACE_VALUE",
	115:  "GOOGLE_PAY_EVENT_FINE_PRINT",
	200:  "GOOGLE_PAY_GIFT_MERCHANT_NAME",
	201:  "GOOGLE_PAY_GIFT_BALANCE",
	202:  "GOOGLE_PAY_GIFT_CARD_NUMBER",
	203:  "GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME",
	204:  "GOOGLE_PAY_GIFT_PIN",
	205:  "GOOGLE_PAY_GIFT_EVENT_NUMBER",
	300:  "GOOGLE_PAY_LOYALTY_PROGRAM_NAME",
	301:  "GOOGLE_PAY_LOYALTY_POINTS",
	302:  "GOOGLE_PAY_LOYALTY_SECONDARY_POINTS",
	303:  "GOOGLE_PAY_LOYALTY_ACCOUNT_NAME",
	304:  "GOOGLE_PAY_LOYALTY_ACCOUNT_ID",
	305:  "GOOGLE_PAY_LOYALTY_REWARDS_TIER",
	306:  "GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER",
	400:  "GOOGLE_PAY_OFFER_TITLE",
	401:  "GOOGLE_PAY_OFFER_PROVIDER",
	402:  "GOOGLE_PAY_OFFER_DETAILS",
	403:  "GOOGLE_PAY_OFFER_FINE_PRINT",
	500:  "GOOGLE_PAY_TRANSIT_ISSUER_NAME",
	501:  "GOOGLE_PAY_TRANSIT_DEPARTURE",
	502:  "GOOGLE_PAY_TRANSIT_DEPARTURE_TIME",
	503:  "GOOGLE_PAY_TRANSIT_VALID_FROM",
	504:  "GOOGLE_PAY_TRANSIT_VALID_UNTIL",
	505:  "GOOGLE_PAY_TRANSIT_ARRIVAL",
	506:  "GOOGLE_PAY_TRANSIT_PASSENGER_NAMES",
	507:  "GOOGLE_PAY_TRANSIT_CARRIAGE",
	508:  "GOOGLE_PAY_TRANSIT_COACH",
	509:  "GOOGLE_PAY_TRANSIT_SEAT",
	510:  "GOOGLE_PAY_TRANSIT_TICKET_NUMBER",
	511:  "GOOGLE_PAY_TRANSIT_TICKET_STATUS",
	512:  "GOOGLE_PAY_TRANSIT_FARE_NAME",
	513:  "GOOGLE_PAY_TRANSIT_PLATFORM",
	514:  "GOOGLE_PAY_TRANSIT_ZONE",
	515:  "GOOGLE_PAY_TRANSIT_FARE_CLASS",
	516:  "GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY",
	517:  "GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS",
	518:  "GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS",
	519:  "GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS",
	520:  "GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS",
	521:  "GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER",
	522:  "GOOGLE_PAY_TRANSIT_PURCHASE_DATE",
	523:  "GOOGLE_PAY_TRANSIT_ACCOUNT_ID",
	524:  "GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE",
	525:  "GOOGLE_PAY_TRANSIT_FACE_VALUE",
	526:  "GOOGLE_PAY_TRANSIT_PURCHASE_PRICE",
	527:  "GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE",
	1000: "GOOGLE_PAY_TEXT_MODULE",
	1001: "GOOGLE_PAY_ISSUER_NAME",
}

var GooglePayField_value = map[string]int32{
	"GOOGLE_PAY_FIELD_DO_NOT_USE":                  0,
	"GOOGLE_PAY_BOARDING_AIRLINE_NAME":             1,
	"GOOGLE_PAY_BOARDING_AIRLINE_CODE":             2,
	"GOOGLE_PAY_BOARDING_ORIGIN":                   3,
	"GOOGLE_PAY_BOARDING_DESTINATION":              4,
	"GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL":          5,
	"GOOGLE_PAY_BOARDING_ORIGIN_GATE":              6,
	"GOOGLE_PAY_BOARDING_BOARDING_TIME":            7,
	"GOOGLE_PAY_BOARDING_PASSENGER_NAME":           8,
	"GOOGLE_PAY_BOARDING_ZONE_GROUP":               9,
	"GOOGLE_PAY_BOARDING_SEAT":                     10,
	"GOOGLE_PAY_BOARDING_BOARDING_POSITION":        11,
	"GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE":        12,
	"GOOGLE_PAY_BOARDING_BOARDING_DOOR":            13,
	"GOOGLE_PAY_BOARDING_FLIGHT_NUMBER":            14,
	"GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER":      15,
	"GOOGLE_PAY_BOARDING_TICKET_NUMBER":            16,
	"GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER":    17,
	"GOOGLE_PAY_BOARDING_GATE_CLOSES":              18,
	"GOOGLE_PAY_BOARDING_DEPARTURE_TIME":           19,
	"GOOGLE_PAY_BOARDING_ARRIVAL_TIME":             20,
	"GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL":         21,
	"GOOGLE_PAY_BOARDING_ARRIVAL_GATE":             22,
	"GOOGLE_PAY_EVENT_NAME":                        100,
	"GOOGLE_PAY_EVENT_VENUE_NAME":                  101,
	"GOOGLE_PAY_EVENT_VENUE_ADDRESS":               102,
	"GOOGLE_PAY_EVENT_GATE":                        103,
	"GOOGLE_PAY_EVENT_SECTION":                     104,
	"GOOGLE_PAY_EVENT_ROW":                         105,
	"GOOGLE_PAY_EVENT_SEAT":                        106,
	"GOOGLE_PAY_EVENT_TICKET_HOLDER":               107,
	"GOOGLE_PAY_EVENT_DOORS_OPEN":                  108,
	"GOOGLE_PAY_EVENT_START":                       109,
	"GOOGLE_PAY_EVENT_END":                         110,
	"GOOGLE_PAY_EVENT_TICKET_TYPE":                 111,
	"GOOGLE_PAY_EVENT_TICKET_NUMBER":               112,
	"GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER":         113,
	"GOOGLE_PAY_EVENT_FACE_VALUE":                  114,
	"GOOGLE_PAY_EVENT_FINE_PRINT":                  115,
	"GOOGLE_PAY_GIFT_MERCHANT_NAME":                200,
	"GOOGLE_PAY_GIFT_BALANCE":                      201,
	"GOOGLE_PAY_GIFT_CARD_NUMBER":                  202,
	"GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME":          203,
	"GOOGLE_PAY_GIFT_PIN":                          204,
	"GOOGLE_PAY_GIFT_EVENT_NUMBER":                 205,
	"GOOGLE_PAY_LOYALTY_PROGRAM_NAME":              300,
	"GOOGLE_PAY_LOYALTY_POINTS":                    301,
	"GOOGLE_PAY_LOYALTY_SECONDARY_POINTS":          302,
	"GOOGLE_PAY_LOYALTY_ACCOUNT_NAME":              303,
	"GOOGLE_PAY_LOYALTY_ACCOUNT_ID":                304,
	"GOOGLE_PAY_LOYALTY_REWARDS_TIER":              305,
	"GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER":    306,
	"GOOGLE_PAY_OFFER_TITLE":                       400,
	"GOOGLE_PAY_OFFER_PROVIDER":                    401,
	"GOOGLE_PAY_OFFER_DETAILS":                     402,
	"GOOGLE_PAY_OFFER_FINE_PRINT":                  403,
	"GOOGLE_PAY_TRANSIT_ISSUER_NAME":               500,
	"GOOGLE_PAY_TRANSIT_DEPARTURE":                 501,
	"GOOGLE_PAY_TRANSIT_DEPARTURE_TIME":            502,
	"GOOGLE_PAY_TRANSIT_VALID_FROM":                503,
	"GOOGLE_PAY_TRANSIT_VALID_UNTIL":               504,
	"GOOGLE_PAY_TRANSIT_ARRIVAL":                   505,
	"GOOGLE_PAY_TRANSIT_PASSENGER_NAMES":           506,
	"GOOGLE_PAY_TRANSIT_CARRIAGE":                  507,
	"GOOGLE_PAY_TRANSIT_COACH":                     508,
	"GOOGLE_PAY_TRANSIT_SEAT":                      509,
	"GOOGLE_PAY_TRANSIT_TICKET_NUMBER":             510,
	"GOOGLE_PAY_TRANSIT_TICKET_STATUS":             511,
	"GOOGLE_PAY_TRANSIT_FARE_NAME":                 512,
	"GOOGLE_PAY_TRANSIT_PLATFORM":                  513,
	"GOOGLE_PAY_TRANSIT_ZONE":                      514,
	"GOOGLE_PAY_TRANSIT_FARE_CLASS":                515,
	"GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY":       516,
	"GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS":        517,
	"GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS": 518,
	"GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS":         519,
	"GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS":        520,
	"GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER":            521,
	"GOOGLE_PAY_TRANSIT_PURCHASE_DATE":             522,
	"GOOGLE_PAY_TRANSIT_ACCOUNT_ID":                523,
	"GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE":         524,
	"GOOGLE_PAY_TRANSIT_FACE_VALUE":                525,
	"GOOGLE_PAY_TRANSIT_PURCHASE_PRICE":            526,
	"GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE":          527,
	"GOOGLE_PAY_TEXT_MODULE":                       1000,
	"GOOGLE_PAY_ISSUER_NAME":                       1001,
}

func (x GooglePayField) String() string {
	return proto.EnumName(GooglePayField_name, int32(x))
}

func (GooglePayField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{13}
}

// Options to manage the expiry date of the digital card.
type ExpiryType int32

const (
	// The digital card will never expire.
	ExpiryType_EXPIRE_NONE ExpiryType = 0
	// Expiry date is set with year, month and date. The expiry date will be based on your timezone. The digital card will expire at 23:59:59:59.99999 of set date in fixed timezone.
	ExpiryType_EXPIRE_ON_FIXED_DATE ExpiryType = 1
	// The digital card expires after the number of days after the digital card issuing.
	ExpiryType_EXPIRE_AFTER_X_DAYS ExpiryType = 2
	// If you want to change expiry date for each digital card, you can this expiry type. You can set expiry date and time in fixed timezone.
	ExpiryType_EXPIRE_ON_VARIABLE_DATE_TIME ExpiryType = 3
)

var ExpiryType_name = map[int32]string{
	0: "EXPIRE_NONE",
	1: "EXPIRE_ON_FIXED_DATE",
	2: "EXPIRE_AFTER_X_DAYS",
	3: "EXPIRE_ON_VARIABLE_DATE_TIME",
}

var ExpiryType_value = map[string]int32{
	"EXPIRE_NONE":                  0,
	"EXPIRE_ON_FIXED_DATE":         1,
	"EXPIRE_AFTER_X_DAYS":          2,
	"EXPIRE_ON_VARIABLE_DATE_TIME": 3,
}

func (x ExpiryType) String() string {
	return proto.EnumName(ExpiryType_name, int32(x))
}

func (ExpiryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{14}
}

// Sets value and display text for drop-down item.
type SelectOption struct {
	// The order of option in the select list. Option with listPriority 1 will be rendered at the top of drop-down list.
	ListPriority uint32 `protobuf:"varint,1,opt,name=listPriority,proto3" json:"listPriority,omitempty"`
	// Display text on the drop-down list (e.g. Hongkong and Shanghai Banking Corporation).
	TextLabel          string           `protobuf:"bytes,2,opt,name=textLabel,proto3" json:"textLabel,omitempty"`
	LocalizedTextLabel *LocalizedString `protobuf:"bytes,3,opt,name=localizedTextLabel,proto3" json:"localizedTextLabel,omitempty"`
	// Value of selected text. (e.g. HSBC)
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectOption) Reset()         { *m = SelectOption{} }
func (m *SelectOption) String() string { return proto.CompactTextString(m) }
func (*SelectOption) ProtoMessage()    {}
func (*SelectOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{0}
}

func (m *SelectOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectOption.Unmarshal(m, b)
}
func (m *SelectOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectOption.Marshal(b, m, deterministic)
}
func (m *SelectOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectOption.Merge(m, src)
}
func (m *SelectOption) XXX_Size() int {
	return xxx_messageInfo_SelectOption.Size(m)
}
func (m *SelectOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectOption.DiscardUnknown(m)
}

var xxx_messageInfo_SelectOption proto.InternalMessageInfo

func (m *SelectOption) GetListPriority() uint32 {
	if m != nil {
		return m.ListPriority
	}
	return 0
}

func (m *SelectOption) GetTextLabel() string {
	if m != nil {
		return m.TextLabel
	}
	return ""
}

func (m *SelectOption) GetLocalizedTextLabel() *LocalizedString {
	if m != nil {
		return m.LocalizedTextLabel
	}
	return nil
}

func (m *SelectOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Barcode struct {
	Payload              string           `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Format               BarcodeType      `protobuf:"varint,2,opt,name=format,proto3,enum=io.BarcodeType" json:"format,omitempty"`
	AltText              string           `protobuf:"bytes,3,opt,name=altText,proto3" json:"altText,omitempty"`
	LocalizedAltText     *LocalizedString `protobuf:"bytes,4,opt,name=localizedAltText,proto3" json:"localizedAltText,omitempty"`
	MessageEncoding      string           `protobuf:"bytes,5,opt,name=messageEncoding,proto3" json:"messageEncoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{1}
}

func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Barcode.Unmarshal(m, b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return xxx_messageInfo_Barcode.Size(m)
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Barcode) GetFormat() BarcodeType {
	if m != nil {
		return m.Format
	}
	return BarcodeType_BARCODE_TYPE_DO_NOT_USE
}

func (m *Barcode) GetAltText() string {
	if m != nil {
		return m.AltText
	}
	return ""
}

func (m *Barcode) GetLocalizedAltText() *LocalizedString {
	if m != nil {
		return m.LocalizedAltText
	}
	return nil
}

func (m *Barcode) GetMessageEncoding() string {
	if m != nil {
		return m.MessageEncoding
	}
	return ""
}

// Pass Template holds design and data elements for Apple Wallet and Google Pay passes.
type PassTemplate struct {
	// This design id (not writable).
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required"`
	// A name to allow for searching within the console.
	// @tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"required"`
	// The protocol for the design.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// The version of the protocol design. (for protocols that support more than one pass style).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Revision uint32 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This defines the template’s default language. For a list of supported languages please see the Language List.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DefaultLanguage LanguageCode `protobuf:"varint,5,opt,name=defaultLanguage,proto3,enum=io.LanguageCode" json:"defaultLanguage,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This is the name of the company or organisation issuing the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OrganizationName string `protobuf:"bytes,6,opt,name=organizationName,proto3" json:"organizationName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Different language translations for the name of company or organisation issuing the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOrganizationName *LocalizedString `protobuf:"bytes,7,opt,name=localizedOrganizationName,proto3" json:"localizedOrganizationName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This is your campaign description. The description will be displayed when customers are downloading their pass. This value should detail the campaign offers and customer benefits.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Different language translations for the campaign description.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedDescription *LocalizedString `protobuf:"bytes,9,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This holds pass fields for both front and back of the pass and settings of rendering pass fields and data collection page.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Data *Data `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Image assets hold image data.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	//
	// Types that are valid to be assigned to ImageAssets:
	//	*PassTemplate_ImageIds
	//	*PassTemplate_Images
	ImageAssets isPassTemplate_ImageAssets `protobuf_oneof:"ImageAssets" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Colours take a hex code input.  A '#' prefix is optional. Not all colors have effect on each design.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Colors *Colors `protobuf:"bytes,13,opt,name=colors,proto3" json:"colors,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Barcode *Barcode `protobuf:"bytes,14,opt,name=barcode,proto3" json:"barcode,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// NFC enabled passes will depend on client certificate capabilities. Contact support for more information.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	NfcEnabled *NFC `protobuf:"bytes,15,opt,name=nfcEnabled,proto3" json:"nfcEnabled,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// When set controls how this pass is shared. For Apple wallet this uses the built in sharing functionality. For Google Pay, a sharing link will be added to the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Sharing *Sharing `protobuf:"bytes,16,opt,name=sharing,proto3" json:"sharing,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AppleWalletSettings *AppleWalletSettings `protobuf:"bytes,17,opt,name=appleWalletSettings,proto3" json:"appleWalletSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GooglePaySettings *GooglePaySettings `protobuf:"bytes,18,opt,name=googlePaySettings,proto3" json:"googlePaySettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A list of up to 10 GPS locations where this membership card should be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Locations []*GPSLocation `protobuf:"bytes,19,rep,name=locations,proto3" json:"locations,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the membership card to be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Beacons []*Beacon `protobuf:"bytes,20,rep,name=beacons,proto3" json:"beacons,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A list of links to be shown on each membership card.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Links []*Link `protobuf:"bytes,21,rep,name=links,proto3" json:"links,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Timezone string in IANA timezone format. If not provided defaults to Etc/UTC.
	// @tag: validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"
	Timezone             string          `protobuf:"bytes,22,opt,name=timezone,proto3" json:"timezone,omitempty" validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"`
	ExpirySettings       *ExpirySettings `protobuf:"bytes,23,opt,name=expirySettings,proto3" json:"expirySettings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PassTemplate) Reset()         { *m = PassTemplate{} }
func (m *PassTemplate) String() string { return proto.CompactTextString(m) }
func (*PassTemplate) ProtoMessage()    {}
func (*PassTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{2}
}

func (m *PassTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassTemplate.Unmarshal(m, b)
}
func (m *PassTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassTemplate.Marshal(b, m, deterministic)
}
func (m *PassTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassTemplate.Merge(m, src)
}
func (m *PassTemplate) XXX_Size() int {
	return xxx_messageInfo_PassTemplate.Size(m)
}
func (m *PassTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_PassTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_PassTemplate proto.InternalMessageInfo

func (m *PassTemplate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PassTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PassTemplate) GetProtocol() PassProtocol {
	if m != nil {
		return m.Protocol
	}
	return PassProtocol_RAW_PROTOCOL
}

func (m *PassTemplate) GetRevision() uint32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *PassTemplate) GetDefaultLanguage() LanguageCode {
	if m != nil {
		return m.DefaultLanguage
	}
	return LanguageCode_EN
}

func (m *PassTemplate) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *PassTemplate) GetLocalizedOrganizationName() *LocalizedString {
	if m != nil {
		return m.LocalizedOrganizationName
	}
	return nil
}

func (m *PassTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PassTemplate) GetLocalizedDescription() *LocalizedString {
	if m != nil {
		return m.LocalizedDescription
	}
	return nil
}

func (m *PassTemplate) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type isPassTemplate_ImageAssets interface {
	isPassTemplate_ImageAssets()
}

type PassTemplate_ImageIds struct {
	ImageIds *ImageIds `protobuf:"bytes,11,opt,name=imageIds,proto3,oneof"`
}

type PassTemplate_Images struct {
	Images *ImageData `protobuf:"bytes,12,opt,name=images,proto3,oneof"`
}

func (*PassTemplate_ImageIds) isPassTemplate_ImageAssets() {}

func (*PassTemplate_Images) isPassTemplate_ImageAssets() {}

func (m *PassTemplate) GetImageAssets() isPassTemplate_ImageAssets {
	if m != nil {
		return m.ImageAssets
	}
	return nil
}

func (m *PassTemplate) GetImageIds() *ImageIds {
	if x, ok := m.GetImageAssets().(*PassTemplate_ImageIds); ok {
		return x.ImageIds
	}
	return nil
}

func (m *PassTemplate) GetImages() *ImageData {
	if x, ok := m.GetImageAssets().(*PassTemplate_Images); ok {
		return x.Images
	}
	return nil
}

func (m *PassTemplate) GetColors() *Colors {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *PassTemplate) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

func (m *PassTemplate) GetNfcEnabled() *NFC {
	if m != nil {
		return m.NfcEnabled
	}
	return nil
}

func (m *PassTemplate) GetSharing() *Sharing {
	if m != nil {
		return m.Sharing
	}
	return nil
}

func (m *PassTemplate) GetAppleWalletSettings() *AppleWalletSettings {
	if m != nil {
		return m.AppleWalletSettings
	}
	return nil
}

func (m *PassTemplate) GetGooglePaySettings() *GooglePaySettings {
	if m != nil {
		return m.GooglePaySettings
	}
	return nil
}

func (m *PassTemplate) GetLocations() []*GPSLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *PassTemplate) GetBeacons() []*Beacon {
	if m != nil {
		return m.Beacons
	}
	return nil
}

func (m *PassTemplate) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PassTemplate) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *PassTemplate) GetExpirySettings() *ExpirySettings {
	if m != nil {
		return m.ExpirySettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PassTemplate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PassTemplate_ImageIds)(nil),
		(*PassTemplate_Images)(nil),
	}
}

// The digital card will be expired on the expiry date. The barcode will not be rendered on digital card and the card itself will not be updated after it has been expired.
type ExpirySettings struct {
	ExpiryType ExpiryType `protobuf:"varint,1,opt,name=expiryType,proto3,enum=io.ExpiryType" json:"expiryType,omitempty"`
	// Types that are valid to be assigned to ExpiryOneof:
	//	*ExpirySettings_FixedExpiryDate
	//	*ExpirySettings_ExpireAfterXDays
	ExpiryOneof          isExpirySettings_ExpiryOneof `protobuf_oneof:"expiryOneof"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ExpirySettings) Reset()         { *m = ExpirySettings{} }
func (m *ExpirySettings) String() string { return proto.CompactTextString(m) }
func (*ExpirySettings) ProtoMessage()    {}
func (*ExpirySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{3}
}

func (m *ExpirySettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpirySettings.Unmarshal(m, b)
}
func (m *ExpirySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpirySettings.Marshal(b, m, deterministic)
}
func (m *ExpirySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirySettings.Merge(m, src)
}
func (m *ExpirySettings) XXX_Size() int {
	return xxx_messageInfo_ExpirySettings.Size(m)
}
func (m *ExpirySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirySettings.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirySettings proto.InternalMessageInfo

func (m *ExpirySettings) GetExpiryType() ExpiryType {
	if m != nil {
		return m.ExpiryType
	}
	return ExpiryType_EXPIRE_NONE
}

type isExpirySettings_ExpiryOneof interface {
	isExpirySettings_ExpiryOneof()
}

type ExpirySettings_FixedExpiryDate struct {
	FixedExpiryDate *Date `protobuf:"bytes,2,opt,name=fixedExpiryDate,proto3,oneof"`
}

type ExpirySettings_ExpireAfterXDays struct {
	ExpireAfterXDays uint32 `protobuf:"varint,3,opt,name=expireAfterXDays,proto3,oneof"`
}

func (*ExpirySettings_FixedExpiryDate) isExpirySettings_ExpiryOneof() {}

func (*ExpirySettings_ExpireAfterXDays) isExpirySettings_ExpiryOneof() {}

func (m *ExpirySettings) GetExpiryOneof() isExpirySettings_ExpiryOneof {
	if m != nil {
		return m.ExpiryOneof
	}
	return nil
}

func (m *ExpirySettings) GetFixedExpiryDate() *Date {
	if x, ok := m.GetExpiryOneof().(*ExpirySettings_FixedExpiryDate); ok {
		return x.FixedExpiryDate
	}
	return nil
}

func (m *ExpirySettings) GetExpireAfterXDays() uint32 {
	if x, ok := m.GetExpiryOneof().(*ExpirySettings_ExpireAfterXDays); ok {
		return x.ExpireAfterXDays
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExpirySettings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExpirySettings_FixedExpiryDate)(nil),
		(*ExpirySettings_ExpireAfterXDays)(nil),
	}
}

// Pass settings only for Apple Wallet.
type AppleWalletSettings struct {
	// Pass type
	PassType ApplePassType `protobuf:"varint,1,opt,name=passType,proto3,enum=io.ApplePassType" json:"passType,omitempty"`
	// Information that will not appear on the pass.
	UserInfo string `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	// This is used to specify a deep link into the app displayed on the back of the Apple Wallet pass (the app is chosen from the assoStoreId). If the app supports deep linking, you can use this url to go to a specific point within the app when the link is clicked.
	AppLaunchUrl string `protobuf:"bytes,3,opt,name=appLaunchUrl,proto3" json:"appLaunchUrl,omitempty"`
	// A list of iTunes Store item identifiers which is used to generate a app install page.
	AssociatedStoreIdentifiers []uint32 `protobuf:"varint,4,rep,packed,name=associatedStoreIdentifiers,proto3" json:"associatedStoreIdentifiers,omitempty"`
	// GPS lock screen messages will show at the lower of max distance and the pass default(unpublished) value.
	MaxDistance uint32 `protobuf:"varint,5,opt,name=maxDistance,proto3" json:"maxDistance,omitempty"`
	// List of country codes for the stores of the associated apps. This is required to render the pass correctly in the designer.
	AppStoreCountries    []string    `protobuf:"bytes,6,rep,name=appStoreCountries,proto3" json:"appStoreCountries,omitempty"`
	TransitType          TransitType `protobuf:"varint,7,opt,name=transitType,proto3,enum=io.TransitType" json:"transitType,omitempty"`
	GroupingIdentifier   string      `protobuf:"bytes,8,opt,name=groupingIdentifier,proto3" json:"groupingIdentifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppleWalletSettings) Reset()         { *m = AppleWalletSettings{} }
func (m *AppleWalletSettings) String() string { return proto.CompactTextString(m) }
func (*AppleWalletSettings) ProtoMessage()    {}
func (*AppleWalletSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{4}
}

func (m *AppleWalletSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppleWalletSettings.Unmarshal(m, b)
}
func (m *AppleWalletSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppleWalletSettings.Marshal(b, m, deterministic)
}
func (m *AppleWalletSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppleWalletSettings.Merge(m, src)
}
func (m *AppleWalletSettings) XXX_Size() int {
	return xxx_messageInfo_AppleWalletSettings.Size(m)
}
func (m *AppleWalletSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AppleWalletSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AppleWalletSettings proto.InternalMessageInfo

func (m *AppleWalletSettings) GetPassType() ApplePassType {
	if m != nil {
		return m.PassType
	}
	return ApplePassType_APPLE_NOT_SUPPORTED
}

func (m *AppleWalletSettings) GetUserInfo() string {
	if m != nil {
		return m.UserInfo
	}
	return ""
}

func (m *AppleWalletSettings) GetAppLaunchUrl() string {
	if m != nil {
		return m.AppLaunchUrl
	}
	return ""
}

func (m *AppleWalletSettings) GetAssociatedStoreIdentifiers() []uint32 {
	if m != nil {
		return m.AssociatedStoreIdentifiers
	}
	return nil
}

func (m *AppleWalletSettings) GetMaxDistance() uint32 {
	if m != nil {
		return m.MaxDistance
	}
	return 0
}

func (m *AppleWalletSettings) GetAppStoreCountries() []string {
	if m != nil {
		return m.AppStoreCountries
	}
	return nil
}

func (m *AppleWalletSettings) GetTransitType() TransitType {
	if m != nil {
		return m.TransitType
	}
	return TransitType_TRANSIT_TYPE_DO_NOT_USE
}

func (m *AppleWalletSettings) GetGroupingIdentifier() string {
	if m != nil {
		return m.GroupingIdentifier
	}
	return ""
}

// Pass settings only for Google Pay.
type GooglePaySettings struct {
	// Pass type
	PassType             GooglePayPassType `protobuf:"varint,1,opt,name=passType,proto3,enum=io.GooglePayPassType" json:"passType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GooglePaySettings) Reset()         { *m = GooglePaySettings{} }
func (m *GooglePaySettings) String() string { return proto.CompactTextString(m) }
func (*GooglePaySettings) ProtoMessage()    {}
func (*GooglePaySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{5}
}

func (m *GooglePaySettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GooglePaySettings.Unmarshal(m, b)
}
func (m *GooglePaySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GooglePaySettings.Marshal(b, m, deterministic)
}
func (m *GooglePaySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GooglePaySettings.Merge(m, src)
}
func (m *GooglePaySettings) XXX_Size() int {
	return xxx_messageInfo_GooglePaySettings.Size(m)
}
func (m *GooglePaySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_GooglePaySettings.DiscardUnknown(m)
}

var xxx_messageInfo_GooglePaySettings proto.InternalMessageInfo

func (m *GooglePaySettings) GetPassType() GooglePayPassType {
	if m != nil {
		return m.PassType
	}
	return GooglePayPassType_GOOGLE_PAY_NOT_SUPPORTED
}

// This allows you to configure data so that you can save it against each customer record or render it on the pass.
type Data struct {
	// This allows you to configure individual data field that is rendered on the customer UI (data collection page and the pass).
	// You can set data field purely for CRM analytics purpose and not show it on the customer UI.
	DataFields []*DataField `protobuf:"bytes,1,rep,name=dataFields,proto3" json:"dataFields,omitempty"`
	// Settings for data collection elements other than form fields. Form fields can be configured in dataFields object.
	DataCollectionPageSettings *DataCollectionPageSettings `protobuf:"bytes,2,opt,name=dataCollectionPageSettings,proto3" json:"dataCollectionPageSettings,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{6}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetDataFields() []*DataField {
	if m != nil {
		return m.DataFields
	}
	return nil
}

func (m *Data) GetDataCollectionPageSettings() *DataCollectionPageSettings {
	if m != nil {
		return m.DataCollectionPageSettings
	}
	return nil
}

// This allows you to customize the contents rendered on data collection landing page.
type DataCollectionPageSettings struct {
	// Used as title.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Localized title of the page.
	LocalizedTitle *LocalizedString `protobuf:"bytes,2,opt,name=localizedTitle,proto3" json:"localizedTitle,omitempty"`
	// Description of the page.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized description of the page.
	LocalizedDescription *LocalizedString `protobuf:"bytes,4,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty"`
	// This sets text for form submit button on the data collection landing page. Default text is 'Submit'.
	SubmitButtonText          string           `protobuf:"bytes,5,opt,name=submitButtonText,proto3" json:"submitButtonText,omitempty"`
	LocalizedSubmitButtonText *LocalizedString `protobuf:"bytes,6,opt,name=localizedSubmitButtonText,proto3" json:"localizedSubmitButtonText,omitempty"`
	// The text showed to customers when the page is processing new enrolments.
	LoadingText string `protobuf:"bytes,7,opt,name=loadingText,proto3" json:"loadingText,omitempty"`
	// Localized loading text.
	LocalizedLoadingText *LocalizedString `protobuf:"bytes,8,opt,name=localizedLoadingText,proto3" json:"localizedLoadingText,omitempty"`
	// Thank you text to display on the standard issue page. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	ThankYouText string `protobuf:"bytes,9,opt,name=thankYouText,proto3" json:"thankYouText,omitempty"`
	// Localized thank you text. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedThankYouText *LocalizedString `protobuf:"bytes,10,opt,name=localizedThankYouText,proto3" json:"localizedThankYouText,omitempty"`
	// For device size greater than the iPad, the form will be rendered with page background color. Form background color is always set as white.
	PageBackgroundColor string `protobuf:"bytes,11,opt,name=pageBackgroundColor,proto3" json:"pageBackgroundColor,omitempty"`
	// Localized page background color shown if device is greater than the iPad.
	LocalizedPageBackgroundColor *LocalizedString `protobuf:"bytes,12,opt,name=localizedPageBackgroundColor,proto3" json:"localizedPageBackgroundColor,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}         `json:"-"`
	XXX_unrecognized             []byte           `json:"-"`
	XXX_sizecache                int32            `json:"-"`
}

func (m *DataCollectionPageSettings) Reset()         { *m = DataCollectionPageSettings{} }
func (m *DataCollectionPageSettings) String() string { return proto.CompactTextString(m) }
func (*DataCollectionPageSettings) ProtoMessage()    {}
func (*DataCollectionPageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{7}
}

func (m *DataCollectionPageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCollectionPageSettings.Unmarshal(m, b)
}
func (m *DataCollectionPageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCollectionPageSettings.Marshal(b, m, deterministic)
}
func (m *DataCollectionPageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCollectionPageSettings.Merge(m, src)
}
func (m *DataCollectionPageSettings) XXX_Size() int {
	return xxx_messageInfo_DataCollectionPageSettings.Size(m)
}
func (m *DataCollectionPageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCollectionPageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DataCollectionPageSettings proto.InternalMessageInfo

func (m *DataCollectionPageSettings) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedTitle() *LocalizedString {
	if m != nil {
		return m.LocalizedTitle
	}
	return nil
}

func (m *DataCollectionPageSettings) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedDescription() *LocalizedString {
	if m != nil {
		return m.LocalizedDescription
	}
	return nil
}

func (m *DataCollectionPageSettings) GetSubmitButtonText() string {
	if m != nil {
		return m.SubmitButtonText
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedSubmitButtonText() *LocalizedString {
	if m != nil {
		return m.LocalizedSubmitButtonText
	}
	return nil
}

func (m *DataCollectionPageSettings) GetLoadingText() string {
	if m != nil {
		return m.LoadingText
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedLoadingText() *LocalizedString {
	if m != nil {
		return m.LocalizedLoadingText
	}
	return nil
}

func (m *DataCollectionPageSettings) GetThankYouText() string {
	if m != nil {
		return m.ThankYouText
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedThankYouText() *LocalizedString {
	if m != nil {
		return m.LocalizedThankYouText
	}
	return nil
}

func (m *DataCollectionPageSettings) GetPageBackgroundColor() string {
	if m != nil {
		return m.PageBackgroundColor
	}
	return ""
}

func (m *DataCollectionPageSettings) GetLocalizedPageBackgroundColor() *LocalizedString {
	if m != nil {
		return m.LocalizedPageBackgroundColor
	}
	return nil
}

type PassTemplateResponse struct {
	Template             *PassTemplate        `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OwnerUsername        string               `protobuf:"bytes,3,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	Protocol             PassProtocol         `protobuf:"varint,4,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty"`
	Revision             uint32               `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PassTemplateResponse) Reset()         { *m = PassTemplateResponse{} }
func (m *PassTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*PassTemplateResponse) ProtoMessage()    {}
func (*PassTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{8}
}

func (m *PassTemplateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassTemplateResponse.Unmarshal(m, b)
}
func (m *PassTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassTemplateResponse.Marshal(b, m, deterministic)
}
func (m *PassTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassTemplateResponse.Merge(m, src)
}
func (m *PassTemplateResponse) XXX_Size() int {
	return xxx_messageInfo_PassTemplateResponse.Size(m)
}
func (m *PassTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PassTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PassTemplateResponse proto.InternalMessageInfo

func (m *PassTemplateResponse) GetTemplate() *PassTemplate {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *PassTemplateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PassTemplateResponse) GetOwnerUsername() string {
	if m != nil {
		return m.OwnerUsername
	}
	return ""
}

func (m *PassTemplateResponse) GetProtocol() PassProtocol {
	if m != nil {
		return m.Protocol
	}
	return PassProtocol_RAW_PROTOCOL
}

func (m *PassTemplateResponse) GetRevision() uint32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *PassTemplateResponse) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PassTemplateResponse) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// Colours take a hexcode input.  A '#' prefix is optional.
type Colors struct {
	// The background color of the card in hex (e.g. “#ffffff” or "ffffff").
	BackgroundColor string `protobuf:"bytes,1,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	// This customises the color of field label of Apple Wallet pass.
	LabelColor string `protobuf:"bytes,2,opt,name=labelColor,proto3" json:"labelColor,omitempty"`
	// This customises the color of field text or value of Apple Wallet pass.
	TextColor string `protobuf:"bytes,3,opt,name=textColor,proto3" json:"textColor,omitempty"`
	// Optional undocumented color for text placed over the strip image in Apple Wallet.
	StripColor           string   `protobuf:"bytes,4,opt,name=stripColor,proto3" json:"stripColor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Colors) Reset()         { *m = Colors{} }
func (m *Colors) String() string { return proto.CompactTextString(m) }
func (*Colors) ProtoMessage()    {}
func (*Colors) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{9}
}

func (m *Colors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Colors.Unmarshal(m, b)
}
func (m *Colors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Colors.Marshal(b, m, deterministic)
}
func (m *Colors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Colors.Merge(m, src)
}
func (m *Colors) XXX_Size() int {
	return xxx_messageInfo_Colors.Size(m)
}
func (m *Colors) XXX_DiscardUnknown() {
	xxx_messageInfo_Colors.DiscardUnknown(m)
}

var xxx_messageInfo_Colors proto.InternalMessageInfo

func (m *Colors) GetBackgroundColor() string {
	if m != nil {
		return m.BackgroundColor
	}
	return ""
}

func (m *Colors) GetLabelColor() string {
	if m != nil {
		return m.LabelColor
	}
	return ""
}

func (m *Colors) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *Colors) GetStripColor() string {
	if m != nil {
		return m.StripColor
	}
	return ""
}

type CopyTemplateInput struct {
	// @tag: validateGeneric:"required" validateCreate:"required"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"required"`
	TemplateName         string   `protobuf:"bytes,2,opt,name=templateName,proto3" json:"templateName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyTemplateInput) Reset()         { *m = CopyTemplateInput{} }
func (m *CopyTemplateInput) String() string { return proto.CompactTextString(m) }
func (*CopyTemplateInput) ProtoMessage()    {}
func (*CopyTemplateInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{10}
}

func (m *CopyTemplateInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyTemplateInput.Unmarshal(m, b)
}
func (m *CopyTemplateInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyTemplateInput.Marshal(b, m, deterministic)
}
func (m *CopyTemplateInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyTemplateInput.Merge(m, src)
}
func (m *CopyTemplateInput) XXX_Size() int {
	return xxx_messageInfo_CopyTemplateInput.Size(m)
}
func (m *CopyTemplateInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyTemplateInput.DiscardUnknown(m)
}

var xxx_messageInfo_CopyTemplateInput proto.InternalMessageInfo

func (m *CopyTemplateInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CopyTemplateInput) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

type NFC struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CertificateId        string   `protobuf:"bytes,2,opt,name=certificateId,proto3" json:"certificateId,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NFC) Reset()         { *m = NFC{} }
func (m *NFC) String() string { return proto.CompactTextString(m) }
func (*NFC) ProtoMessage()    {}
func (*NFC) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{11}
}

func (m *NFC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NFC.Unmarshal(m, b)
}
func (m *NFC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NFC.Marshal(b, m, deterministic)
}
func (m *NFC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFC.Merge(m, src)
}
func (m *NFC) XXX_Size() int {
	return xxx_messageInfo_NFC.Size(m)
}
func (m *NFC) XXX_DiscardUnknown() {
	xxx_messageInfo_NFC.DiscardUnknown(m)
}

var xxx_messageInfo_NFC proto.InternalMessageInfo

func (m *NFC) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NFC) GetCertificateId() string {
	if m != nil {
		return m.CertificateId
	}
	return ""
}

func (m *NFC) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// Data Field allows you to define set of data you store against each pass holder.
// When data field is created, DataField for Terms & Conditions and optIn will be autogenerated.
type DataField struct {
	// If PII key is set as an unique name of the field, collected data will be stored under PII (ex. surname, forename).
	// Else, uniqueName (key) and value are stored under meta object.
	UniqueName string `protobuf:"bytes,1,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
	// The template id which this field belongs to.
	TemplateId string    `protobuf:"bytes,2,opt,name=templateId,proto3" json:"templateId,omitempty"`
	FieldType  FieldType `protobuf:"varint,3,opt,name=fieldType,proto3,enum=io.FieldType" json:"fieldType,omitempty"`
	// If set true, the field is mandatory. If set false, the field is optional.
	IsRequired bool `protobuf:"varint,4,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	// A text used for the data collection field label and pass field title.
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	// This translates label text into different language.
	LocalizedLabel *LocalizedString `protobuf:"bytes,6,opt,name=localizedLabel,proto3" json:"localizedLabel,omitempty"`
	// Data type you want to receive from your users.
	DataType DataType `protobuf:"varint,7,opt,name=dataType,proto3,enum=io.DataType" json:"dataType,omitempty"`
	// An optional default value or text. E.g. a default set of terms an conditions. Value can contain a protocol field in the format of ${member.externalId}.
	DefaultValue string `protobuf:"bytes,8,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	// This translates default value of the field into different languages.
	LocalizedDefaultValue *LocalizedString `protobuf:"bytes,9,opt,name=localizedDefaultValue,proto3" json:"localizedDefaultValue,omitempty"`
	// A regex which allows you to set set custom validation rules for the data stored.
	Validation string `protobuf:"bytes,10,opt,name=validation,proto3" json:"validation,omitempty"`
	// If false, a defaultValue or listOptions[0] will be used.
	UserCanSetValue bool `protobuf:"varint,11,opt,name=userCanSetValue,proto3" json:"userCanSetValue,omitempty"`
	// The currency code (e.g. USD, EUR) to display with money value if data type is set as currency.
	CurrencyCode                     string                            `protobuf:"bytes,12,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	AppleWalletFieldRenderOptions    *AppleWalletFieldRenderOptions    `protobuf:"bytes,13,opt,name=appleWalletFieldRenderOptions,proto3" json:"appleWalletFieldRenderOptions,omitempty"`
	DataCollectionFieldRenderOptions *DataCollectionFieldRenderOptions `protobuf:"bytes,14,opt,name=dataCollectionFieldRenderOptions,proto3" json:"dataCollectionFieldRenderOptions,omitempty"`
	// Usage: indicates where the field is used (apple render, google render, data collection page)
	Usage                       []UsageType                  `protobuf:"varint,15,rep,packed,name=usage,proto3,enum=io.UsageType" json:"usage,omitempty"`
	GooglePayFieldRenderOptions *GooglePayFieldRenderOptions `protobuf:"bytes,16,opt,name=googlePayFieldRenderOptions,proto3" json:"googlePayFieldRenderOptions,omitempty"`
	// Default international telephone code determines the default country flag of the tel input field (e.g. +852, +44).
	DefaultTelCountryCode string   `protobuf:"bytes,17,opt,name=defaultTelCountryCode,proto3" json:"defaultTelCountryCode,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DataField) Reset()         { *m = DataField{} }
func (m *DataField) String() string { return proto.CompactTextString(m) }
func (*DataField) ProtoMessage()    {}
func (*DataField) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{12}
}

func (m *DataField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataField.Unmarshal(m, b)
}
func (m *DataField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataField.Marshal(b, m, deterministic)
}
func (m *DataField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataField.Merge(m, src)
}
func (m *DataField) XXX_Size() int {
	return xxx_messageInfo_DataField.Size(m)
}
func (m *DataField) XXX_DiscardUnknown() {
	xxx_messageInfo_DataField.DiscardUnknown(m)
}

var xxx_messageInfo_DataField proto.InternalMessageInfo

func (m *DataField) GetUniqueName() string {
	if m != nil {
		return m.UniqueName
	}
	return ""
}

func (m *DataField) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *DataField) GetFieldType() FieldType {
	if m != nil {
		return m.FieldType
	}
	return FieldType_FIELD_TYPE_NONE
}

func (m *DataField) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *DataField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *DataField) GetLocalizedLabel() *LocalizedString {
	if m != nil {
		return m.LocalizedLabel
	}
	return nil
}

func (m *DataField) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DATA_TYPE_NONE
}

func (m *DataField) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *DataField) GetLocalizedDefaultValue() *LocalizedString {
	if m != nil {
		return m.LocalizedDefaultValue
	}
	return nil
}

func (m *DataField) GetValidation() string {
	if m != nil {
		return m.Validation
	}
	return ""
}

func (m *DataField) GetUserCanSetValue() bool {
	if m != nil {
		return m.UserCanSetValue
	}
	return false
}

func (m *DataField) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *DataField) GetAppleWalletFieldRenderOptions() *AppleWalletFieldRenderOptions {
	if m != nil {
		return m.AppleWalletFieldRenderOptions
	}
	return nil
}

func (m *DataField) GetDataCollectionFieldRenderOptions() *DataCollectionFieldRenderOptions {
	if m != nil {
		return m.DataCollectionFieldRenderOptions
	}
	return nil
}

func (m *DataField) GetUsage() []UsageType {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *DataField) GetGooglePayFieldRenderOptions() *GooglePayFieldRenderOptions {
	if m != nil {
		return m.GooglePayFieldRenderOptions
	}
	return nil
}

func (m *DataField) GetDefaultTelCountryCode() string {
	if m != nil {
		return m.DefaultTelCountryCode
	}
	return ""
}

// Customise how data field is rendered on the front and back of the pass.
type AppleWalletFieldRenderOptions struct {
	// Alignment for field title and body text for fields which are displayed on the front of Apple Wallet pass.
	TextAlignment    TextAlignment     `protobuf:"varint,2,opt,name=textAlignment,proto3,enum=io.TextAlignment" json:"textAlignment,omitempty"`
	PositionSettings *PositionSettings `protobuf:"bytes,3,opt,name=positionSettings,proto3" json:"positionSettings,omitempty"`
	// This message will be displayed as a notification when this field is updated. If %@ is used in the change message it will be replaced with the new field value when the message is displayed. E.g. Your registered name has been changed to %@.
	ChangeMessage string `protobuf:"bytes,4,opt,name=changeMessage,proto3" json:"changeMessage,omitempty"`
	// This translates push notification message for different languages.
	LocalizedChangeMessage *LocalizedString `protobuf:"bytes,5,opt,name=localizedChangeMessage,proto3" json:"localizedChangeMessage,omitempty"`
	DateStyle              DateTimeStyle    `protobuf:"varint,6,opt,name=dateStyle,proto3,enum=io.DateTimeStyle" json:"dateStyle,omitempty"`
	TimeStyle              DateTimeStyle    `protobuf:"varint,7,opt,name=timeStyle,proto3,enum=io.DateTimeStyle" json:"timeStyle,omitempty"`
	NumberStyle            NumberStyle      `protobuf:"varint,8,opt,name=numberStyle,proto3,enum=io.NumberStyle" json:"numberStyle,omitempty"`
	SuppressLinkDetection  []LinkDetector   `protobuf:"varint,9,rep,packed,name=suppressLinkDetection,proto3,enum=io.LinkDetector" json:"suppressLinkDetection,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *AppleWalletFieldRenderOptions) Reset()         { *m = AppleWalletFieldRenderOptions{} }
func (m *AppleWalletFieldRenderOptions) String() string { return proto.CompactTextString(m) }
func (*AppleWalletFieldRenderOptions) ProtoMessage()    {}
func (*AppleWalletFieldRenderOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{13}
}

func (m *AppleWalletFieldRenderOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppleWalletFieldRenderOptions.Unmarshal(m, b)
}
func (m *AppleWalletFieldRenderOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppleWalletFieldRenderOptions.Marshal(b, m, deterministic)
}
func (m *AppleWalletFieldRenderOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppleWalletFieldRenderOptions.Merge(m, src)
}
func (m *AppleWalletFieldRenderOptions) XXX_Size() int {
	return xxx_messageInfo_AppleWalletFieldRenderOptions.Size(m)
}
func (m *AppleWalletFieldRenderOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AppleWalletFieldRenderOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AppleWalletFieldRenderOptions proto.InternalMessageInfo

func (m *AppleWalletFieldRenderOptions) GetTextAlignment() TextAlignment {
	if m != nil {
		return m.TextAlignment
	}
	return TextAlignment_TEXT_ALIGNMENT_DO_NOT_USE
}

func (m *AppleWalletFieldRenderOptions) GetPositionSettings() *PositionSettings {
	if m != nil {
		return m.PositionSettings
	}
	return nil
}

func (m *AppleWalletFieldRenderOptions) GetChangeMessage() string {
	if m != nil {
		return m.ChangeMessage
	}
	return ""
}

func (m *AppleWalletFieldRenderOptions) GetLocalizedChangeMessage() *LocalizedString {
	if m != nil {
		return m.LocalizedChangeMessage
	}
	return nil
}

func (m *AppleWalletFieldRenderOptions) GetDateStyle() DateTimeStyle {
	if m != nil {
		return m.DateStyle
	}
	return DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE
}

func (m *AppleWalletFieldRenderOptions) GetTimeStyle() DateTimeStyle {
	if m != nil {
		return m.TimeStyle
	}
	return DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE
}

func (m *AppleWalletFieldRenderOptions) GetNumberStyle() NumberStyle {
	if m != nil {
		return m.NumberStyle
	}
	return NumberStyle_NUMBER_STYLE_DO_NOT_USE
}

func (m *AppleWalletFieldRenderOptions) GetSuppressLinkDetection() []LinkDetector {
	if m != nil {
		return m.SuppressLinkDetection
	}
	return nil
}

// Customise how data field is rendered on the front and back of the pass.
type GooglePayFieldRenderOptions struct {
	// Determines which field the data will be mapped to on the Google Pay pass. Note, not all Google Pay fields support
	// labels or localization.  Where not supported, label and localization options will be ignored.
	GooglePayPosition GooglePayField `protobuf:"varint,1,opt,name=googlePayPosition,proto3,enum=io.GooglePayField" json:"googlePayPosition,omitempty"`
	// If the field type is a text module, the priority of the text module.
	TextModulePriority   uint32   `protobuf:"varint,2,opt,name=textModulePriority,proto3" json:"textModulePriority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GooglePayFieldRenderOptions) Reset()         { *m = GooglePayFieldRenderOptions{} }
func (m *GooglePayFieldRenderOptions) String() string { return proto.CompactTextString(m) }
func (*GooglePayFieldRenderOptions) ProtoMessage()    {}
func (*GooglePayFieldRenderOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{14}
}

func (m *GooglePayFieldRenderOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GooglePayFieldRenderOptions.Unmarshal(m, b)
}
func (m *GooglePayFieldRenderOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GooglePayFieldRenderOptions.Marshal(b, m, deterministic)
}
func (m *GooglePayFieldRenderOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GooglePayFieldRenderOptions.Merge(m, src)
}
func (m *GooglePayFieldRenderOptions) XXX_Size() int {
	return xxx_messageInfo_GooglePayFieldRenderOptions.Size(m)
}
func (m *GooglePayFieldRenderOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GooglePayFieldRenderOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GooglePayFieldRenderOptions proto.InternalMessageInfo

func (m *GooglePayFieldRenderOptions) GetGooglePayPosition() GooglePayField {
	if m != nil {
		return m.GooglePayPosition
	}
	return GooglePayField_GOOGLE_PAY_FIELD_DO_NOT_USE
}

func (m *GooglePayFieldRenderOptions) GetTextModulePriority() uint32 {
	if m != nil {
		return m.TextModulePriority
	}
	return 0
}

// Sets a position of field on the pass. Priority attribute allows you to change the order of field within the section.
type PositionSettings struct {
	// Selects a section to render a field.
	Section FieldSection `protobuf:"varint,1,opt,name=section,proto3,enum=io.FieldSection" json:"section,omitempty"`
	// The field section has certain number of fields they can contain. The priority indicates the position of the section.
	Priority             uint32   `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionSettings) Reset()         { *m = PositionSettings{} }
func (m *PositionSettings) String() string { return proto.CompactTextString(m) }
func (*PositionSettings) ProtoMessage()    {}
func (*PositionSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{15}
}

func (m *PositionSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionSettings.Unmarshal(m, b)
}
func (m *PositionSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionSettings.Marshal(b, m, deterministic)
}
func (m *PositionSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionSettings.Merge(m, src)
}
func (m *PositionSettings) XXX_Size() int {
	return xxx_messageInfo_PositionSettings.Size(m)
}
func (m *PositionSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PositionSettings proto.InternalMessageInfo

func (m *PositionSettings) GetSection() FieldSection {
	if m != nil {
		return m.Section
	}
	return FieldSection_FIELD_SECTION_DO_NOT_USE
}

func (m *PositionSettings) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// Customise how data field is rendered on the data collection landing page.
type DataCollectionFieldRenderOptions struct {
	// Tooltip or helper text displayed under the input field which explains the purpose of field's input.
	HelpText string `protobuf:"bytes,1,opt,name=helpText,proto3" json:"helpText,omitempty"`
	// Tooltip or helper text in localized language.
	LocalizedHelpText *LocalizedString `protobuf:"bytes,2,opt,name=localizedHelpText,proto3" json:"localizedHelpText,omitempty"`
	// Used to change the order of fields displayed on the data collection landing page.
	DisplayOrder int32 `protobuf:"varint,3,opt,name=displayOrder,proto3" json:"displayOrder,omitempty"`
	// If placeholder is set or elementText is not set, then an input element will be rendered. The default is placeholder is an empty string.
	Placeholder string `protobuf:"bytes,5,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// If DataType.OPTIONS is set, then drop-down list will be rendered.
	SelectOptions []*SelectOption `protobuf:"bytes,6,rep,name=selectOptions,proto3" json:"selectOptions,omitempty"`
	// Placeholder in localized language.
	LocalizedPlaceholder *LocalizedString `protobuf:"bytes,7,opt,name=localizedPlaceholder,proto3" json:"localizedPlaceholder,omitempty"`
	// If set true, input field will have autocomplete enabled. The default is false.
	Autocomplete bool `protobuf:"varint,8,opt,name=autocomplete,proto3" json:"autocomplete,omitempty"`
	// Customize address input fields.
	AddressRenderOptions *AddressRenderOptions `protobuf:"bytes,9,opt,name=addressRenderOptions,proto3" json:"addressRenderOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DataCollectionFieldRenderOptions) Reset()         { *m = DataCollectionFieldRenderOptions{} }
func (m *DataCollectionFieldRenderOptions) String() string { return proto.CompactTextString(m) }
func (*DataCollectionFieldRenderOptions) ProtoMessage()    {}
func (*DataCollectionFieldRenderOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{16}
}

func (m *DataCollectionFieldRenderOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCollectionFieldRenderOptions.Unmarshal(m, b)
}
func (m *DataCollectionFieldRenderOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCollectionFieldRenderOptions.Marshal(b, m, deterministic)
}
func (m *DataCollectionFieldRenderOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCollectionFieldRenderOptions.Merge(m, src)
}
func (m *DataCollectionFieldRenderOptions) XXX_Size() int {
	return xxx_messageInfo_DataCollectionFieldRenderOptions.Size(m)
}
func (m *DataCollectionFieldRenderOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCollectionFieldRenderOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DataCollectionFieldRenderOptions proto.InternalMessageInfo

func (m *DataCollectionFieldRenderOptions) GetHelpText() string {
	if m != nil {
		return m.HelpText
	}
	return ""
}

func (m *DataCollectionFieldRenderOptions) GetLocalizedHelpText() *LocalizedString {
	if m != nil {
		return m.LocalizedHelpText
	}
	return nil
}

func (m *DataCollectionFieldRenderOptions) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *DataCollectionFieldRenderOptions) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *DataCollectionFieldRenderOptions) GetSelectOptions() []*SelectOption {
	if m != nil {
		return m.SelectOptions
	}
	return nil
}

func (m *DataCollectionFieldRenderOptions) GetLocalizedPlaceholder() *LocalizedString {
	if m != nil {
		return m.LocalizedPlaceholder
	}
	return nil
}

func (m *DataCollectionFieldRenderOptions) GetAutocomplete() bool {
	if m != nil {
		return m.Autocomplete
	}
	return false
}

func (m *DataCollectionFieldRenderOptions) GetAddressRenderOptions() *AddressRenderOptions {
	if m != nil {
		return m.AddressRenderOptions
	}
	return nil
}

type AddressRenderOptions struct {
	Address1Label                string           `protobuf:"bytes,1,opt,name=address1Label,proto3" json:"address1Label,omitempty"`
	Address2Label                string           `protobuf:"bytes,2,opt,name=address2Label,proto3" json:"address2Label,omitempty"`
	CityLabel                    string           `protobuf:"bytes,3,opt,name=cityLabel,proto3" json:"cityLabel,omitempty"`
	CountryLabel                 string           `protobuf:"bytes,4,opt,name=countryLabel,proto3" json:"countryLabel,omitempty"`
	ZipLabel                     string           `protobuf:"bytes,5,opt,name=zipLabel,proto3" json:"zipLabel,omitempty"`
	Address1Placeholder          string           `protobuf:"bytes,6,opt,name=address1Placeholder,proto3" json:"address1Placeholder,omitempty"`
	Address2Placeholder          string           `protobuf:"bytes,7,opt,name=address2Placeholder,proto3" json:"address2Placeholder,omitempty"`
	CityPlaceholder              string           `protobuf:"bytes,8,opt,name=cityPlaceholder,proto3" json:"cityPlaceholder,omitempty"`
	CountryPlaceholder           string           `protobuf:"bytes,9,opt,name=countryPlaceholder,proto3" json:"countryPlaceholder,omitempty"`
	ZipPlaceholder               string           `protobuf:"bytes,10,opt,name=zipPlaceholder,proto3" json:"zipPlaceholder,omitempty"`
	LocalizedAddress1Label       *LocalizedString `protobuf:"bytes,11,opt,name=localizedAddress1Label,proto3" json:"localizedAddress1Label,omitempty"`
	LocalizedAddress2Label       *LocalizedString `protobuf:"bytes,12,opt,name=localizedAddress2Label,proto3" json:"localizedAddress2Label,omitempty"`
	LocalizedCityLabel           *LocalizedString `protobuf:"bytes,13,opt,name=localizedCityLabel,proto3" json:"localizedCityLabel,omitempty"`
	LocalizedCountryLabel        *LocalizedString `protobuf:"bytes,14,opt,name=localizedCountryLabel,proto3" json:"localizedCountryLabel,omitempty"`
	LocalizedZipLabel            *LocalizedString `protobuf:"bytes,15,opt,name=localizedZipLabel,proto3" json:"localizedZipLabel,omitempty"`
	LocalizedAddress1Placeholder *LocalizedString `protobuf:"bytes,16,opt,name=localizedAddress1Placeholder,proto3" json:"localizedAddress1Placeholder,omitempty"`
	LocalizedAddress2Placeholder *LocalizedString `protobuf:"bytes,17,opt,name=localizedAddress2Placeholder,proto3" json:"localizedAddress2Placeholder,omitempty"`
	LocalizedCityPlaceholder     *LocalizedString `protobuf:"bytes,18,opt,name=localizedCityPlaceholder,proto3" json:"localizedCityPlaceholder,omitempty"`
	LocalizedCountryPlaceholder  *LocalizedString `protobuf:"bytes,19,opt,name=localizedCountryPlaceholder,proto3" json:"localizedCountryPlaceholder,omitempty"`
	LocalizedZipPlaceholder      *LocalizedString `protobuf:"bytes,20,opt,name=localizedZipPlaceholder,proto3" json:"localizedZipPlaceholder,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}         `json:"-"`
	XXX_unrecognized             []byte           `json:"-"`
	XXX_sizecache                int32            `json:"-"`
}

func (m *AddressRenderOptions) Reset()         { *m = AddressRenderOptions{} }
func (m *AddressRenderOptions) String() string { return proto.CompactTextString(m) }
func (*AddressRenderOptions) ProtoMessage()    {}
func (*AddressRenderOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{17}
}

func (m *AddressRenderOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressRenderOptions.Unmarshal(m, b)
}
func (m *AddressRenderOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressRenderOptions.Marshal(b, m, deterministic)
}
func (m *AddressRenderOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRenderOptions.Merge(m, src)
}
func (m *AddressRenderOptions) XXX_Size() int {
	return xxx_messageInfo_AddressRenderOptions.Size(m)
}
func (m *AddressRenderOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRenderOptions.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRenderOptions proto.InternalMessageInfo

func (m *AddressRenderOptions) GetAddress1Label() string {
	if m != nil {
		return m.Address1Label
	}
	return ""
}

func (m *AddressRenderOptions) GetAddress2Label() string {
	if m != nil {
		return m.Address2Label
	}
	return ""
}

func (m *AddressRenderOptions) GetCityLabel() string {
	if m != nil {
		return m.CityLabel
	}
	return ""
}

func (m *AddressRenderOptions) GetCountryLabel() string {
	if m != nil {
		return m.CountryLabel
	}
	return ""
}

func (m *AddressRenderOptions) GetZipLabel() string {
	if m != nil {
		return m.ZipLabel
	}
	return ""
}

func (m *AddressRenderOptions) GetAddress1Placeholder() string {
	if m != nil {
		return m.Address1Placeholder
	}
	return ""
}

func (m *AddressRenderOptions) GetAddress2Placeholder() string {
	if m != nil {
		return m.Address2Placeholder
	}
	return ""
}

func (m *AddressRenderOptions) GetCityPlaceholder() string {
	if m != nil {
		return m.CityPlaceholder
	}
	return ""
}

func (m *AddressRenderOptions) GetCountryPlaceholder() string {
	if m != nil {
		return m.CountryPlaceholder
	}
	return ""
}

func (m *AddressRenderOptions) GetZipPlaceholder() string {
	if m != nil {
		return m.ZipPlaceholder
	}
	return ""
}

func (m *AddressRenderOptions) GetLocalizedAddress1Label() *LocalizedString {
	if m != nil {
		return m.LocalizedAddress1Label
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedAddress2Label() *LocalizedString {
	if m != nil {
		return m.LocalizedAddress2Label
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedCityLabel() *LocalizedString {
	if m != nil {
		return m.LocalizedCityLabel
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedCountryLabel() *LocalizedString {
	if m != nil {
		return m.LocalizedCountryLabel
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedZipLabel() *LocalizedString {
	if m != nil {
		return m.LocalizedZipLabel
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedAddress1Placeholder() *LocalizedString {
	if m != nil {
		return m.LocalizedAddress1Placeholder
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedAddress2Placeholder() *LocalizedString {
	if m != nil {
		return m.LocalizedAddress2Placeholder
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedCityPlaceholder() *LocalizedString {
	if m != nil {
		return m.LocalizedCityPlaceholder
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedCountryPlaceholder() *LocalizedString {
	if m != nil {
		return m.LocalizedCountryPlaceholder
	}
	return nil
}

func (m *AddressRenderOptions) GetLocalizedZipPlaceholder() *LocalizedString {
	if m != nil {
		return m.LocalizedZipPlaceholder
	}
	return nil
}

// Controls the sharing settings for the program. Sharing settings only apply to Apple Wallet.
type Sharing struct {
	// If not disabled will show the 'Share Pass' button on the back of an Apple Wallet pass. Setting a url and description will redirect sharing to a URL (such as a sign-up or info url) instead of sharing the pass.
	ProhibitSharing bool `protobuf:"varint,1,opt,name=prohibitSharing,proto3" json:"prohibitSharing,omitempty"`
	// If provided will allow for a custom share URL to be triggered from 'Share Pass' butto.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// If provided will allow for a custom description text to be inserted in the sharing message.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Sharing description in localized language.
	LocalizedDescription *LocalizedString `protobuf:"bytes,4,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Sharing) Reset()         { *m = Sharing{} }
func (m *Sharing) String() string { return proto.CompactTextString(m) }
func (*Sharing) ProtoMessage()    {}
func (*Sharing) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{18}
}

func (m *Sharing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sharing.Unmarshal(m, b)
}
func (m *Sharing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sharing.Marshal(b, m, deterministic)
}
func (m *Sharing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sharing.Merge(m, src)
}
func (m *Sharing) XXX_Size() int {
	return xxx_messageInfo_Sharing.Size(m)
}
func (m *Sharing) XXX_DiscardUnknown() {
	xxx_messageInfo_Sharing.DiscardUnknown(m)
}

var xxx_messageInfo_Sharing proto.InternalMessageInfo

func (m *Sharing) GetProhibitSharing() bool {
	if m != nil {
		return m.ProhibitSharing
	}
	return false
}

func (m *Sharing) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Sharing) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Sharing) GetLocalizedDescription() *LocalizedString {
	if m != nil {
		return m.LocalizedDescription
	}
	return nil
}

type DefaultTemplateRequest struct {
	// @tag: validateGeneric:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	Revision             uint32   `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefaultTemplateRequest) Reset()         { *m = DefaultTemplateRequest{} }
func (m *DefaultTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*DefaultTemplateRequest) ProtoMessage()    {}
func (*DefaultTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51b61a9c8d60495c, []int{19}
}

func (m *DefaultTemplateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultTemplateRequest.Unmarshal(m, b)
}
func (m *DefaultTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultTemplateRequest.Marshal(b, m, deterministic)
}
func (m *DefaultTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultTemplateRequest.Merge(m, src)
}
func (m *DefaultTemplateRequest) XXX_Size() int {
	return xxx_messageInfo_DefaultTemplateRequest.Size(m)
}
func (m *DefaultTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultTemplateRequest proto.InternalMessageInfo

func (m *DefaultTemplateRequest) GetProtocol() PassProtocol {
	if m != nil {
		return m.Protocol
	}
	return PassProtocol_RAW_PROTOCOL
}

func (m *DefaultTemplateRequest) GetRevision() uint32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func init() {
	proto.RegisterEnum("io.ApplePassType", ApplePassType_name, ApplePassType_value)
	proto.RegisterEnum("io.GooglePayPassType", GooglePayPassType_name, GooglePayPassType_value)
	proto.RegisterEnum("io.BarcodeType", BarcodeType_name, BarcodeType_value)
	proto.RegisterEnum("io.FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("io.StandardFields", StandardFields_name, StandardFields_value)
	proto.RegisterEnum("io.TextAlignment", TextAlignment_name, TextAlignment_value)
	proto.RegisterEnum("io.DateTimeStyle", DateTimeStyle_name, DateTimeStyle_value)
	proto.RegisterEnum("io.LinkDetector", LinkDetector_name, LinkDetector_value)
	proto.RegisterEnum("io.NumberStyle", NumberStyle_name, NumberStyle_value)
	proto.RegisterEnum("io.TransitType", TransitType_name, TransitType_value)
	proto.RegisterEnum("io.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("io.DataStyle", DataStyle_name, DataStyle_value)
	proto.RegisterEnum("io.FieldSection", FieldSection_name, FieldSection_value)
	proto.RegisterEnum("io.GooglePayField", GooglePayField_name, GooglePayField_value)
	proto.RegisterEnum("io.ExpiryType", ExpiryType_name, ExpiryType_value)
	proto.RegisterType((*SelectOption)(nil), "io.SelectOption")
	proto.RegisterType((*Barcode)(nil), "io.Barcode")
	proto.RegisterType((*PassTemplate)(nil), "io.PassTemplate")
	proto.RegisterType((*ExpirySettings)(nil), "io.ExpirySettings")
	proto.RegisterType((*AppleWalletSettings)(nil), "io.AppleWalletSettings")
	proto.RegisterType((*GooglePaySettings)(nil), "io.GooglePaySettings")
	proto.RegisterType((*Data)(nil), "io.Data")
	proto.RegisterType((*DataCollectionPageSettings)(nil), "io.DataCollectionPageSettings")
	proto.RegisterType((*PassTemplateResponse)(nil), "io.PassTemplateResponse")
	proto.RegisterType((*Colors)(nil), "io.Colors")
	proto.RegisterType((*CopyTemplateInput)(nil), "io.CopyTemplateInput")
	proto.RegisterType((*NFC)(nil), "io.NFC")
	proto.RegisterType((*DataField)(nil), "io.DataField")
	proto.RegisterType((*AppleWalletFieldRenderOptions)(nil), "io.AppleWalletFieldRenderOptions")
	proto.RegisterType((*GooglePayFieldRenderOptions)(nil), "io.GooglePayFieldRenderOptions")
	proto.RegisterType((*PositionSettings)(nil), "io.PositionSettings")
	proto.RegisterType((*DataCollectionFieldRenderOptions)(nil), "io.DataCollectionFieldRenderOptions")
	proto.RegisterType((*AddressRenderOptions)(nil), "io.AddressRenderOptions")
	proto.RegisterType((*Sharing)(nil), "io.Sharing")
	proto.RegisterType((*DefaultTemplateRequest)(nil), "io.DefaultTemplateRequest")
}

func init() { proto.RegisterFile("io/common/template.proto", fileDescriptor_51b61a9c8d60495c) }

var fileDescriptor_51b61a9c8d60495c = []byte{
	// 4529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7a, 0xc9, 0x93, 0xe3, 0x46,
	0x76, 0x77, 0x73, 0xa9, 0x85, 0xaf, 0xb6, 0xac, 0xac, 0xaa, 0x6e, 0xf6, 0x22, 0x89, 0x43, 0x6d,
	0xad, 0x52, 0xab, 0xea, 0xeb, 0xfe, 0x64, 0xcf, 0x8c, 0x26, 0x42, 0x1e, 0x14, 0x08, 0xb2, 0x10,
	0x0d, 0x02, 0x50, 0x02, 0x6c, 0x75, 0x75, 0x4c, 0x98, 0x46, 0x91, 0x28, 0x36, 0xa6, 0x59, 0x00,
	0x05, 0x80, 0x92, 0x4a, 0x27, 0xef, 0xdb, 0xd8, 0x96, 0xac, 0x89, 0xb9, 0xf8, 0xe4, 0xb3, 0xf7,
	0x25, 0xc2, 0x07, 0xc7, 0xc4, 0x5c, 0xbd, 0x1f, 0xec, 0xbf, 0xc2, 0xf6, 0xc9, 0x07, 0xdb, 0xf2,
	0x3a, 0x76, 0x64, 0x26, 0x00, 0x02, 0x20, 0x58, 0x5d, 0xba, 0xf8, 0x22, 0x11, 0xef, 0xfd, 0xde,
	0xcb, 0x97, 0x99, 0x6f, 0xcd, 0x6a, 0xa8, 0x3b, 0xde, 0xe1, 0xc0, 0x3b, 0x3f, 0xf7, 0xdc, 0xc3,
	0xd0, 0x3e, 0x9f, 0x8c, 0xad, 0xd0, 0x3e, 0x98, 0xf8, 0x5e, 0xe8, 0xe1, 0xb2, 0xe3, 0xdd, 0xba,
	0xed, 0x78, 0x87, 0xd6, 0xc4, 0x89, 0x10, 0x7d, 0xef, 0xf4, 0xdb, 0xf6, 0x20, 0x0c, 0x38, 0xe0,
	0xd6, 0x9d, 0x99, 0xe8, 0xd8, 0x1b, 0x58, 0x63, 0xe7, 0x13, 0x2b, 0x74, 0x3c, 0x37, 0xe2, 0xde,
	0x9c, 0x71, 0x19, 0x61, 0xe0, 0x8d, 0x83, 0x42, 0xd6, 0xc7, 0xce, 0xb9, 0x13, 0x5e, 0x44, 0xac,
	0xbd, 0x94, 0x4e, 0xc7, 0x7d, 0x16, 0x4b, 0xec, 0x3a, 0xde, 0xa1, 0x73, 0x6e, 0x8d, 0x6c, 0xfe,
	0xdf, 0x88, 0x7a, 0x8f, 0x2b, 0x7e, 0x6b, 0x64, 0xbb, 0x6f, 0x05, 0x1f, 0x59, 0xa3, 0x91, 0xed,
	0x1f, 0x7a, 0x13, 0x6a, 0x43, 0x70, 0x68, 0xb9, 0xae, 0x17, 0x32, 0x7b, 0x62, 0x1d, 0x2f, 0x8d,
	0x3c, 0x6f, 0x34, 0xb6, 0xb9, 0x35, 0xa7, 0xd3, 0xb3, 0xc3, 0xd0, 0x39, 0xb7, 0x83, 0xd0, 0x3a,
	0x9f, 0x70, 0x40, 0xf3, 0xb7, 0x4b, 0xb0, 0x6e, 0xd8, 0x63, 0x7b, 0x10, 0x6a, 0x4c, 0x09, 0x6e,
	0xc2, 0xfa, 0xd8, 0x09, 0x42, 0xdd, 0x77, 0x3c, 0xdf, 0x09, 0x2f, 0xea, 0xa5, 0x46, 0xe9, 0xee,
	0x06, 0xc9, 0xd0, 0xf0, 0x1d, 0xa8, 0x85, 0xf6, 0xc7, 0xa1, 0x62, 0x9d, 0xda, 0xe3, 0x7a, 0xb9,
	0x51, 0xba, 0x5b, 0x23, 0x33, 0x02, 0x16, 0x01, 0x47, 0x47, 0x63, 0x0f, 0xcd, 0x04, 0x56, 0x69,
	0x94, 0xee, 0xae, 0x3d, 0xd8, 0x39, 0x70, 0xbc, 0x03, 0x25, 0xe6, 0x1a, 0xa1, 0xef, 0xb8, 0x23,
	0x52, 0x00, 0xc7, 0xbb, 0xb0, 0xf4, 0xa1, 0x35, 0x9e, 0xda, 0xf5, 0x2a, 0x53, 0xcf, 0x3f, 0x9a,
	0x7f, 0x5b, 0x82, 0x95, 0x23, 0xcb, 0x1f, 0x78, 0x43, 0x1b, 0xd7, 0x61, 0x65, 0x62, 0x5d, 0x8c,
	0x3d, 0x6b, 0xc8, 0x6c, 0xac, 0x91, 0xf8, 0x13, 0xbf, 0x0e, 0xcb, 0x67, 0x9e, 0x7f, 0x6e, 0x85,
	0xcc, 0xb6, 0xcd, 0x07, 0x5b, 0x74, 0xd1, 0x48, 0xcc, 0xbc, 0x98, 0xd8, 0x24, 0x62, 0x53, 0x15,
	0xd6, 0x38, 0xa4, 0x8b, 0x32, 0xf3, 0x6a, 0x24, 0xfe, 0xc4, 0x3f, 0x06, 0x28, 0x31, 0x4a, 0x88,
	0x20, 0xd5, 0xc5, 0x3b, 0x98, 0x03, 0xe3, 0xbb, 0xb0, 0x75, 0x6e, 0x07, 0x81, 0x35, 0xb2, 0x25,
	0x77, 0xe0, 0x0d, 0x1d, 0x77, 0x54, 0x5f, 0x62, 0x4b, 0xe4, 0xc9, 0xcd, 0xef, 0xd5, 0x60, 0x5d,
	0xb7, 0x82, 0xc0, 0x8c, 0x3c, 0x11, 0x6f, 0x42, 0xd9, 0x89, 0xf7, 0x54, 0x76, 0x86, 0x18, 0x43,
	0xd5, 0xb5, 0xce, 0xed, 0xe8, 0xa0, 0xd9, 0x6f, 0x7c, 0x0f, 0x56, 0x63, 0x07, 0x63, 0xa6, 0x6f,
	0x3e, 0x40, 0xd4, 0x2e, 0xaa, 0x47, 0x8f, 0xe8, 0x24, 0x41, 0xe0, 0x5b, 0xb0, 0xea, 0xdb, 0x1f,
	0x3a, 0x81, 0xe3, 0xb9, 0x6c, 0x17, 0x1b, 0x24, 0xf9, 0xc6, 0xef, 0xc0, 0xd6, 0xd0, 0x3e, 0xb3,
	0xa6, 0xe3, 0x50, 0xb1, 0xdc, 0xd1, 0xd4, 0x1a, 0xd9, 0xcc, 0xd0, 0x48, 0x61, 0x4c, 0x13, 0xbd,
	0xa1, 0x4d, 0xf2, 0x40, 0xbc, 0x0f, 0xc8, 0xf3, 0x47, 0x96, 0x1b, 0x05, 0x81, 0x4a, 0xad, 0x5c,
	0x66, 0x56, 0xce, 0xd1, 0xf1, 0x7b, 0x70, 0x33, 0x39, 0x24, 0x2d, 0x2f, 0xb4, 0xb2, 0xf8, 0x68,
	0x17, 0x4b, 0xe1, 0x06, 0xac, 0x0d, 0xed, 0x60, 0xe0, 0x3b, 0xcc, 0x73, 0xeb, 0xab, 0x6c, 0xe5,
	0x34, 0x09, 0x77, 0x60, 0x37, 0x11, 0x6f, 0xa5, 0xa0, 0xb5, 0xc5, 0xeb, 0x15, 0x0a, 0xe0, 0x3b,
	0x50, 0x1d, 0x5a, 0xa1, 0x55, 0x07, 0x26, 0xb8, 0x4a, 0x05, 0x5b, 0x56, 0x68, 0x11, 0x46, 0xc5,
	0xfb, 0xb0, 0xca, 0x42, 0x54, 0x1e, 0x06, 0xf5, 0x35, 0x86, 0x58, 0xa7, 0x08, 0x39, 0xa2, 0x1d,
	0x5f, 0x23, 0x09, 0x9f, 0x3a, 0x27, 0xfb, 0x1d, 0xd4, 0xd7, 0x19, 0x72, 0x23, 0x41, 0x52, 0x85,
	0xc7, 0xd7, 0x48, 0xc4, 0xc6, 0x4d, 0x58, 0x1e, 0x78, 0x63, 0xcf, 0x0f, 0xea, 0x1b, 0x0c, 0x08,
	0x14, 0x28, 0x32, 0x0a, 0x89, 0x38, 0xf8, 0x55, 0x58, 0x39, 0xe5, 0x7e, 0x5d, 0xdf, 0x64, 0xa0,
	0xb5, 0x94, 0xab, 0x93, 0x98, 0x87, 0x5f, 0x07, 0x70, 0xcf, 0x06, 0x92, 0x6b, 0x9d, 0x8e, 0xed,
	0x61, 0x7d, 0x8b, 0x21, 0x57, 0x28, 0x52, 0x6d, 0x8b, 0x24, 0xc5, 0xa2, 0xfa, 0x82, 0xa7, 0x16,
	0x3d, 0x87, 0x3a, 0x9a, 0xe9, 0x33, 0x38, 0x89, 0xc4, 0x3c, 0x2c, 0xc3, 0x8e, 0x35, 0x99, 0x8c,
	0xed, 0xf7, 0xad, 0xf1, 0xd8, 0x0e, 0x0d, 0x3b, 0x0c, 0x1d, 0x77, 0x14, 0xd4, 0xb7, 0x99, 0xc8,
	0x0d, 0x2a, 0x22, 0xcc, 0xb3, 0x49, 0x91, 0x0c, 0x16, 0x61, 0x9b, 0xa7, 0x28, 0xdd, 0xba, 0x48,
	0x14, 0x61, 0xa6, 0x68, 0x8f, 0x2a, 0xea, 0xe4, 0x99, 0x64, 0x1e, 0x8f, 0x7f, 0x04, 0x6a, 0xf4,
	0xd6, 0x58, 0xe2, 0xab, 0xef, 0x34, 0x2a, 0x77, 0xd7, 0x78, 0xcc, 0x77, 0x74, 0x43, 0x89, 0xe8,
	0x47, 0xcb, 0x9f, 0x0b, 0x95, 0xdf, 0x2c, 0x01, 0x99, 0x21, 0xf1, 0x3d, 0x58, 0x39, 0xb5, 0xad,
	0x01, 0x15, 0xda, 0x65, 0x42, 0xec, 0x88, 0x8f, 0x18, 0x29, 0xc1, 0xc7, 0x10, 0xfc, 0x1a, 0x2c,
	0xb1, 0xec, 0x5c, 0xdf, 0x63, 0x58, 0xe6, 0x03, 0x8a, 0xe3, 0x3e, 0x4b, 0x90, 0x9c, 0x4d, 0x83,
	0x8d, 0x26, 0xd9, 0x4f, 0x3c, 0xd7, 0xae, 0x5f, 0x67, 0x2e, 0x99, 0x7c, 0xe3, 0x77, 0x60, 0xd3,
	0xfe, 0x78, 0xe2, 0xf8, 0xb3, 0xad, 0xde, 0x60, 0x5b, 0xc5, 0x54, 0x99, 0x94, 0xe1, 0x90, 0x1c,
	0xf2, 0x9d, 0xfe, 0xe7, 0xc2, 0xb7, 0xe0, 0xc9, 0xfe, 0x1a, 0x8d, 0xf1, 0x46, 0xcb, 0x0e, 0x9c,
	0x91, 0xfb, 0xe0, 0xeb, 0xfc, 0xff, 0x0d, 0xdf, 0x1e, 0x78, 0xfe, 0xb0, 0x71, 0xe6, 0xf9, 0x8d,
	0xf0, 0xa9, 0xdd, 0x60, 0xa7, 0xdf, 0xe0, 0x27, 0xdd, 0xb0, 0xdc, 0x61, 0x83, 0x9f, 0x62, 0x43,
	0xb7, 0x2e, 0x1a, 0x13, 0x2b, 0x08, 0xec, 0xe0, 0xe0, 0xef, 0x4a, 0xf9, 0x68, 0x3e, 0xda, 0x80,
	0x35, 0xe6, 0x87, 0x42, 0x10, 0xd8, 0x61, 0xd0, 0xfc, 0xe3, 0x12, 0x6c, 0x66, 0x4d, 0xc2, 0x07,
	0x00, 0xdc, 0x28, 0x9a, 0x45, 0x59, 0x86, 0xda, 0x7c, 0xb0, 0x39, 0x33, 0x9d, 0xe5, 0xd6, 0x14,
	0x02, 0xbf, 0x0d, 0x5b, 0x67, 0xce, 0xc7, 0xf6, 0x90, 0xb3, 0x5b, 0x56, 0xc8, 0x93, 0xd8, 0x2c,
	0x80, 0xec, 0xe3, 0x6b, 0x24, 0x0f, 0xc1, 0xf7, 0x00, 0x31, 0x1d, 0xb6, 0x70, 0x16, 0xda, 0xfe,
	0xe3, 0x96, 0x75, 0x11, 0xb0, 0x1c, 0xb7, 0x71, 0x7c, 0x8d, 0xcc, 0x71, 0xa8, 0xd5, 0x7c, 0x45,
	0xcd, 0xb5, 0xbd, 0xb3, 0xe6, 0x17, 0x65, 0xd8, 0x29, 0x70, 0x3e, 0xfc, 0x16, 0xac, 0xd2, 0x9d,
	0xa7, 0x0c, 0xdf, 0x4e, 0xfc, 0x54, 0x8f, 0x18, 0x24, 0x81, 0xd0, 0x4b, 0x9c, 0x06, 0xb6, 0x2f,
	0xbb, 0x67, 0x5e, 0x94, 0x77, 0x93, 0x6f, 0x5a, 0x21, 0xad, 0xc9, 0x44, 0xb1, 0xa6, 0xee, 0xe0,
	0x69, 0xcf, 0x1f, 0x47, 0xa5, 0x23, 0x43, 0xc3, 0xef, 0xc2, 0x2d, 0x2b, 0x08, 0xbc, 0x81, 0x63,
	0x85, 0x34, 0xb3, 0x78, 0xbe, 0x2d, 0x0f, 0x6d, 0x37, 0x74, 0xce, 0x1c, 0xdb, 0x0f, 0xea, 0xd5,
	0x46, 0xe5, 0xee, 0x06, 0xb9, 0x04, 0x41, 0x53, 0xdb, 0xb9, 0xf5, 0x71, 0xcb, 0x09, 0x42, 0xcb,
	0x1d, 0xf0, 0x8c, 0xbc, 0x41, 0xd2, 0x24, 0x7c, 0x0f, 0xb6, 0xad, 0xc9, 0x84, 0x09, 0x8a, 0xde,
	0xd4, 0x0d, 0x7d, 0xc7, 0x0e, 0xea, 0xcb, 0x8d, 0xca, 0xdd, 0x1a, 0x99, 0x67, 0xe0, 0xfb, 0xb0,
	0x16, 0xfa, 0x96, 0x1b, 0x38, 0x21, 0x3b, 0x81, 0x95, 0x59, 0x5d, 0x34, 0x67, 0x64, 0x92, 0xc6,
	0xe0, 0x03, 0xc0, 0x23, 0xdf, 0x9b, 0x4e, 0x1c, 0x77, 0x34, 0xb3, 0x2c, 0x4a, 0xb2, 0x05, 0x9c,
	0x66, 0x1b, 0xb6, 0xe7, 0x82, 0x15, 0xdf, 0x9f, 0x3b, 0xf6, 0x6c, 0x54, 0xcf, 0x1f, 0x7d, 0xf3,
	0x7b, 0x25, 0xa8, 0xd2, 0x54, 0x88, 0xdf, 0x02, 0xa0, 0xd9, 0xb5, 0xed, 0xd8, 0xe3, 0x61, 0x50,
	0x2f, 0xb1, 0xa8, 0xdb, 0x88, 0x33, 0x2f, 0xa3, 0x92, 0x14, 0x00, 0xff, 0x38, 0xdc, 0xa2, 0x5f,
	0xa2, 0x37, 0xa6, 0xdd, 0x8c, 0xe3, 0xb9, 0xba, 0x35, 0xb2, 0x93, 0x38, 0xe3, 0x7e, 0xf7, 0x62,
	0x2c, 0x5e, 0x8c, 0x22, 0x97, 0x68, 0x68, 0xfe, 0x60, 0x09, 0x6e, 0x2d, 0x16, 0xa5, 0x0d, 0x4b,
	0xe8, 0x84, 0x63, 0x3b, 0x2a, 0xdc, 0xfc, 0x03, 0x7f, 0x03, 0x36, 0x67, 0xcd, 0x0d, 0x63, 0x97,
	0x17, 0x97, 0x9e, 0x1c, 0x34, 0x5f, 0xdf, 0x2a, 0x57, 0xaf, 0x6f, 0xd5, 0x2f, 0x5b, 0xdf, 0xf6,
	0x01, 0x05, 0xd3, 0xd3, 0x73, 0x27, 0x3c, 0x9a, 0x86, 0xa1, 0xe7, 0xb2, 0x7e, 0x87, 0xf7, 0x2b,
	0x73, 0xf4, 0x4c, 0x25, 0x37, 0xf2, 0x42, 0xcb, 0x57, 0xa9, 0xe4, 0x79, 0x29, 0xba, 0x53, 0xda,
	0xb9, 0x39, 0xee, 0x88, 0x29, 0x59, 0xe1, 0x3b, 0x4d, 0x91, 0x32, 0x3b, 0x55, 0x52, 0xd0, 0xd5,
	0xab, 0xec, 0x34, 0x25, 0x40, 0xa3, 0x37, 0x7c, 0x6a, 0xb9, 0xcf, 0x4e, 0xbc, 0x29, 0x53, 0x50,
	0xe3, 0xd1, 0x9b, 0xa6, 0x61, 0x19, 0xf6, 0x66, 0x57, 0x91, 0x06, 0xc3, 0xe2, 0xd5, 0x8a, 0x25,
	0xf0, 0xff, 0x83, 0x9d, 0x09, 0x4d, 0xae, 0xd6, 0xe0, 0x19, 0x8d, 0x19, 0x77, 0xc8, 0x2a, 0x38,
	0xeb, 0x12, 0x6a, 0xa4, 0x88, 0x85, 0xdf, 0x87, 0x3b, 0x89, 0x2a, 0xbd, 0x40, 0x74, 0x7d, 0xb1,
	0x0d, 0x97, 0x0a, 0x36, 0xbf, 0x5f, 0x86, 0xdd, 0x74, 0xa3, 0x49, 0xec, 0x60, 0xe2, 0xb9, 0x01,
	0x6b, 0x26, 0xe3, 0x31, 0x88, 0x79, 0xef, 0xda, 0xac, 0x99, 0x4c, 0xb0, 0x09, 0x82, 0xb6, 0xa3,
	0x6a, 0xaa, 0x1d, 0x65, 0x9d, 0xd8, 0x2b, 0xb0, 0xe1, 0x7d, 0xe4, 0xda, 0x7e, 0x2f, 0xb0, 0x7d,
	0xd6, 0xab, 0x72, 0x5f, 0xcd, 0x12, 0x33, 0x4d, 0x6b, 0xf5, 0x4b, 0x35, 0xad, 0x4b, 0xb9, 0xa6,
	0xf5, 0x6b, 0x50, 0x1b, 0xf8, 0x36, 0xcd, 0x9c, 0x42, 0xec, 0x72, 0xb7, 0x0e, 0x78, 0x5f, 0x70,
	0x10, 0x8f, 0x3a, 0x07, 0x66, 0x3c, 0xea, 0x90, 0x19, 0x98, 0x4a, 0x4e, 0x27, 0xc3, 0x48, 0x72,
	0xe5, 0xf9, 0x92, 0x09, 0xb8, 0xf9, 0x59, 0x09, 0x96, 0x79, 0xfb, 0x45, 0x9b, 0xfb, 0xd3, 0xdc,
	0xad, 0xf0, 0xa8, 0xcf, 0x93, 0xf1, 0x8b, 0x00, 0x63, 0x3a, 0xcf, 0x70, 0x10, 0x3f, 0xb2, 0x14,
	0x25, 0x9e, 0xa4, 0x38, 0xbb, 0x32, 0x9b, 0xa4, 0x12, 0xe9, 0x20, 0xf4, 0x9d, 0x09, 0x67, 0xf3,
	0x49, 0x28, 0x45, 0x69, 0x76, 0x60, 0x5b, 0xf4, 0x26, 0x17, 0xf1, 0x25, 0xc9, 0xee, 0x64, 0x1a,
	0xce, 0x8d, 0x0f, 0xd4, 0xe1, 0x23, 0x40, 0xea, 0xde, 0x32, 0xb4, 0x66, 0x1f, 0x2a, 0x6a, 0x5b,
	0xa4, 0xf3, 0x90, 0x1d, 0x35, 0x89, 0x54, 0x7e, 0x95, 0xc4, 0x9f, 0xf4, 0x82, 0x07, 0xb6, 0x4f,
	0x33, 0xfd, 0x80, 0x2e, 0x34, 0x8c, 0xb4, 0x64, 0x89, 0xe9, 0x91, 0xac, 0x92, 0x19, 0xc9, 0x9a,
	0xdf, 0x59, 0x81, 0x5a, 0x92, 0xb6, 0xe9, 0xbe, 0xa6, 0xae, 0xf3, 0xc1, 0x94, 0x1b, 0xc4, 0x4d,
	0x4d, 0x51, 0x28, 0x3f, 0x36, 0x2f, 0x59, 0x2a, 0x45, 0xc1, 0x6f, 0x42, 0xed, 0x8c, 0x2a, 0x62,
	0x65, 0x85, 0x8f, 0x3f, 0xac, 0x30, 0xb4, 0x63, 0x22, 0x99, 0xf1, 0xa9, 0x32, 0x27, 0x20, 0xf6,
	0x07, 0x53, 0xc7, 0xb7, 0x87, 0xec, 0x10, 0x57, 0x49, 0x8a, 0x42, 0x13, 0x37, 0xbb, 0x90, 0x28,
	0xdf, 0xf1, 0x8f, 0x4c, 0xe2, 0xe6, 0x03, 0xec, 0xf2, 0x55, 0x12, 0x37, 0x1f, 0x5e, 0xef, 0xc2,
	0x2a, 0x2d, 0x24, 0xa9, 0x52, 0xbb, 0x1e, 0x17, 0x1e, 0x5e, 0xec, 0x62, 0x2e, 0xbd, 0x9c, 0xa8,
	0x0d, 0x7b, 0xc4, 0xa6, 0x5d, 0x5e, 0x5e, 0x33, 0xb4, 0x4c, 0x36, 0x6a, 0xa5, 0xc1, 0xb5, 0xab,
	0x64, 0xa3, 0xb4, 0x04, 0x3d, 0x8b, 0x0f, 0xad, 0xb1, 0x33, 0x64, 0x0d, 0x30, 0xcb, 0x66, 0x35,
	0x92, 0xa2, 0x50, 0xc7, 0xa6, 0x6d, 0x8e, 0x68, 0xb9, 0x86, 0x1d, 0x2d, 0xb2, 0xc6, 0x0e, 0x2c,
	0x4f, 0xa6, 0x86, 0x0f, 0xa6, 0xbe, 0x6f, 0xbb, 0x83, 0x0b, 0x3a, 0x1b, 0xb2, 0xac, 0x54, 0x23,
	0x19, 0x1a, 0x1e, 0xc1, 0x0b, 0xa9, 0x96, 0x9f, 0x57, 0x6c, 0xdb, 0x1d, 0xda, 0x3e, 0x7f, 0x6a,
	0x88, 0x07, 0x9b, 0xaf, 0xe4, 0x06, 0x86, 0x79, 0x20, 0xb9, 0x5c, 0x0f, 0x9e, 0x40, 0x23, 0x5b,
	0xb8, 0x0b, 0xd6, 0xe2, 0xf3, 0xd1, 0x2b, 0xf3, 0x0d, 0x40, 0xc1, 0x72, 0xcf, 0xd5, 0x86, 0x5f,
	0x86, 0xa5, 0x29, 0x9d, 0xe2, 0xeb, 0x5b, 0x8d, 0x4a, 0xec, 0x7d, 0x3d, 0x4a, 0x60, 0xf7, 0xcb,
	0x79, 0xd8, 0x82, 0xdb, 0xc9, 0xac, 0x52, 0x60, 0x11, 0x9f, 0xb0, 0x5e, 0xca, 0xf4, 0x43, 0x05,
	0xc6, 0x5c, 0xa6, 0x03, 0xbf, 0x0d, 0x7b, 0x91, 0xaf, 0x98, 0x34, 0xa5, 0xd0, 0x76, 0x8f, 0xdf,
	0xc7, 0x36, 0xbb, 0x8f, 0x62, 0x66, 0xf3, 0x1f, 0x2b, 0xf0, 0xc2, 0xa5, 0x07, 0x8e, 0xbf, 0x0a,
	0x1b, 0x34, 0x0d, 0x09, 0x63, 0x67, 0xe4, 0x9e, 0xdb, 0x6e, 0xfc, 0x92, 0xc2, 0x7a, 0x66, 0x33,
	0xcd, 0x20, 0x59, 0x1c, 0xfe, 0x26, 0xa0, 0x89, 0x17, 0x38, 0x54, 0x4b, 0xd2, 0x7b, 0xf1, 0xa7,
	0x9f, 0x5d, 0x96, 0xeb, 0x73, 0x3c, 0x32, 0x87, 0x66, 0xa9, 0xe6, 0xa9, 0xe5, 0x8e, 0xec, 0x2e,
	0x7f, 0x28, 0x89, 0xf2, 0x5e, 0x96, 0x88, 0x1f, 0xc2, 0xf5, 0xc4, 0xc5, 0xc5, 0x0c, 0x7c, 0x69,
	0x71, 0x54, 0x2c, 0x10, 0xc1, 0x87, 0x50, 0xa3, 0x59, 0xde, 0x08, 0x2f, 0xc6, 0xfc, 0x01, 0x23,
	0xda, 0x29, 0x1d, 0x47, 0x68, 0x2d, 0x60, 0x0c, 0x32, 0xc3, 0x50, 0x81, 0x30, 0xa6, 0x47, 0x11,
	0x5e, 0x24, 0x90, 0x60, 0x68, 0xff, 0xed, 0x4e, 0xcf, 0x4f, 0x6d, 0x9f, 0x8b, 0xac, 0xce, 0xfa,
	0x6f, 0x75, 0x46, 0x26, 0x69, 0x0c, 0x6e, 0xc3, 0x5e, 0x30, 0x9d, 0x4c, 0x7c, 0x3b, 0x08, 0xe8,
	0x98, 0xd9, 0xb2, 0x43, 0xee, 0x8d, 0xf5, 0x1a, 0x73, 0x39, 0x14, 0xcf, 0x9f, 0x9c, 0xe1, 0xf9,
	0xa4, 0x18, 0xde, 0xfc, 0xb4, 0x04, 0xb7, 0x2f, 0xf1, 0x2f, 0xfc, 0xcd, 0xd4, 0x04, 0x1e, 0x5f,
	0x4f, 0xd4, 0xab, 0xe3, 0x02, 0xdf, 0x9c, 0x07, 0xd3, 0x49, 0x81, 0x3a, 0x41, 0xd7, 0x1b, 0x4e,
	0xc7, 0x76, 0xf2, 0x70, 0x58, 0x66, 0x35, 0xbb, 0x80, 0xd3, 0x7c, 0x02, 0x28, 0xef, 0x07, 0x78,
	0x1f, 0x56, 0x82, 0x68, 0x7f, 0xa5, 0x59, 0x6b, 0xc0, 0x96, 0x34, 0x38, 0x9d, 0xc4, 0x00, 0xda,
	0x19, 0x4c, 0xb2, 0xab, 0x24, 0xdf, 0xcd, 0x3f, 0xad, 0x40, 0xe3, 0x79, 0xf1, 0x4d, 0x15, 0x3c,
	0xb5, 0xc7, 0x13, 0xd6, 0xd2, 0xf1, 0xea, 0x93, 0x7c, 0x63, 0x01, 0xb6, 0x13, 0x2f, 0x39, 0x8e,
	0x41, 0x97, 0x34, 0xed, 0xf3, 0x68, 0x96, 0xd4, 0x9d, 0x60, 0x32, 0xb6, 0x2e, 0x34, 0x7f, 0x68,
	0xf3, 0xba, 0xbe, 0x44, 0x32, 0x34, 0xda, 0xf1, 0x4e, 0xc6, 0xd6, 0xc0, 0x7e, 0xea, 0x8d, 0x29,
	0x84, 0xd7, 0x9e, 0x34, 0x09, 0xff, 0x28, 0x6c, 0x04, 0xa9, 0x87, 0x59, 0x3e, 0xdc, 0x45, 0xad,
	0x59, 0xfa, 0xc5, 0x96, 0x64, 0x61, 0x99, 0x4e, 0x59, 0x4f, 0x2d, 0xb1, 0x72, 0x95, 0x4e, 0x39,
	0x25, 0xc0, 0xe6, 0xdc, 0x29, 0xed, 0xc5, 0xce, 0x27, 0x63, 0x3b, 0xe4, 0x4e, 0xbb, 0x4a, 0x32,
	0x34, 0xac, 0xc0, 0xae, 0x35, 0x1c, 0x52, 0xa7, 0xcb, 0xe6, 0x36, 0x5e, 0x9a, 0xea, 0x2c, 0xb3,
	0x17, 0xf0, 0x49, 0xa1, 0x54, 0xf3, 0xfb, 0x35, 0xd8, 0x2d, 0x82, 0xd3, 0x9c, 0x10, 0x09, 0xdc,
	0xe7, 0xc5, 0x98, 0xdf, 0x5a, 0x96, 0x98, 0x42, 0x3d, 0x48, 0x3f, 0x4d, 0x67, 0x89, 0xb4, 0xe5,
	0x1a, 0x38, 0xe1, 0xc5, 0xec, 0x55, 0xba, 0x46, 0x66, 0x04, 0x56, 0xd7, 0x78, 0xa6, 0xe4, 0x80,
	0x6a, 0x54, 0xd7, 0x52, 0x34, 0xea, 0x3e, 0x9f, 0x38, 0x13, 0x25, 0xd5, 0x34, 0x24, 0xdf, 0xb4,
	0xdf, 0x8f, 0x8d, 0x4a, 0x1f, 0x3e, 0x7f, 0x15, 0x2d, 0x62, 0xa5, 0x24, 0x1e, 0xe4, 0xaf, 0x6b,
	0x26, 0x91, 0x66, 0xd1, 0x2a, 0x4d, 0x0d, 0x4e, 0xa3, 0x79, 0xdf, 0x90, 0x27, 0xd3, 0xc8, 0x8c,
	0x2c, 0x4f, 0x83, 0xf9, 0xc8, 0x53, 0xc0, 0xc1, 0xaf, 0xc1, 0xe6, 0x27, 0xce, 0x24, 0x8d, 0xe5,
	0x3d, 0x42, 0x8e, 0x9a, 0xc9, 0xbe, 0x42, 0xe6, 0x62, 0xd6, 0xae, 0x92, 0x7d, 0x33, 0x22, 0x45,
	0xca, 0xa2, 0xfb, 0x5b, 0xff, 0x12, 0xca, 0x1e, 0xcc, 0xff, 0xf1, 0x41, 0x4c, 0xae, 0x79, 0xe3,
	0x2a, 0x7f, 0x7c, 0x48, 0xe0, 0x99, 0x8e, 0x4b, 0x4c, 0x7b, 0xc3, 0xe6, 0x55, 0x3a, 0xae, 0xb4,
	0x44, 0x26, 0x9d, 0x3c, 0x89, 0x9d, 0x66, 0xeb, 0x2a, 0xe9, 0x24, 0x46, 0x67, 0x06, 0x42, 0xa1,
	0xc0, 0xb7, 0xd0, 0x55, 0x06, 0xc2, 0x02, 0xc1, 0x22, 0xc5, 0x19, 0x17, 0xdc, 0xfe, 0x12, 0x8a,
	0x33, 0x0e, 0xaa, 0x41, 0x3d, 0x73, 0xaa, 0x69, 0xa5, 0x78, 0xb1, 0xd2, 0x85, 0x42, 0xb8, 0x07,
	0xb7, 0xf3, 0xc7, 0x9b, 0xd6, 0xb9, 0xb3, 0x58, 0xe7, 0x65, 0x72, 0xb8, 0x0b, 0x37, 0xd2, 0xc7,
	0x9d, 0x56, 0xb9, 0xbb, 0x58, 0xe5, 0x22, 0x99, 0xe6, 0x3f, 0x95, 0x60, 0x25, 0x7a, 0x2b, 0xa7,
	0x31, 0x3a, 0xf1, 0xbd, 0xa7, 0xce, 0xa9, 0x13, 0x46, 0xa4, 0x68, 0xa4, 0xca, 0x93, 0x31, 0x82,
	0xca, 0xd4, 0x8f, 0x73, 0x15, 0xfd, 0xf9, 0x7f, 0xf8, 0xee, 0xf3, 0xce, 0xbb, 0x9f, 0x0b, 0xdf,
	0x80, 0xaf, 0xef, 0xc7, 0x66, 0x3f, 0x38, 0x10, 0x3d, 0x37, 0xf4, 0xbd, 0x71, 0xc0, 0xde, 0x91,
	0xa3, 0xf7, 0xfe, 0x46, 0x10, 0x55, 0xe9, 0xe4, 0x81, 0x79, 0xe2, 0x7b, 0x23, 0xdf, 0x3a, 0x3f,
	0x68, 0x9e, 0xc2, 0xf5, 0x56, 0xdc, 0x62, 0xc6, 0xaf, 0x0a, 0x1f, 0x4c, 0xed, 0x20, 0xcc, 0x0c,
	0xfb, 0xa5, 0x2f, 0x35, 0xec, 0x97, 0xb3, 0xc3, 0xfe, 0xfe, 0x87, 0xb0, 0x91, 0x79, 0xa6, 0xc5,
	0x37, 0x60, 0x47, 0xd0, 0x75, 0x45, 0xea, 0xab, 0x9a, 0xd9, 0x37, 0x7a, 0xba, 0xae, 0x11, 0x53,
	0x6a, 0xa1, 0x6b, 0x78, 0x1b, 0x36, 0x8e, 0x34, 0x81, 0xb4, 0x64, 0xb5, 0xd3, 0xd7, 0x05, 0xc3,
	0x40, 0x25, 0x0c, 0xb0, 0x2c, 0x6a, 0x3d, 0x5d, 0x53, 0x51, 0x19, 0x23, 0x58, 0x97, 0x1e, 0x49,
	0xaa, 0xd9, 0x37, 0x65, 0xf1, 0xa1, 0x64, 0xa2, 0x0a, 0x5e, 0x83, 0x95, 0x8e, 0xa4, 0x4a, 0x44,
	0x16, 0x51, 0x15, 0x6f, 0x02, 0x18, 0xa6, 0x46, 0xa4, 0xbe, 0x28, 0x90, 0x16, 0x5a, 0xda, 0xff,
	0x28, 0xf5, 0xa0, 0x99, 0xac, 0x7d, 0x07, 0xea, 0x1d, 0x4d, 0xeb, 0x28, 0x52, 0x5f, 0x17, 0x4e,
	0xe6, 0x0c, 0xa8, 0xc1, 0x12, 0x5b, 0x81, 0x2f, 0xdc, 0x56, 0xe4, 0xce, 0xb1, 0x89, 0xca, 0x78,
	0x15, 0xaa, 0x1d, 0xb9, 0x1d, 0x2d, 0xa8, 0x68, 0x27, 0x82, 0x62, 0x9e, 0xa0, 0x2a, 0x45, 0x6b,
	0xed, 0xb6, 0x44, 0xd0, 0x12, 0xa5, 0x9b, 0x44, 0x50, 0x0d, 0xd9, 0x44, 0xcb, 0xfb, 0x3f, 0x01,
	0x6b, 0xa9, 0xbf, 0x56, 0xe2, 0xdb, 0x70, 0xe3, 0x48, 0x20, 0xa2, 0xd6, 0x92, 0xfa, 0xe6, 0x89,
	0x2e, 0xf5, 0x5b, 0x1a, 0x5b, 0xb7, 0x67, 0x48, 0xe8, 0x1a, 0x5e, 0x86, 0xf2, 0x7b, 0x04, 0x95,
	0xa8, 0x2e, 0xe1, 0x89, 0x29, 0x89, 0xa8, 0x4c, 0x57, 0xd6, 0x5b, 0xed, 0xb7, 0xef, 0x7f, 0x95,
	0xaf, 0x47, 0x05, 0xef, 0x3f, 0xf8, 0x1a, 0xaa, 0x52, 0x33, 0x54, 0x4d, 0x95, 0xd0, 0xd2, 0xfe,
	0x07, 0x50, 0x4b, 0x66, 0x65, 0xbc, 0x03, 0x5b, 0x6d, 0x59, 0x52, 0x5a, 0x5c, 0x3b, 0x43, 0x5c,
	0xa3, 0xd8, 0xae, 0x64, 0x0a, 0xa8, 0x84, 0x57, 0xa0, 0xa2, 0xcb, 0x32, 0x2a, 0xe3, 0x5d, 0x40,
	0x3d, 0x55, 0x7e, 0x24, 0x11, 0x43, 0x50, 0xfa, 0x4c, 0xc2, 0x40, 0x15, 0x2a, 0xad, 0x13, 0xcd,
	0xd4, 0x44, 0x2d, 0x21, 0x56, 0xe9, 0x45, 0x88, 0x3d, 0xc3, 0xd4, 0xba, 0x31, 0x69, 0x69, 0xff,
	0x07, 0x25, 0xd8, 0x34, 0x42, 0xcb, 0x1d, 0x5a, 0xfe, 0x30, 0x7a, 0xb1, 0x7d, 0x11, 0x6e, 0x19,
	0xa6, 0xa0, 0xb6, 0x04, 0xd2, 0x8a, 0x70, 0xd9, 0xbd, 0xed, 0xc1, 0x76, 0xc2, 0xef, 0x4a, 0x86,
	0x21, 0x74, 0x24, 0x7a, 0xa5, 0x18, 0x36, 0x13, 0xb2, 0x22, 0x75, 0x04, 0x05, 0x95, 0x71, 0x1d,
	0x76, 0x13, 0x9a, 0xf4, 0x58, 0x97, 0xc9, 0x49, 0xbf, 0x25, 0x98, 0x12, 0xaa, 0xe0, 0x9b, 0xb0,
	0x97, 0x70, 0x7a, 0x86, 0xd4, 0xee, 0x29, 0x7d, 0x45, 0x56, 0x1f, 0x52, 0x2b, 0x77, 0x01, 0x25,
	0x2c, 0x4d, 0x37, 0xfb, 0x5a, 0xcf, 0x44, 0x4b, 0xf8, 0x3a, 0xe0, 0x99, 0x7a, 0x4d, 0x14, 0x4c,
	0x59, 0x53, 0x0d, 0xb4, 0xbc, 0xff, 0x2d, 0xd8, 0xc8, 0x4c, 0x3e, 0xf8, 0x05, 0xb8, 0x69, 0x4a,
	0x8f, 0xcd, 0xbe, 0xa0, 0xc8, 0x1d, 0xb5, 0x4b, 0xfd, 0x2a, 0x63, 0xfd, 0x2a, 0x54, 0x15, 0xa9,
	0x1d, 0xb9, 0x82, 0x28, 0xa9, 0xa6, 0x44, 0x50, 0x99, 0xde, 0x13, 0x61, 0x5e, 0xc1, 0xee, 0x46,
	0x15, 0xcc, 0x1e, 0x11, 0x14, 0x54, 0xdd, 0xff, 0x8d, 0x12, 0x6c, 0x64, 0xa6, 0x07, 0x7a, 0x3a,
	0x74, 0x0b, 0x7d, 0x53, 0xee, 0x4a, 0x7d, 0xc3, 0x3c, 0x51, 0x72, 0x37, 0x7f, 0x13, 0xf6, 0xf2,
	0x7c, 0xe3, 0x58, 0x23, 0x74, 0xc1, 0x5b, 0x70, 0x3d, 0xcf, 0xea, 0x4a, 0x2d, 0xb9, 0xd7, 0xe5,
	0x27, 0x95, 0xe7, 0x29, 0x9a, 0xda, 0x41, 0x95, 0x22, 0x4e, 0xbb, 0xa7, 0x50, 0xe3, 0x3e, 0x2d,
	0xc1, 0x7a, 0x7a, 0xd4, 0xa0, 0x51, 0x40, 0x0f, 0xb1, 0xdf, 0x92, 0x4c, 0x49, 0x34, 0x35, 0x32,
	0x67, 0x59, 0x96, 0x2b, 0xb4, 0x5a, 0x44, 0x62, 0xe1, 0x78, 0x1d, 0x70, 0x4e, 0x90, 0xde, 0x52,
	0x99, 0x5e, 0x75, 0x96, 0xde, 0x23, 0x0a, 0xaa, 0xd0, 0x48, 0xcf, 0x92, 0xf5, 0x63, 0xea, 0x9e,
	0xd5, 0xfd, 0xef, 0x96, 0x60, 0x2d, 0x35, 0x39, 0xd1, 0x18, 0x51, 0x7b, 0xdd, 0x23, 0x89, 0x14,
	0x9d, 0x54, 0x1d, 0x76, 0xb3, 0x4c, 0x49, 0x94, 0xbb, 0x82, 0x82, 0x4a, 0x73, 0x1c, 0x5d, 0x22,
	0xf4, 0xa6, 0x50, 0x79, 0x4e, 0xa1, 0x21, 0xca, 0x92, 0x6a, 0xca, 0x6d, 0x59, 0x44, 0x15, 0xba,
	0x8b, 0x2c, 0x53, 0x97, 0xd8, 0x39, 0xfd, 0x49, 0x09, 0xd6, 0x52, 0x7f, 0x4f, 0xa1, 0x4a, 0xa2,
	0xa8, 0x2e, 0x88, 0xdc, 0x5d, 0x40, 0x19, 0xa6, 0x20, 0xd3, 0x38, 0xde, 0x83, 0xed, 0x0c, 0xf5,
	0x48, 0x13, 0x4c, 0x1e, 0x7b, 0x59, 0x72, 0xcf, 0xe0, 0x37, 0x96, 0xa1, 0xce, 0x72, 0xd9, 0x75,
	0xc0, 0x19, 0x8e, 0x49, 0x04, 0x59, 0x45, 0x4b, 0x73, 0xea, 0x4d, 0x22, 0x74, 0xd1, 0xf2, 0xfe,
	0x17, 0x25, 0x58, 0x8d, 0x5f, 0xa7, 0x68, 0x7c, 0xb5, 0x04, 0x53, 0xc8, 0xa7, 0x03, 0xea, 0xeb,
	0xa8, 0x84, 0x37, 0xa0, 0xc6, 0xbc, 0x9e, 0x39, 0x4d, 0x99, 0x46, 0x3a, 0x73, 0x9a, 0x93, 0x93,
	0x93, 0x93, 0x6e, 0xb7, 0xd5, 0x42, 0x15, 0xbc, 0x05, 0x6b, 0x29, 0x12, 0xaa, 0x52, 0x11, 0x46,
	0x60, 0xfc, 0x25, 0xa6, 0x4b, 0xee, 0x4a, 0x68, 0x39, 0x61, 0xb0, 0xcf, 0x15, 0x9a, 0x69, 0x64,
	0xd5, 0x44, 0xab, 0x34, 0x60, 0xf8, 0xf9, 0xa2, 0x1a, 0x4b, 0xa9, 0x5d, 0x41, 0x56, 0x10, 0x50,
	0x3e, 0x75, 0x8b, 0x35, 0xfa, 0xc3, 0x94, 0x14, 0xb4, 0x4e, 0x43, 0x28, 0xf6, 0xad, 0x0d, 0xbc,
	0x0e, 0xab, 0x62, 0x8f, 0x10, 0x49, 0x15, 0x4f, 0x10, 0xa2, 0xac, 0x23, 0x4d, 0x53, 0x24, 0x41,
	0x45, 0xdb, 0xf4, 0x43, 0xd3, 0x79, 0x20, 0x63, 0xfa, 0x11, 0x99, 0x83, 0x76, 0xf6, 0x7f, 0x58,
	0xe2, 0x0f, 0x93, 0xdc, 0x8d, 0xd6, 0x61, 0x55, 0xd5, 0xf8, 0xa5, 0xa2, 0x6b, 0xb4, 0x20, 0x30,
	0x60, 0x1c, 0x56, 0xf1, 0xc6, 0x92, 0x58, 0x8a, 0xed, 0x8f, 0x02, 0x28, 0xfe, 0xe4, 0x51, 0x43,
	0xc5, 0x79, 0x28, 0x31, 0xf1, 0x25, 0x2a, 0xce, 0xbe, 0x23, 0x71, 0xb6, 0x7d, 0x46, 0x60, 0xe2,
	0x2b, 0xc9, 0x27, 0x13, 0x5f, 0xa5, 0x89, 0x35, 0x15, 0x8e, 0x4c, 0x47, 0x8d, 0xfa, 0xc1, 0x8c,
	0x18, 0x29, 0x82, 0xe8, 0xc6, 0x22, 0x2a, 0xd3, 0xb6, 0x96, 0xa5, 0x31, 0x95, 0xeb, 0x94, 0x16,
	0xf9, 0x6d, 0x1c, 0x02, 0x1b, 0xfb, 0x9f, 0x95, 0x60, 0x3d, 0x3d, 0x66, 0xd3, 0xd8, 0xe6, 0xe5,
	0xc0, 0x90, 0x44, 0x7a, 0x64, 0x59, 0xaf, 0xdd, 0x82, 0xb5, 0x23, 0x41, 0x7c, 0x18, 0xe7, 0x75,
	0x96, 0x8d, 0x75, 0x22, 0x77, 0x05, 0x72, 0x12, 0xd3, 0x98, 0xb7, 0x1a, 0x92, 0xa8, 0xd1, 0x1c,
	0x7a, 0x32, 0xab, 0x14, 0xbb, 0x80, 0x84, 0xde, 0x63, 0x59, 0x91, 0x53, 0x54, 0x56, 0x2a, 0x8e,
	0x25, 0xa1, 0x25, 0x91, 0x59, 0xa9, 0xf8, 0xb3, 0x3a, 0x6c, 0x66, 0x5f, 0x1d, 0xf0, 0x4b, 0x70,
	0x3b, 0x55, 0x76, 0xb9, 0x7d, 0x19, 0xbb, 0x5e, 0x81, 0x46, 0x0a, 0x90, 0x74, 0x01, 0x82, 0x4c,
	0x14, 0x59, 0x95, 0xfa, 0xaa, 0xd0, 0x95, 0x50, 0xe9, 0x79, 0x28, 0x5a, 0x2a, 0x51, 0x99, 0x66,
	0xde, 0x22, 0x94, 0x46, 0xe4, 0x8e, 0xac, 0xa2, 0x0a, 0x7e, 0x19, 0x5e, 0x2a, 0xe2, 0xb7, 0x24,
	0xc3, 0x94, 0x55, 0x56, 0x2f, 0x50, 0x15, 0xbf, 0x0e, 0x2f, 0x2f, 0x56, 0xd2, 0x37, 0x25, 0xd2,
	0x95, 0x55, 0x41, 0x41, 0x4b, 0x8b, 0xb4, 0x45, 0xc0, 0x0e, 0xcd, 0x8f, 0xcb, 0xf8, 0x55, 0xf8,
	0x4a, 0x11, 0x28, 0xf9, 0x11, 0x45, 0xd0, 0x6b, 0xd0, 0x2c, 0x82, 0xd1, 0x5e, 0x48, 0x52, 0x3b,
	0x12, 0xe1, 0xe7, 0xb0, 0x8a, 0x9b, 0xf0, 0x62, 0x11, 0xee, 0x89, 0xa6, 0x4a, 0xfd, 0x0e, 0xd1,
	0x7a, 0x3a, 0xaa, 0xe5, 0x3a, 0x9d, 0x04, 0x63, 0x48, 0x82, 0x89, 0x00, 0xbf, 0x01, 0xaf, 0x5e,
	0x6a, 0x90, 0xae, 0x19, 0x32, 0x3b, 0x89, 0xb5, 0xe7, 0x42, 0x0d, 0xe9, 0xbd, 0x9e, 0xa4, 0x8a,
	0x12, 0x5a, 0x7f, 0xee, 0x36, 0x5b, 0x9a, 0x46, 0xd0, 0xc6, 0x22, 0x18, 0xef, 0xb7, 0xfa, 0x51,
	0xea, 0xd8, 0xc4, 0x6f, 0xc2, 0xeb, 0x45, 0x30, 0x51, 0x53, 0xdb, 0x32, 0xe9, 0xb2, 0x8b, 0x8a,
	0xc1, 0x5b, 0x8b, 0x74, 0xf2, 0x56, 0x31, 0x86, 0x21, 0xfc, 0x16, 0xbc, 0x51, 0xb8, 0x34, 0x61,
	0x9b, 0x30, 0xfb, 0x6d, 0xe5, 0x84, 0x1e, 0x33, 0x87, 0x6f, 0x2f, 0xba, 0x5c, 0x7a, 0xab, 0x7d,
	0x51, 0xd1, 0x0c, 0x89, 0x26, 0xa4, 0x05, 0xb7, 0xd6, 0x92, 0x74, 0x81, 0x98, 0x3d, 0x12, 0xe5,
	0xc7, 0x9d, 0x85, 0xde, 0x4b, 0x88, 0xfc, 0x48, 0x50, 0x38, 0x6a, 0x17, 0xdf, 0x85, 0x57, 0x2e,
	0x45, 0xc5, 0x9e, 0xb7, 0xf7, 0x3c, 0x7d, 0xcc, 0xf5, 0xae, 0xd3, 0x6a, 0x9e, 0x42, 0xf1, 0x06,
	0x9a, 0xb9, 0x51, 0x3e, 0x2a, 0x39, 0xeb, 0x91, 0xa4, 0xf6, 0xa2, 0x78, 0xb3, 0x73, 0x7e, 0x96,
	0x06, 0xc4, 0x69, 0xfb, 0xac, 0x50, 0x3f, 0x5b, 0x7a, 0x94, 0x73, 0x41, 0xce, 0x8a, 0xb2, 0x12,
	0x7a, 0x4a, 0xab, 0xdf, 0x1c, 0x97, 0x68, 0xef, 0x23, 0xa7, 0x50, 0x25, 0xf3, 0xdb, 0x6f, 0x17,
	0x5a, 0x14, 0xdd, 0xf1, 0xb1, 0xa6, 0xb4, 0x24, 0x82, 0x9e, 0x15, 0x6e, 0x8b, 0x7a, 0x9e, 0xd1,
	0xd7, 0x74, 0x49, 0x45, 0x74, 0x5a, 0xb9, 0x3e, 0xaf, 0xdf, 0x14, 0x88, 0x89, 0xce, 0x0b, 0xad,
	0x92, 0xd4, 0x16, 0x72, 0x71, 0x03, 0xee, 0x2c, 0x5a, 0x9a, 0x96, 0x5a, 0xe4, 0x5d, 0x66, 0x5c,
	0xe4, 0x51, 0x93, 0xdc, 0xf5, 0x72, 0x4c, 0x91, 0x47, 0x7f, 0x50, 0xb8, 0x8d, 0xb6, 0x20, 0x4a,
	0xfd, 0x47, 0x82, 0xd2, 0x93, 0x90, 0x5f, 0x0c, 0xa0, 0x79, 0x50, 0x27, 0xb4, 0x0e, 0x07, 0xb8,
	0x09, 0x2f, 0xa4, 0x00, 0x74, 0x84, 0xe9, 0x77, 0x25, 0x22, 0x1e, 0x0b, 0xb1, 0x0b, 0xfc, 0x79,
	0x09, 0xdf, 0x81, 0x1b, 0x79, 0xcc, 0x91, 0xa0, 0x08, 0x34, 0x9e, 0xff, 0xa2, 0x84, 0x1b, 0x99,
	0x25, 0x18, 0x97, 0x4e, 0x57, 0xb1, 0x91, 0x7f, 0x59, 0xc2, 0x77, 0x33, 0x79, 0x32, 0x2d, 0xdf,
	0xef, 0xe9, 0xb3, 0xee, 0xe0, 0xaf, 0x68, 0xb3, 0xb6, 0x93, 0x47, 0xea, 0xb2, 0x8a, 0xfe, 0xba,
	0x84, 0xbf, 0x92, 0x39, 0x59, 0xc6, 0x89, 0xfc, 0x94, 0x2f, 0xf3, 0x37, 0x34, 0xf3, 0xa7, 0x03,
	0x31, 0x9a, 0xc1, 0xfa, 0x3a, 0xd1, 0x3a, 0x44, 0xe8, 0xf2, 0xcd, 0xfc, 0x0e, 0xcd, 0xfc, 0x37,
	0x8b, 0x50, 0x9a, 0xac, 0x9a, 0x06, 0xfa, 0xdd, 0x72, 0xce, 0xd8, 0x98, 0x3f, 0xab, 0x75, 0x11,
	0xf2, 0xf7, 0xca, 0x0b, 0xd6, 0x13, 0x44, 0x51, 0xeb, 0xc5, 0x87, 0xf7, 0xfb, 0xe5, 0xdc, 0x01,
	0xe7, 0x51, 0x72, 0x0b, 0xfd, 0xc1, 0x22, 0x4d, 0x44, 0x7a, 0x5f, 0x20, 0x2d, 0xa3, 0x6f, 0xca,
	0x12, 0x41, 0x7f, 0x58, 0xc6, 0x07, 0x99, 0xbc, 0x34, 0x6f, 0x59, 0x06, 0xff, 0x47, 0xb4, 0xbf,
	0x4d, 0xbb, 0x30, 0x1b, 0x43, 0xfb, 0xa6, 0x6c, 0x2a, 0x12, 0xfa, 0xac, 0x92, 0x3b, 0x06, 0xce,
	0xd4, 0x89, 0xf6, 0x48, 0xa6, 0xf1, 0xf1, 0xeb, 0x15, 0xfc, 0x42, 0x26, 0x2e, 0x39, 0xbf, 0x25,
	0x99, 0x82, 0xac, 0x18, 0xe8, 0xf3, 0x4a, 0xee, 0xd2, 0x39, 0x3b, 0xe5, 0x57, 0xdf, 0xa5, 0x15,
	0x34, 0xed, 0xe8, 0x71, 0x47, 0x2a, 0x1b, 0x46, 0x2f, 0xae, 0x51, 0xff, 0x5c, 0xc9, 0xdd, 0x6a,
	0x0c, 0x4a, 0xb2, 0x22, 0xfa, 0x97, 0x0a, 0x7e, 0x2d, 0x93, 0xb4, 0xe7, 0x20, 0xdc, 0x75, 0xfe,
	0xb5, 0x92, 0x3b, 0xe7, 0x18, 0xf7, 0x48, 0x50, 0xe4, 0x56, 0xbf, 0x4d, 0xb4, 0x2e, 0xfa, 0x62,
	0x91, 0x4d, 0x1c, 0xd3, 0x53, 0x4d, 0x59, 0x41, 0xff, 0x56, 0xc1, 0x2f, 0x65, 0x5a, 0x83, 0x18,
	0x14, 0x65, 0x4c, 0xf4, 0xef, 0x15, 0xfc, 0x7a, 0x26, 0x97, 0xc7, 0x80, 0x6c, 0x01, 0x36, 0xd0,
	0x7f, 0xe4, 0x0f, 0x29, 0x06, 0x8a, 0x54, 0x95, 0xd0, 0x91, 0xd0, 0x7f, 0xe6, 0x4f, 0x39, 0x41,
	0x68, 0x82, 0x78, 0x8c, 0xfe, 0xab, 0x92, 0x0b, 0xbc, 0x98, 0xcd, 0xd2, 0xdc, 0x7f, 0x57, 0xf0,
	0xab, 0x99, 0xdc, 0x9e, 0xf4, 0xfc, 0x99, 0x64, 0xf2, 0xc3, 0xe7, 0xc0, 0x0c, 0x53, 0x30, 0x7b,
	0x06, 0xfa, 0x9f, 0x45, 0x57, 0xd1, 0x16, 0x48, 0x94, 0xe9, 0x7f, 0xb2, 0xba, 0x60, 0x3f, 0xba,
	0x22, 0x98, 0x6d, 0x8d, 0x74, 0xd1, 0x4f, 0x55, 0x17, 0x18, 0x4c, 0x7b, 0x0e, 0xf4, 0xd3, 0xd5,
	0x05, 0x57, 0xc4, 0x96, 0x10, 0x15, 0xc1, 0x30, 0xd0, 0xcf, 0x54, 0xf1, 0x9b, 0xf0, 0x5a, 0xe1,
	0x89, 0xa8, 0xa2, 0x64, 0x18, 0x34, 0xf7, 0x89, 0x82, 0x29, 0x75, 0x34, 0x72, 0x82, 0x7e, 0xb6,
	0x8a, 0xf7, 0x33, 0x6d, 0x47, 0x0c, 0x26, 0x5a, 0xcf, 0x94, 0xfa, 0x44, 0x32, 0x4c, 0x22, 0x8b,
	0x7c, 0x22, 0xf8, 0xb9, 0x2a, 0xbe, 0x0f, 0xf7, 0xae, 0x82, 0x4d, 0x9c, 0xfc, 0xe7, 0xab, 0xf8,
	0x8d, 0x4c, 0x1e, 0x9e, 0x9d, 0x5c, 0x37, 0xa7, 0xfd, 0x17, 0x16, 0x59, 0xa2, 0x99, 0xc7, 0x12,
	0xc9, 0x62, 0x7f, 0xb1, 0xba, 0xc0, 0xa3, 0x89, 0x24, 0x4a, 0xb2, 0x9e, 0x5c, 0xdc, 0x2f, 0x55,
	0x17, 0x5c, 0x9c, 0xde, 0xa3, 0xd9, 0xd9, 0x90, 0xf8, 0x58, 0xfd, 0xcb, 0x8b, 0x4e, 0x35, 0x95,
	0x60, 0xbe, 0xb3, 0x68, 0x27, 0x99, 0x9a, 0xc2, 0x1a, 0xe3, 0x5f, 0x59, 0x7c, 0x49, 0x49, 0x51,
	0xf9, 0xd5, 0x45, 0x3b, 0x48, 0x2c, 0xd3, 0x89, 0x2c, 0x4a, 0xe8, 0xd7, 0xaa, 0xb9, 0x5c, 0x9a,
	0xc4, 0xae, 0x6c, 0x70, 0xdb, 0xa2, 0x07, 0x1f, 0xf4, 0x69, 0x35, 0x97, 0xab, 0xd8, 0xf4, 0xd9,
	0xd5, 0x5a, 0x3d, 0x45, 0x42, 0x7f, 0xbf, 0x92, 0x63, 0xa6, 0x53, 0xc8, 0x3f, 0xac, 0xec, 0xfb,
	0x00, 0xb3, 0x7f, 0x9a, 0x4a, 0x67, 0x17, 0xf6, 0x36, 0x94, 0x4c, 0xb5, 0x75, 0xd8, 0x8d, 0x08,
	0x9a, 0xda, 0x6f, 0xcb, 0x8f, 0xa5, 0x16, 0x3f, 0xb8, 0x12, 0xbe, 0x01, 0x3b, 0x11, 0x47, 0x68,
	0x9b, 0x12, 0xe9, 0x3f, 0xee, 0xb7, 0x84, 0x13, 0x3a, 0xda, 0x34, 0xe0, 0xce, 0x4c, 0xe4, 0x91,
	0x40, 0x64, 0xe1, 0x48, 0xe1, 0xc7, 0xcd, 0x93, 0x4d, 0xe5, 0xe8, 0x5d, 0xd8, 0x72, 0xbc, 0x83,
	0x89, 0x15, 0x04, 0xcf, 0x9c, 0xf0, 0x40, 0x7f, 0xe8, 0x78, 0x4f, 0x5e, 0x09, 0x42, 0x2b, 0x78,
	0x9a, 0xd0, 0x06, 0xde, 0xf9, 0xa1, 0xe3, 0x1d, 0x9e, 0x7b, 0x43, 0x7b, 0x7c, 0x18, 0x0c, 0x9f,
	0x1d, 0x8e, 0xbc, 0x43, 0xc7, 0xfb, 0xad, 0x72, 0x55, 0x7f, 0x28, 0x7b, 0xa7, 0xcb, 0xec, 0x51,
	0xf4, 0xff, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x00, 0xb6, 0xb3, 0xa5, 0x32, 0x00,
	0x00,
}
