// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/airport.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Port is an optional record that allows the carrier to overwrite default airport names and their localizations.  A port can represent an origin, destination or transit port of a direct flight with stops.  If a port record does not exist, this information will be automatically populated with publicly available data.
type Port struct {
	// The IATA code of the port. At least one of IATA or ICAO airport code is required.
	IataAirportCode string `protobuf:"bytes,1,opt,name=iataAirportCode,proto3" json:"iataAirportCode,omitempty"`
	// The IATA code of the port. At least one of IATA or ICAO airport code is required.
	IcaoAirportCode string `protobuf:"bytes,2,opt,name=icaoAirportCode,proto3" json:"icaoAirportCode,omitempty"`
	// The name of the city associated with the airport to be displayed on the boarding pass.
	CityName string `protobuf:"bytes,3,opt,name=cityName,proto3" json:"cityName,omitempty"`
	// The localized name of the city to be displayed on the boarding pass, above the airport code.
	LocalizedCityName *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedCityName,proto3" json:"localizedCityName,omitempty"`
	// The name of the airport to be displayed on the boarding pass in brackets, next to the city name. If a city has a single airport, or the airport name matches the city name this field can be left empty.
	AirportName string `protobuf:"bytes,5,opt,name=airportName,proto3" json:"airportName,omitempty"`
	// The localized name of the airport to be displayed on the boarding pass in brackets, next to the city name. If a city has a single airport, or the airport name matches the city name, this field can be left empty.
	LocalizedAirportName *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedAirportName,proto3" json:"localizedAirportName,omitempty"`
	// The ISO 3166 country code of the port.
	CountryCode string `protobuf:"bytes,7,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	// The Latitude(s) of relevant locations within the Airport. For best customer experience, set to the land-side passenger area of the terminal used at each airport, and any specific air-side locations (such as lounges or service desks).
	Latitude []float64 `protobuf:"fixed64,8,rep,packed,name=latitude,proto3" json:"latitude,omitempty"`
	// The Longitude(s) of relevant locations within the Airport. For best customer experience, set to the land-side passenger area of the terminal used at each airport, and any specific air-side locations (such as lounges or service desks).
	Longitude            []float64 `protobuf:"fixed64,9,rep,packed,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca6623b5bd2d5d4d, []int{0}
}

func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetIataAirportCode() string {
	if m != nil {
		return m.IataAirportCode
	}
	return ""
}

func (m *Port) GetIcaoAirportCode() string {
	if m != nil {
		return m.IcaoAirportCode
	}
	return ""
}

func (m *Port) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *Port) GetLocalizedCityName() *io.LocalizedString {
	if m != nil {
		return m.LocalizedCityName
	}
	return nil
}

func (m *Port) GetAirportName() string {
	if m != nil {
		return m.AirportName
	}
	return ""
}

func (m *Port) GetLocalizedAirportName() *io.LocalizedString {
	if m != nil {
		return m.LocalizedAirportName
	}
	return nil
}

func (m *Port) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Port) GetLatitude() []float64 {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *Port) GetLongitude() []float64 {
	if m != nil {
		return m.Longitude
	}
	return nil
}

// Airport Request is used for retrieving or deleting a port record.
type AirportCode struct {
	// @tag: validate:"required"
	// The IATA or ICAO airport code.
	AirportCode          string   `protobuf:"bytes,1,opt,name=airportCode,proto3" json:"airportCode,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AirportCode) Reset()         { *m = AirportCode{} }
func (m *AirportCode) String() string { return proto.CompactTextString(m) }
func (*AirportCode) ProtoMessage()    {}
func (*AirportCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca6623b5bd2d5d4d, []int{1}
}

func (m *AirportCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AirportCode.Unmarshal(m, b)
}
func (m *AirportCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AirportCode.Marshal(b, m, deterministic)
}
func (m *AirportCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirportCode.Merge(m, src)
}
func (m *AirportCode) XXX_Size() int {
	return xxx_messageInfo_AirportCode.Size(m)
}
func (m *AirportCode) XXX_DiscardUnknown() {
	xxx_messageInfo_AirportCode.DiscardUnknown(m)
}

var xxx_messageInfo_AirportCode proto.InternalMessageInfo

func (m *AirportCode) GetAirportCode() string {
	if m != nil {
		return m.AirportCode
	}
	return ""
}

func init() {
	proto.RegisterType((*Port)(nil), "flights.Port")
	proto.RegisterType((*AirportCode)(nil), "flights.AirportCode")
}

func init() { proto.RegisterFile("io/flights/airport.proto", fileDescriptor_ca6623b5bd2d5d4d) }

var fileDescriptor_ca6623b5bd2d5d4d = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6a, 0xbb, 0x40,
	0x14, 0xc5, 0x31, 0xe6, 0xcb, 0xc9, 0xe2, 0xcf, 0xdf, 0x16, 0x2a, 0x21, 0x0b, 0xc9, 0x2a, 0x8b,
	0xc4, 0x81, 0xf6, 0x09, 0x4c, 0xa0, 0x5d, 0xa4, 0x94, 0x60, 0x76, 0xdd, 0x4d, 0xd5, 0x9a, 0x4b,
	0x74, 0xae, 0xcc, 0x4c, 0x68, 0xd3, 0x87, 0xe8, 0xa2, 0x8f, 0xd1, 0xa7, 0x2c, 0x8e, 0x46, 0x4d,
	0x3f, 0x56, 0x32, 0xe7, 0xfc, 0x0e, 0x87, 0x7b, 0xbd, 0xc4, 0x01, 0xa4, 0xcf, 0x29, 0x24, 0x3b,
	0x25, 0x29, 0x03, 0x91, 0xa3, 0x50, 0x5e, 0x2e, 0x50, 0xa1, 0x3d, 0xa8, 0xe4, 0xf1, 0x04, 0x90,
	0x86, 0x98, 0x65, 0xc8, 0x69, 0x8a, 0x21, 0x4b, 0xe1, 0x8d, 0x29, 0x40, 0x5e, 0x62, 0xe3, 0xb9,
	0xfe, 0x84, 0x8b, 0x24, 0xe6, 0x0b, 0xf9, 0xc2, 0x92, 0x24, 0x16, 0x14, 0xf3, 0x02, 0x90, 0x94,
	0x71, 0x8e, 0x4a, 0xc3, 0xb2, 0xa4, 0xa7, 0xef, 0x26, 0xe9, 0x6e, 0x50, 0x28, 0x9b, 0x92, 0x7f,
	0xc0, 0x14, 0xf3, 0xcb, 0xca, 0x15, 0x46, 0xb1, 0x63, 0xb8, 0xc6, 0xcc, 0x5a, 0xf6, 0x3e, 0xfc,
	0xce, 0xab, 0x19, 0x7c, 0x77, 0x75, 0x20, 0x64, 0xd8, 0x0e, 0x74, 0xce, 0x03, 0xe7, 0xae, 0x3d,
	0x26, 0xc3, 0x10, 0xd4, 0xf1, 0x81, 0x65, 0xb1, 0x63, 0x16, 0x64, 0x50, 0xbf, 0x6d, 0x9f, 0xfc,
	0xaf, 0x46, 0x89, 0xa3, 0xd5, 0x09, 0xea, 0xba, 0xc6, 0x6c, 0x74, 0x7d, 0xe1, 0x01, 0x7a, 0xf7,
	0x27, 0x73, 0xab, 0x04, 0xf0, 0x24, 0xf8, 0x49, 0xdb, 0x2e, 0x19, 0x55, 0xfb, 0xd2, 0xe1, 0x9e,
	0x6e, 0x68, 0x4b, 0xf6, 0x1d, 0xb9, 0xac, 0x63, 0x7e, 0x0b, 0xed, 0xff, 0xdd, 0xf3, 0x6b, 0xa0,
	0xa8, 0x0a, 0xf1, 0xc0, 0x95, 0x38, 0xea, 0xb1, 0x07, 0x65, 0x55, 0x4b, 0x2a, 0x66, 0x4d, 0x99,
	0x02, 0x75, 0x88, 0x62, 0x67, 0xe8, 0x9a, 0x33, 0x23, 0xa8, 0xdf, 0xf6, 0x84, 0x58, 0x29, 0xf2,
	0xa4, 0x34, 0x2d, 0x6d, 0x36, 0xc2, 0x94, 0x92, 0x51, 0x7b, 0x69, 0xcd, 0x54, 0xcd, 0x2f, 0x09,
	0xda, 0xd2, 0x72, 0x4b, 0xae, 0x00, 0xbd, 0x9c, 0x49, 0xb9, 0x07, 0xe5, 0x6d, 0xd6, 0x80, 0xde,
	0x6d, 0x79, 0x28, 0x8f, 0x73, 0xa9, 0x98, 0xdc, 0xd5, 0x5e, 0x88, 0x19, 0x05, 0xa4, 0x19, 0x46,
	0x71, 0x4a, 0x65, 0xb4, 0xa7, 0x09, 0xd2, 0xe6, 0xda, 0x3e, 0x3b, 0xd6, 0x66, 0x5d, 0x25, 0x9f,
	0xfa, 0xfa, 0x3a, 0x6e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x55, 0x0a, 0x4e, 0x8e, 0x02,
	0x00, 0x00,
}
