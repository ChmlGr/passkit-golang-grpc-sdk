// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/flight.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// For customers subscribing to automatic updates, the flight status will be automatically updated. Status is also writable for manual updates.
type FlightStatus int32

const (
	// No status is known, or flight is not yet scheduled.
	FlightStatus_UNKNOWN FlightStatus = 0
	// Flight is scheduled to depart.
	FlightStatus_SCHEDULED FlightStatus = 1
	// Flight has left the departure gate, but may not be airborne yet.
	FlightStatus_DEPARTED FlightStatus = 2
	// Flight is airborne.
	FlightStatus_INAIR FlightStatus = 3
	// Flight has landed, but may not yet be at the arrival gate.
	FlightStatus_LANDED FlightStatus = 4
	// Flight has arrived at the destination gate.
	FlightStatus_ARRIVED FlightStatus = 5
	// Flight has been cancelled.
	FlightStatus_CANCELLED FlightStatus = 6
	// Flight is delayed to depart by at least 15 minutes.
	FlightStatus_DELAYED FlightStatus = 7
	// Flight has been diverted from its scheduled destination and has left the departure gate.
	FlightStatus_DEPARTED_DIVERTED FlightStatus = 8
	// Flight has been diverted from its scheduled destination and is airborne.
	FlightStatus_INAIR_DIVERTED FlightStatus = 9
	// Flight has arrived at a location different to its scheduled destination.
	FlightStatus_ARRIVED_DIVERTED FlightStatus = 10
	// Flight has left its diverted destination en-route to its original destination.
	FlightStatus_DEPARTED_RECOVERY FlightStatus = 11
	// Flight has left its diverted destination airborne en-route to its original destination.
	FlightStatus_INAIR_RECOVERY FlightStatus = 12
	// Flight has landed at is original scheduled destination.
	FlightStatus_ARRIVED_RECOVERY FlightStatus = 13
)

var FlightStatus_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SCHEDULED",
	2:  "DEPARTED",
	3:  "INAIR",
	4:  "LANDED",
	5:  "ARRIVED",
	6:  "CANCELLED",
	7:  "DELAYED",
	8:  "DEPARTED_DIVERTED",
	9:  "INAIR_DIVERTED",
	10: "ARRIVED_DIVERTED",
	11: "DEPARTED_RECOVERY",
	12: "INAIR_RECOVERY",
	13: "ARRIVED_RECOVERY",
}

var FlightStatus_value = map[string]int32{
	"UNKNOWN":           0,
	"SCHEDULED":         1,
	"DEPARTED":          2,
	"INAIR":             3,
	"LANDED":            4,
	"ARRIVED":           5,
	"CANCELLED":         6,
	"DELAYED":           7,
	"DEPARTED_DIVERTED": 8,
	"INAIR_DIVERTED":    9,
	"ARRIVED_DIVERTED":  10,
	"DEPARTED_RECOVERY": 11,
	"INAIR_RECOVERY":    12,
	"ARRIVED_RECOVERY":  13,
}

func (x FlightStatus) String() string {
	return proto.EnumName(FlightStatus_name, int32(x))
}

func (FlightStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_af9334e66a46673f, []int{0}
}

type Flight struct {
	// The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	// The flight number.
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	// Segment of flight, for non-stop flights, this value will always be 1.
	Segment int32 `protobuf:"varint,3,opt,name=segment,proto3" json:"segment,omitempty"`
	// The IATA airport code of the boarding point. Only required is segment is not provided.
	BoardingPoint string `protobuf:"bytes,4,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty"`
	// The IATA airport code of the deplaning point. Only required for direct flights where the passenger is deplaning before the final destination.
	DeplaningPoint string `protobuf:"bytes,5,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty"`
	// The scheduled date of departure.
	DepartureDate *io.Date `protobuf:"bytes,6,opt,name=departureDate,proto3" json:"departureDate,omitempty"`
	// Departure Terminal.
	DepartureTerminal string `protobuf:"bytes,7,opt,name=departureTerminal,proto3" json:"departureTerminal,omitempty"`
	// Arrival Terminal.
	ArrivalTerminal string `protobuf:"bytes,8,opt,name=arrivalTerminal,proto3" json:"arrivalTerminal,omitempty"`
	// Departure Gate.
	DepartureGate string `protobuf:"bytes,9,opt,name=departureGate,proto3" json:"departureGate,omitempty"`
	// Arrival Gate.
	ArrivalGate string `protobuf:"bytes,10,opt,name=arrivalGate,proto3" json:"arrivalGate,omitempty"`
	// The scheduled departure time. If omitted then the departureDate must be specified.
	ScheduledDepartureTime *io.LocalDateTime `protobuf:"bytes,11,opt,name=scheduledDepartureTime,proto3" json:"scheduledDepartureTime,omitempty"`
	// The estimated departure time.
	EstimatedDepartureTime *io.LocalDateTime `protobuf:"bytes,12,opt,name=estimatedDepartureTime,proto3" json:"estimatedDepartureTime,omitempty"`
	// The boarding time.
	BoardingTime *io.LocalDateTime `protobuf:"bytes,13,opt,name=boardingTime,proto3" json:"boardingTime,omitempty"`
	// The time the gate will close.
	GateClosingTime *io.LocalDateTime `protobuf:"bytes,14,opt,name=gateClosingTime,proto3" json:"gateClosingTime,omitempty"`
	// The scheduled arrival time.
	ScheduledArrivalTime *io.LocalDateTime `protobuf:"bytes,15,opt,name=scheduledArrivalTime,proto3" json:"scheduledArrivalTime,omitempty"`
	// The estimated arrival time.
	EstimatedArrivalTime *io.LocalDateTime `protobuf:"bytes,16,opt,name=estimatedArrivalTime,proto3" json:"estimatedArrivalTime,omitempty"`
	// The pass design id, if different to the default design.
	PassDesignId string `protobuf:"bytes,17,opt,name=passDesignId,proto3" json:"passDesignId,omitempty"`
	// Checkin details, if different to the default values.
	CheckInDetails *CheckInDetails `protobuf:"bytes,18,opt,name=checkInDetails,proto3" json:"checkInDetails,omitempty"`
	// The baggage belt at the destination.
	BaggageBelt string `protobuf:"bytes,19,opt,name=baggageBelt,proto3" json:"baggageBelt,omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designated defaults.
	LocationMessages []*io.GPSLocation `protobuf:"bytes,20,rep,name=locationMessages,proto3" json:"locationMessages,omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designated defaults.
	BeaconMessages []*io.Beacon `protobuf:"bytes,21,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty"`
	// A list of links to be appended to the end of each boarding pass.
	Links []*io.Link `protobuf:"bytes,22,rep,name=links,proto3" json:"links,omitempty"`
	// Suspend automatic updates to all boarding passes for this flight.
	SuspendAutomaticUpdates bool `protobuf:"varint,23,opt,name=suspendAutomaticUpdates,proto3" json:"suspendAutomaticUpdates,omitempty"`
	// The status of the flight. This can be manually set, or automatically set for customers subscribing to automatic updates.
	Status FlightStatus `protobuf:"varint,24,opt,name=status,proto3,enum=flights.FlightStatus" json:"status,omitempty"`
	// Issued, installed, uninstalled and invalidated counts. Metrics are not writable.
	Metrics *io.Metrics `protobuf:"bytes,25,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// PassKit offer ID. Hero offers are displayed prominently on the boarding pass. A hero offer can only be applied to the entire flight.
	HeroOfferId string `protobuf:"bytes,26,opt,name=heroOfferId,proto3" json:"heroOfferId,omitempty"`
	// PassKit Offer IDs. For Google Pay, the first offer in this array will also display a promotional image.
	OfferIds             []string `protobuf:"bytes,27,rep,name=offerIds,proto3" json:"offerIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flight) Reset()         { *m = Flight{} }
func (m *Flight) String() string { return proto.CompactTextString(m) }
func (*Flight) ProtoMessage()    {}
func (*Flight) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9334e66a46673f, []int{0}
}

func (m *Flight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flight.Unmarshal(m, b)
}
func (m *Flight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flight.Marshal(b, m, deterministic)
}
func (m *Flight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flight.Merge(m, src)
}
func (m *Flight) XXX_Size() int {
	return xxx_messageInfo_Flight.Size(m)
}
func (m *Flight) XXX_DiscardUnknown() {
	xxx_messageInfo_Flight.DiscardUnknown(m)
}

var xxx_messageInfo_Flight proto.InternalMessageInfo

func (m *Flight) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *Flight) GetFlightNumber() string {
	if m != nil {
		return m.FlightNumber
	}
	return ""
}

func (m *Flight) GetSegment() int32 {
	if m != nil {
		return m.Segment
	}
	return 0
}

func (m *Flight) GetBoardingPoint() string {
	if m != nil {
		return m.BoardingPoint
	}
	return ""
}

func (m *Flight) GetDeplaningPoint() string {
	if m != nil {
		return m.DeplaningPoint
	}
	return ""
}

func (m *Flight) GetDepartureDate() *io.Date {
	if m != nil {
		return m.DepartureDate
	}
	return nil
}

func (m *Flight) GetDepartureTerminal() string {
	if m != nil {
		return m.DepartureTerminal
	}
	return ""
}

func (m *Flight) GetArrivalTerminal() string {
	if m != nil {
		return m.ArrivalTerminal
	}
	return ""
}

func (m *Flight) GetDepartureGate() string {
	if m != nil {
		return m.DepartureGate
	}
	return ""
}

func (m *Flight) GetArrivalGate() string {
	if m != nil {
		return m.ArrivalGate
	}
	return ""
}

func (m *Flight) GetScheduledDepartureTime() *io.LocalDateTime {
	if m != nil {
		return m.ScheduledDepartureTime
	}
	return nil
}

func (m *Flight) GetEstimatedDepartureTime() *io.LocalDateTime {
	if m != nil {
		return m.EstimatedDepartureTime
	}
	return nil
}

func (m *Flight) GetBoardingTime() *io.LocalDateTime {
	if m != nil {
		return m.BoardingTime
	}
	return nil
}

func (m *Flight) GetGateClosingTime() *io.LocalDateTime {
	if m != nil {
		return m.GateClosingTime
	}
	return nil
}

func (m *Flight) GetScheduledArrivalTime() *io.LocalDateTime {
	if m != nil {
		return m.ScheduledArrivalTime
	}
	return nil
}

func (m *Flight) GetEstimatedArrivalTime() *io.LocalDateTime {
	if m != nil {
		return m.EstimatedArrivalTime
	}
	return nil
}

func (m *Flight) GetPassDesignId() string {
	if m != nil {
		return m.PassDesignId
	}
	return ""
}

func (m *Flight) GetCheckInDetails() *CheckInDetails {
	if m != nil {
		return m.CheckInDetails
	}
	return nil
}

func (m *Flight) GetBaggageBelt() string {
	if m != nil {
		return m.BaggageBelt
	}
	return ""
}

func (m *Flight) GetLocationMessages() []*io.GPSLocation {
	if m != nil {
		return m.LocationMessages
	}
	return nil
}

func (m *Flight) GetBeaconMessages() []*io.Beacon {
	if m != nil {
		return m.BeaconMessages
	}
	return nil
}

func (m *Flight) GetLinks() []*io.Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Flight) GetSuspendAutomaticUpdates() bool {
	if m != nil {
		return m.SuspendAutomaticUpdates
	}
	return false
}

func (m *Flight) GetStatus() FlightStatus {
	if m != nil {
		return m.Status
	}
	return FlightStatus_UNKNOWN
}

func (m *Flight) GetMetrics() *io.Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Flight) GetHeroOfferId() string {
	if m != nil {
		return m.HeroOfferId
	}
	return ""
}

func (m *Flight) GetOfferIds() []string {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

// A Flight Request message is used to retrieve or identify an individual flight operation. For direct flights with multiple stops, a segment number or departure point is required.
type FlightRequest struct {
	// The 2 character IATA code or 3 character ICAO code.
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	// The flight number.
	FlightNumber int32 `protobuf:"varint,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	// The date of the flight.
	FlightDate *io.Date `protobuf:"bytes,3,opt,name=flightDate,proto3" json:"flightDate,omitempty"`
	// The segment of the flight. Only required for direct flights with stops where the boarding point is after the first port.
	Segment int32 `protobuf:"varint,4,opt,name=segment,proto3" json:"segment,omitempty"`
	// The IATA airport code for the boarding point of the flight. Only required for direct flights with stops where the boarding point is after the first port and segment is not provided.
	BoardingPoint string `protobuf:"bytes,5,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty"`
	// The IATA airport code for the destination of the flight. Only required for direct flights with stops where the flight ends before the final port.
	DeplaningPoint       string   `protobuf:"bytes,6,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlightRequest) Reset()         { *m = FlightRequest{} }
func (m *FlightRequest) String() string { return proto.CompactTextString(m) }
func (*FlightRequest) ProtoMessage()    {}
func (*FlightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9334e66a46673f, []int{1}
}

func (m *FlightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlightRequest.Unmarshal(m, b)
}
func (m *FlightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlightRequest.Marshal(b, m, deterministic)
}
func (m *FlightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlightRequest.Merge(m, src)
}
func (m *FlightRequest) XXX_Size() int {
	return xxx_messageInfo_FlightRequest.Size(m)
}
func (m *FlightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlightRequest proto.InternalMessageInfo

func (m *FlightRequest) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *FlightRequest) GetFlightNumber() int32 {
	if m != nil {
		return m.FlightNumber
	}
	return 0
}

func (m *FlightRequest) GetFlightDate() *io.Date {
	if m != nil {
		return m.FlightDate
	}
	return nil
}

func (m *FlightRequest) GetSegment() int32 {
	if m != nil {
		return m.Segment
	}
	return 0
}

func (m *FlightRequest) GetBoardingPoint() string {
	if m != nil {
		return m.BoardingPoint
	}
	return ""
}

func (m *FlightRequest) GetDeplaningPoint() string {
	if m != nil {
		return m.DeplaningPoint
	}
	return ""
}

func init() {
	proto.RegisterEnum("flights.FlightStatus", FlightStatus_name, FlightStatus_value)
	proto.RegisterType((*Flight)(nil), "flights.Flight")
	proto.RegisterType((*FlightRequest)(nil), "flights.FlightRequest")
}

func init() { proto.RegisterFile("io/flights/flight.proto", fileDescriptor_af9334e66a46673f) }

var fileDescriptor_af9334e66a46673f = []byte{
	// 1059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xdb, 0x36,
	0x1c, 0x9d, 0xe2, 0xfa, 0x1f, 0xfd, 0x27, 0x0e, 0xd7, 0x34, 0x6a, 0x7a, 0x98, 0x10, 0x74, 0x85,
	0xd7, 0x35, 0x16, 0x90, 0x61, 0xc0, 0xd0, 0x1d, 0x06, 0xc5, 0xd2, 0x3a, 0xa3, 0xae, 0x1b, 0x28,
	0x6d, 0x86, 0xee, 0x12, 0xd0, 0xd2, 0x2f, 0x32, 0x17, 0x49, 0xf4, 0x44, 0x3a, 0xcb, 0x6e, 0x3b,
	0x0f, 0xd8, 0x61, 0xf9, 0x04, 0x3b, 0xef, 0xcb, 0x0c, 0xc8, 0xa7, 0x19, 0x76, 0x1a, 0x48, 0xc9,
	0xb2, 0xe4, 0xc4, 0xa7, 0x9d, 0x24, 0xbe, 0xf7, 0x7e, 0x4f, 0x3f, 0x52, 0xe4, 0x93, 0xd0, 0x1e,
	0x65, 0xe6, 0x45, 0x48, 0x83, 0x99, 0xe0, 0xd9, 0x75, 0x30, 0x4f, 0x98, 0x60, 0xb8, 0x9e, 0xa1,
	0xfb, 0x9f, 0x04, 0x8c, 0x05, 0x21, 0x98, 0x0a, 0x9e, 0x2e, 0x2e, 0x4c, 0x41, 0x23, 0xe0, 0x82,
	0x44, 0xf3, 0x54, 0xb9, 0xff, 0x84, 0x32, 0x93, 0xcc, 0xa9, 0xe9, 0xb1, 0x28, 0x62, 0xf1, 0x39,
	0x9b, 0xfe, 0x08, 0x9e, 0xe0, 0x19, 0xf9, 0x98, 0xb2, 0x8c, 0x90, 0x06, 0xd7, 0x34, 0xa2, 0xe2,
	0x97, 0x8c, 0xda, 0x5d, 0x51, 0x21, 0x8d, 0x2f, 0x97, 0x15, 0x7b, 0x2b, 0x38, 0x02, 0x91, 0x50,
	0x6f, 0x49, 0x1c, 0xdc, 0x69, 0xf5, 0xdc, 0x07, 0x4e, 0x83, 0x98, 0x08, 0x96, 0x64, 0x9a, 0x17,
	0xea, 0xe2, 0x1d, 0x06, 0x10, 0x1f, 0xf2, 0x9f, 0x49, 0x10, 0x40, 0x62, 0xb2, 0xb9, 0xa0, 0x2c,
	0xe6, 0x26, 0x89, 0x63, 0x26, 0x88, 0xba, 0x4f, 0xd5, 0x07, 0x7f, 0xb7, 0x50, 0xed, 0x5b, 0xe5,
	0x84, 0x9f, 0xa3, 0x96, 0x47, 0x92, 0x84, 0x42, 0x32, 0x64, 0x3e, 0xe8, 0x9a, 0xa1, 0xf5, 0x9b,
	0xc7, 0x8d, 0x1b, 0xab, 0x7a, 0x5d, 0xf9, 0x55, 0xdb, 0x72, 0x8b, 0x24, 0xfe, 0x0c, 0xb5, 0xd3,
	0xe7, 0x4f, 0x16, 0xd1, 0x14, 0x12, 0x7d, 0x4b, 0x89, 0xab, 0x37, 0xd6, 0xd6, 0x75, 0xd5, 0x2d,
	0x51, 0x58, 0x47, 0x75, 0x0e, 0x41, 0x04, 0xb1, 0xd0, 0x2b, 0x86, 0xd6, 0xaf, 0xba, 0xcb, 0x21,
	0xfe, 0x1c, 0x75, 0xa6, 0x8c, 0x24, 0x3e, 0x8d, 0x83, 0x13, 0x46, 0x63, 0xa1, 0x3f, 0x58, 0xb9,
	0x54, 0xdc, 0x32, 0x87, 0x0f, 0x51, 0xd7, 0x87, 0x79, 0x48, 0xe2, 0x5c, 0x5d, 0x2d, 0xaa, 0xd7,
	0x48, 0x3c, 0x40, 0x1d, 0x1f, 0xe6, 0x24, 0x11, 0x8b, 0x04, 0x6c, 0x22, 0x40, 0xaf, 0x19, 0x5a,
	0xbf, 0x75, 0xd4, 0x18, 0x50, 0x36, 0x90, 0x63, 0xb7, 0x4c, 0xe3, 0x17, 0x68, 0x27, 0x07, 0xde,
	0x41, 0x12, 0xd1, 0x98, 0x84, 0x7a, 0x5d, 0x3e, 0xc1, 0xbd, 0x4b, 0xe0, 0x3e, 0xda, 0x96, 0x8b,
	0x71, 0x45, 0xc2, 0x5c, 0xdb, 0x50, 0xda, 0x75, 0x18, 0x3f, 0x2d, 0xf4, 0xf1, 0x4a, 0xf6, 0xd1,
	0x54, 0xba, 0x32, 0x88, 0x0d, 0xd4, 0xca, 0x0a, 0x95, 0x06, 0x29, 0x4d, 0x11, 0xc2, 0x23, 0xf4,
	0x88, 0x7b, 0x33, 0xf0, 0x17, 0x21, 0xf8, 0x76, 0xde, 0x0f, 0x8d, 0x40, 0x6f, 0xa9, 0x89, 0xed,
	0xc8, 0x89, 0x8d, 0x99, 0x47, 0x42, 0x39, 0x1d, 0x49, 0xb8, 0x1b, 0x0a, 0xa4, 0x15, 0x70, 0x41,
	0x23, 0x22, 0xd6, 0xad, 0xda, 0x1b, 0xad, 0xee, 0x2f, 0xc0, 0x5f, 0xa2, 0xf6, 0xf2, 0x2d, 0x29,
	0x83, 0xce, 0x26, 0x83, 0x92, 0x0c, 0x7f, 0x8d, 0xb6, 0x03, 0x22, 0x60, 0x18, 0x32, 0xbe, 0xac,
	0xec, 0x6e, 0xaa, 0x5c, 0x57, 0x62, 0x07, 0x3d, 0xcc, 0x27, 0x66, 0x65, 0xab, 0x2d, 0x1d, 0xb6,
	0x37, 0x39, 0xdc, 0x2b, 0x97, 0x36, 0xf9, 0xa4, 0x8a, 0x36, 0xbd, 0x8d, 0x36, 0xf7, 0xc9, 0xf1,
	0x01, 0x6a, 0xcf, 0x09, 0xe7, 0xb6, 0x3a, 0x85, 0x23, 0x5f, 0xdf, 0x51, 0xaf, 0xae, 0x84, 0xe1,
	0x6f, 0x50, 0xd7, 0x9b, 0x81, 0x77, 0x39, 0x8a, 0x6d, 0x10, 0x84, 0x86, 0x5c, 0xc7, 0xea, 0x21,
	0x7b, 0x83, 0xec, 0x2c, 0x0f, 0x86, 0x25, 0xda, 0x5d, 0x93, 0xcb, 0xed, 0x31, 0x25, 0x41, 0x40,
	0x02, 0x38, 0x86, 0x50, 0xe8, 0x1f, 0xa7, 0xdb, 0xa3, 0x00, 0xe1, 0x21, 0xea, 0x85, 0xcc, 0x53,
	0x27, 0xfb, 0x0d, 0x70, 0x4e, 0x02, 0xe0, 0xfa, 0x43, 0xa3, 0xd2, 0x6f, 0x1d, 0x6d, 0xcb, 0x99,
	0xbc, 0x3a, 0x39, 0x1d, 0x67, 0xf4, 0x71, 0xed, 0xc6, 0xaa, 0xfc, 0xa9, 0x21, 0xf7, 0x4e, 0x01,
	0x7e, 0x89, 0xba, 0x53, 0x20, 0x5e, 0xc1, 0x62, 0x57, 0x59, 0x20, 0x69, 0x71, 0xac, 0x98, 0xbc,
	0x7a, 0x4d, 0x89, 0x9f, 0xa1, 0xaa, 0x4a, 0x30, 0xfd, 0x91, 0x2a, 0x51, 0xe7, 0x6c, 0x4c, 0xe3,
	0xcb, 0xbc, 0x20, 0xa5, 0xf1, 0x57, 0x68, 0x8f, 0x2f, 0xf8, 0x1c, 0x62, 0xdf, 0x5a, 0x08, 0x16,
	0x11, 0x41, 0xbd, 0xf7, 0x73, 0x9f, 0x08, 0xe0, 0xfa, 0x9e, 0xa1, 0xf5, 0x1b, 0xee, 0x26, 0x1a,
	0x1f, 0xa2, 0x1a, 0x17, 0x44, 0x2c, 0xb8, 0xae, 0x1b, 0x5a, 0xbf, 0x7b, 0xb4, 0x9b, 0xaf, 0x5e,
	0x9a, 0x5f, 0xa7, 0x8a, 0x74, 0x33, 0x11, 0xfe, 0x14, 0xd5, 0xb3, 0xec, 0xd4, 0x1f, 0xab, 0xd5,
	0x6e, 0xc9, 0x96, 0xde, 0xa4, 0x90, 0xbb, 0xe4, 0xe4, 0xd2, 0xce, 0x20, 0x61, 0x6f, 0x2f, 0x2e,
	0x20, 0x19, 0xf9, 0xfa, 0x7e, 0xba, 0xb4, 0x05, 0x08, 0xef, 0xa3, 0x06, 0x4b, 0x6f, 0xb9, 0xfe,
	0xc4, 0xa8, 0xf4, 0x9b, 0x6e, 0x3e, 0x7e, 0xf9, 0x87, 0x76, 0x63, 0xfd, 0xae, 0xa1, 0xdf, 0xb4,
	0xe7, 0x59, 0x88, 0x1e, 0x9d, 0x5a, 0x46, 0xda, 0x96, 0x91, 0x80, 0xc7, 0x12, 0xdf, 0xf0, 0x81,
	0x7b, 0x09, 0x9d, 0x02, 0x37, 0x7c, 0x22, 0x88, 0x21, 0x66, 0x44, 0x18, 0x94, 0x1b, 0x09, 0x84,
	0x70, 0x45, 0x62, 0x61, 0x08, 0x66, 0x10, 0x43, 0x6e, 0xee, 0x10, 0x96, 0x95, 0x2c, 0x36, 0x88,
	0x11, 0xd0, 0x2b, 0x88, 0x65, 0x0d, 0x0c, 0x6e, 0xb5, 0x62, 0xf6, 0xde, 0x6a, 0xa5, 0x7c, 0xbd,
	0xd5, 0xca, 0x49, 0x76, 0xf0, 0x8f, 0x86, 0x3a, 0x69, 0x33, 0x2e, 0xfc, 0xb4, 0x00, 0xfe, 0xff,
	0x83, 0xbd, 0x7a, 0x7f, 0xb0, 0xf7, 0x11, 0x4a, 0xc7, 0x2a, 0x5f, 0x2b, 0x6b, 0xf9, 0x5a, 0xe0,
	0x8a, 0x9f, 0x80, 0x07, 0xe5, 0x4f, 0xc0, 0xd3, 0xf5, 0x4f, 0x40, 0x35, 0x8d, 0xc7, 0x72, 0xf6,
	0x3f, 0xbb, 0x93, 0xfd, 0x35, 0x25, 0x5b, 0x43, 0x9f, 0xff, 0xab, 0xa1, 0x76, 0x71, 0x33, 0xe0,
	0x16, 0xaa, 0xbf, 0x9f, 0xbc, 0x9e, 0xbc, 0xfd, 0x7e, 0xd2, 0xfb, 0x08, 0x77, 0x50, 0xf3, 0x74,
	0xf8, 0x9d, 0x63, 0xbf, 0x1f, 0x3b, 0x76, 0x4f, 0xc3, 0x6d, 0xd4, 0xb0, 0x9d, 0x13, 0xcb, 0x7d,
	0xe7, 0xd8, 0xbd, 0x2d, 0xdc, 0x44, 0xd5, 0xd1, 0xc4, 0x1a, 0xb9, 0xbd, 0x0a, 0x46, 0xa8, 0x36,
	0xb6, 0x26, 0xb6, 0x63, 0xf7, 0x1e, 0x48, 0x03, 0xcb, 0x75, 0x47, 0x67, 0x8e, 0xdd, 0xab, 0x4a,
	0x83, 0xa1, 0x35, 0x19, 0x3a, 0x63, 0x69, 0x50, 0x93, 0x9c, 0xed, 0x8c, 0xad, 0x0f, 0x8e, 0xdd,
	0xab, 0xe3, 0x5d, 0xb4, 0xb3, 0x74, 0x3b, 0xb7, 0x47, 0x67, 0x8e, 0xb2, 0x6d, 0x60, 0x8c, 0xba,
	0xca, 0x76, 0x85, 0x35, 0xf1, 0x43, 0xd4, 0xcb, 0x3c, 0x57, 0x28, 0x2a, 0x19, 0xb8, 0xce, 0xf0,
	0xed, 0x99, 0xe3, 0x7e, 0xe8, 0xb5, 0x56, 0x06, 0x39, 0xd6, 0x2e, 0x1a, 0xe4, 0x68, 0xe7, 0xf8,
	0x54, 0xfe, 0xc8, 0x0c, 0x64, 0xf0, 0x5c, 0x52, 0x31, 0x38, 0x79, 0x4d, 0x59, 0x76, 0x30, 0xf8,
	0x0f, 0x2f, 0xb8, 0x20, 0x7c, 0x96, 0x73, 0x1e, 0x8b, 0x4c, 0xca, 0xcc, 0x88, 0xf9, 0x10, 0x9a,
	0xdc, 0xbf, 0x34, 0x03, 0x66, 0xae, 0x7e, 0x2c, 0xfe, 0xda, 0x6a, 0x9e, 0xbc, 0xce, 0x2a, 0xa7,
	0x35, 0xf5, 0x97, 0xf0, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x80, 0x15, 0xe0, 0x24,
	0x09, 0x00, 0x00,
}
