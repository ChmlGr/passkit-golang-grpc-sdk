// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/barcode.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
type PassengerStatus int32

const (
	// Ticket issuance/passenger not checked in
	PassengerStatus_ISSUED_NOT_CHECKED_IN PassengerStatus = 0
	// Ticket issuance/passenger checked in
	PassengerStatus_ISSUED_CHECKED_IN PassengerStatus = 1
	// Baggage checked - passenger not checked in
	PassengerStatus_BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN PassengerStatus = 2
	// Baggage checked - passenger checked in
	PassengerStatus_BAGGAGE_CHECKED_PASSENGER_CHECKED_IN PassengerStatus = 3
	// Passenger passed security check
	PassengerStatus_PASSENGER_PASSED_SECURITY_CHECK PassengerStatus = 4
	// Passenger passed gate and exit (coupon used)
	PassengerStatus_PASSENGER_PASSED_GATE PassengerStatus = 5
	// Transit
	PassengerStatus_TRANSIT PassengerStatus = 6
	// Standby. Seat number not printed on boarding pass at time of check in
	PassengerStatus_STANDBY PassengerStatus = 7
	// Boarding data re-validation done
	PassengerStatus_BOARDING_DATA_REVALIDATION_DONE PassengerStatus = 8
	// Original boarding line used at time of ticket issuance
	PassengerStatus_ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE PassengerStatus = 9
	// Up or down grading required
	PassengerStatus_UP_OR_DOWN_GRADING_REQUIRED PassengerStatus = 10
)

var PassengerStatus_name = map[int32]string{
	0:  "ISSUED_NOT_CHECKED_IN",
	1:  "ISSUED_CHECKED_IN",
	2:  "BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN",
	3:  "BAGGAGE_CHECKED_PASSENGER_CHECKED_IN",
	4:  "PASSENGER_PASSED_SECURITY_CHECK",
	5:  "PASSENGER_PASSED_GATE",
	6:  "TRANSIT",
	7:  "STANDBY",
	8:  "BOARDING_DATA_REVALIDATION_DONE",
	9:  "ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE",
	10: "UP_OR_DOWN_GRADING_REQUIRED",
}

var PassengerStatus_value = map[string]int32{
	"ISSUED_NOT_CHECKED_IN":                          0,
	"ISSUED_CHECKED_IN":                              1,
	"BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN":       2,
	"BAGGAGE_CHECKED_PASSENGER_CHECKED_IN":           3,
	"PASSENGER_PASSED_SECURITY_CHECK":                4,
	"PASSENGER_PASSED_GATE":                          5,
	"TRANSIT":                                        6,
	"STANDBY":                                        7,
	"BOARDING_DATA_REVALIDATION_DONE":                8,
	"ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE": 9,
	"UP_OR_DOWN_GRADING_REQUIRED":                    10,
}

func (x PassengerStatus) String() string {
	return proto.EnumName(PassengerStatus_name, int32(x))
}

func (PassengerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{0}
}

// Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
type PassengerDescription int32

const (
	// Adult
	PassengerDescription_ADULT PassengerDescription = 0
	// Adult male
	PassengerDescription_MALE PassengerDescription = 1
	// Adult female
	PassengerDescription_FEMALE PassengerDescription = 2
	// Child
	PassengerDescription_CHILD PassengerDescription = 3
	// Infant
	PassengerDescription_INFANT PassengerDescription = 4
	// No passenger (cabin baggage)
	PassengerDescription_NO_PASSENGER PassengerDescription = 5
	// Adult travelling with infant
	PassengerDescription_ADULT_WITH_INFANT PassengerDescription = 6
	// Unaccompanied minor
	PassengerDescription_UNACCOMPANIED_MINOR PassengerDescription = 7
)

var PassengerDescription_name = map[int32]string{
	0: "ADULT",
	1: "MALE",
	2: "FEMALE",
	3: "CHILD",
	4: "INFANT",
	5: "NO_PASSENGER",
	6: "ADULT_WITH_INFANT",
	7: "UNACCOMPANIED_MINOR",
}

var PassengerDescription_value = map[string]int32{
	"ADULT":               0,
	"MALE":                1,
	"FEMALE":              2,
	"CHILD":               3,
	"INFANT":              4,
	"NO_PASSENGER":        5,
	"ADULT_WITH_INFANT":   6,
	"UNACCOMPANIED_MINOR": 7,
}

func (x PassengerDescription) String() string {
	return proto.EnumName(PassengerDescription_name, int32(x))
}

func (PassengerDescription) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{1}
}

// Source of transaction.
type Source int32

const (
	// Web
	Source_W Source = 0
	// Airport Kiosk
	Source_K Source = 1
	// Transfer kiosk
	Source_X Source = 2
	// Remote / off-site kiosk
	Source_R Source = 3
	// Mobile device
	Source_M Source = 4
	// Airport agent
	Source_O Source = 5
	// Town agent
	Source_T Source = 6
	// Third party vendor
	Source_V Source = 7
)

var Source_name = map[int32]string{
	0: "W",
	1: "K",
	2: "X",
	3: "R",
	4: "M",
	5: "O",
	6: "T",
	7: "V",
}

var Source_value = map[string]int32{
	"W": 0,
	"K": 1,
	"X": 2,
	"R": 3,
	"M": 4,
	"O": 5,
	"T": 6,
	"V": 7,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}

func (Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{2}
}

// Document type that the barcode represents.
type DocType int32

const (
	// Boarding pass
	DocType_B DocType = 0
	// Itinerary receipt
	DocType_I DocType = 1
)

var DocType_name = map[int32]string{
	0: "B",
	1: "I",
}

var DocType_value = map[string]int32{
	"B": 0,
	"I": 1,
}

func (x DocType) String() string {
	return proto.EnumName(DocType_name, int32(x))
}

func (DocType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{3}
}

// International Documentation Verification.
type InternationalDocVerification int32

const (
	// No travel document verification required
	InternationalDocVerification_NOT_REQUIRED InternationalDocVerification = 0
	// Travel document verification required before boarding
	InternationalDocVerification_REQUIRED InternationalDocVerification = 1
	// Travel document verification successfully completed
	InternationalDocVerification_COMPLETED InternationalDocVerification = 2
)

var InternationalDocVerification_name = map[int32]string{
	0: "NOT_REQUIRED",
	1: "REQUIRED",
	2: "COMPLETED",
}

var InternationalDocVerification_value = map[string]int32{
	"NOT_REQUIRED": 0,
	"REQUIRED":     1,
	"COMPLETED":    2,
}

func (x InternationalDocVerification) String() string {
	return proto.EnumName(InternationalDocVerification_name, int32(x))
}

func (InternationalDocVerification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{4}
}

// Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
type IDADIndicator int32

const (
	// Industry discount, other carrier employee/all other eligible persons, firm reservation
	IDADIndicator_IDN1 IDADIndicator = 0
	// Industry discount, other carrier employee/all other eligible persons, space available
	IDADIndicator_IDN2 IDADIndicator = 1
	// Industry discount, other carrier employee travelling on duty, firm reservation
	IDADIndicator_IDB1 IDADIndicator = 2
	// Industry discount, other carrier employee travelling on duty, pace available
	IDADIndicator_IDB2 IDADIndicator = 3
	// Ticket issued pursuant to Resolution 880
	IDADIndicator_AD IDADIndicator = 4
	// Ticket issued pursuant to Resolution 200g
	IDADIndicator_DG IDADIndicator = 5
	// Discount not covered by industry regulations (for online use only)
	IDADIndicator_DM IDADIndicator = 6
	// Ticket issued pursuant to Resolution 886
	IDADIndicator_GE IDADIndicator = 7
	// Ticket issued pursuant to Resolution 788
	IDADIndicator_IG IDADIndicator = 8
	// Ticket issued pursuant to Resolution 888
	IDADIndicator_RG IDADIndicator = 9
	// Ticket issued pursuant to Resolution 884
	IDADIndicator_UD IDADIndicator = 10
	// Industry discount ticket - no classification designator
	IDADIndicator_ID IDADIndicator = 11
	// Industry discount, member's own employee travelling on duty, firm reservation
	IDADIndicator_IDFS1 IDADIndicator = 12
	// Industry discount, member's own employee travelling on duty, space available
	IDADIndicator_IDFS2 IDADIndicator = 13
	// Industry discount, member's own employee/dependant, firm reservation
	IDADIndicator_IDR1 IDADIndicator = 14
	// Industry discount, member's own employee/dependant, space available
	IDADIndicator_IDR2 IDADIndicator = 15
)

var IDADIndicator_name = map[int32]string{
	0:  "IDN1",
	1:  "IDN2",
	2:  "IDB1",
	3:  "IDB2",
	4:  "AD",
	5:  "DG",
	6:  "DM",
	7:  "GE",
	8:  "IG",
	9:  "RG",
	10: "UD",
	11: "ID",
	12: "IDFS1",
	13: "IDFS2",
	14: "IDR1",
	15: "IDR2",
}

var IDADIndicator_value = map[string]int32{
	"IDN1":  0,
	"IDN2":  1,
	"IDB1":  2,
	"IDB2":  3,
	"AD":    4,
	"DG":    5,
	"DM":    6,
	"GE":    7,
	"IG":    8,
	"RG":    9,
	"UD":    10,
	"ID":    11,
	"IDFS1": 12,
	"IDFS2": 13,
	"IDR1":  14,
	"IDR2":  15,
}

func (x IDADIndicator) String() string {
	return proto.EnumName(IDADIndicator_name, int32(x))
}

func (IDADIndicator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{5}
}

// Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
type SelecteeIndicator int32

const (
	// Not selected for special security screening
	SelecteeIndicator_NOT_SELECTEE SelecteeIndicator = 0
	// Selected for special security screening
	SelecteeIndicator_SELECTEE SelecteeIndicator = 1
	// Passenger eligible for TSA PreCheck®
	SelecteeIndicator_TSA_PRECHECK SelecteeIndicator = 3
)

var SelecteeIndicator_name = map[int32]string{
	0: "NOT_SELECTEE",
	1: "SELECTEE",
	3: "TSA_PRECHECK",
}

var SelecteeIndicator_value = map[string]int32{
	"NOT_SELECTEE": 0,
	"SELECTEE":     1,
	"TSA_PRECHECK": 3,
}

func (x SelecteeIndicator) String() string {
	return proto.EnumName(SelecteeIndicator_name, int32(x))
}

func (SelecteeIndicator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{6}
}

// Passenger eligibility for Fast-track privileges.
type FastTrack int32

const (
	// Not Eligible
	FastTrack_N FastTrack = 0
	// Eligible
	FastTrack_Y FastTrack = 1
)

var FastTrack_name = map[int32]string{
	0: "N",
	1: "Y",
}

var FastTrack_value = map[string]int32{
	"N": 0,
	"Y": 1,
}

func (x FastTrack) String() string {
	return proto.EnumName(FastTrack_name, int32(x))
}

func (FastTrack) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{7}
}

// Conditional items for the flight segment as described in IATA PSC Resolution 792.  Note: items supplied or derived through other objects (E.g. Frequent Flyer information) are not supplied here.
type ConditionalItems struct {
	// Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
	PassengerDescription PassengerDescription `protobuf:"varint,1,opt,name=passengerDescription,proto3,enum=flights.PassengerDescription" json:"passengerDescription,omitempty"`
	// Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
	CheckInSource Source `protobuf:"varint,2,opt,name=checkInSource,proto3,enum=flights.Source" json:"checkInSource,omitempty"`
	// Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
	BoardingPassIssuanceSource Source `protobuf:"varint,3,opt,name=boardingPassIssuanceSource,proto3,enum=flights.Source" json:"boardingPassIssuanceSource,omitempty"`
	// Date of boarding pass issuance, local to the boarding point.
	BoardingPassIssueDate *io.Date `protobuf:"bytes,4,opt,name=boardingPassIssueDate,proto3" json:"boardingPassIssueDate,omitempty"`
	// Document type that the barcode represents.
	DocumentType DocType `protobuf:"varint,5,opt,name=documentType,proto3,enum=flights.DocType" json:"documentType,omitempty"`
	// IATA or ICAO designator of boarding pass issuer.
	BoardingPassIssuer string `protobuf:"bytes,6,opt,name=boardingPassIssuer,proto3" json:"boardingPassIssuer,omitempty"`
	// This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.\n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.\n2-4: carrier numeric code.\n5-10: carrier initial tag number (leading zeros).\n11-13: number of consecutive tags (allows for up to 999 tags).\nUp to 2 additional, non-consecutive tags can be added.
	BaggageTagNumber []string `protobuf:"bytes,7,rep,name=baggageTagNumber,proto3" json:"baggageTagNumber,omitempty"`
	// Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
	SelecteeIndicator SelecteeIndicator `protobuf:"varint,8,opt,name=selecteeIndicator,proto3,enum=flights.SelecteeIndicator" json:"selecteeIndicator,omitempty"`
	// International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
	InternationalDocVerification InternationalDocVerification `protobuf:"varint,9,opt,name=internationalDocVerification,proto3,enum=flights.InternationalDocVerification" json:"internationalDocVerification,omitempty"`
	// Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
	IdadIndicator IDADIndicator `protobuf:"varint,10,opt,name=idadIndicator,proto3,enum=flights.IDADIndicator" json:"idadIndicator,omitempty"`
	// Passenger eligibility for Fast-track privileges.
	FastTrack            FastTrack `protobuf:"varint,11,opt,name=fastTrack,proto3,enum=flights.FastTrack" json:"fastTrack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConditionalItems) Reset()         { *m = ConditionalItems{} }
func (m *ConditionalItems) String() string { return proto.CompactTextString(m) }
func (*ConditionalItems) ProtoMessage()    {}
func (*ConditionalItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_00a35f1da235ff26, []int{0}
}

func (m *ConditionalItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalItems.Unmarshal(m, b)
}
func (m *ConditionalItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalItems.Marshal(b, m, deterministic)
}
func (m *ConditionalItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalItems.Merge(m, src)
}
func (m *ConditionalItems) XXX_Size() int {
	return xxx_messageInfo_ConditionalItems.Size(m)
}
func (m *ConditionalItems) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalItems.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalItems proto.InternalMessageInfo

func (m *ConditionalItems) GetPassengerDescription() PassengerDescription {
	if m != nil {
		return m.PassengerDescription
	}
	return PassengerDescription_ADULT
}

func (m *ConditionalItems) GetCheckInSource() Source {
	if m != nil {
		return m.CheckInSource
	}
	return Source_W
}

func (m *ConditionalItems) GetBoardingPassIssuanceSource() Source {
	if m != nil {
		return m.BoardingPassIssuanceSource
	}
	return Source_W
}

func (m *ConditionalItems) GetBoardingPassIssueDate() *io.Date {
	if m != nil {
		return m.BoardingPassIssueDate
	}
	return nil
}

func (m *ConditionalItems) GetDocumentType() DocType {
	if m != nil {
		return m.DocumentType
	}
	return DocType_B
}

func (m *ConditionalItems) GetBoardingPassIssuer() string {
	if m != nil {
		return m.BoardingPassIssuer
	}
	return ""
}

func (m *ConditionalItems) GetBaggageTagNumber() []string {
	if m != nil {
		return m.BaggageTagNumber
	}
	return nil
}

func (m *ConditionalItems) GetSelecteeIndicator() SelecteeIndicator {
	if m != nil {
		return m.SelecteeIndicator
	}
	return SelecteeIndicator_NOT_SELECTEE
}

func (m *ConditionalItems) GetInternationalDocVerification() InternationalDocVerification {
	if m != nil {
		return m.InternationalDocVerification
	}
	return InternationalDocVerification_NOT_REQUIRED
}

func (m *ConditionalItems) GetIdadIndicator() IDADIndicator {
	if m != nil {
		return m.IdadIndicator
	}
	return IDADIndicator_IDN1
}

func (m *ConditionalItems) GetFastTrack() FastTrack {
	if m != nil {
		return m.FastTrack
	}
	return FastTrack_N
}

func init() {
	proto.RegisterEnum("flights.PassengerStatus", PassengerStatus_name, PassengerStatus_value)
	proto.RegisterEnum("flights.PassengerDescription", PassengerDescription_name, PassengerDescription_value)
	proto.RegisterEnum("flights.Source", Source_name, Source_value)
	proto.RegisterEnum("flights.DocType", DocType_name, DocType_value)
	proto.RegisterEnum("flights.InternationalDocVerification", InternationalDocVerification_name, InternationalDocVerification_value)
	proto.RegisterEnum("flights.IDADIndicator", IDADIndicator_name, IDADIndicator_value)
	proto.RegisterEnum("flights.SelecteeIndicator", SelecteeIndicator_name, SelecteeIndicator_value)
	proto.RegisterEnum("flights.FastTrack", FastTrack_name, FastTrack_value)
	proto.RegisterType((*ConditionalItems)(nil), "flights.ConditionalItems")
}

func init() { proto.RegisterFile("io/flights/barcode.proto", fileDescriptor_00a35f1da235ff26) }

var fileDescriptor_00a35f1da235ff26 = []byte{
	// 1301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x36, 0x65, 0xfd, 0x58, 0x63, 0x3b, 0x99, 0xcc, 0x4d, 0x6e, 0x14, 0x27, 0x17, 0x19, 0xdc,
	0xb6, 0x80, 0x22, 0xd8, 0x94, 0x25, 0x27, 0x28, 0x12, 0x14, 0x45, 0x29, 0x91, 0x96, 0x07, 0x96,
	0x29, 0x87, 0xa2, 0x92, 0xa6, 0x1b, 0x62, 0x44, 0x8e, 0xe8, 0xa9, 0x69, 0x8e, 0xc0, 0xa1, 0x1a,
	0xa4, 0xab, 0x3e, 0x42, 0xd1, 0xae, 0xba, 0xec, 0x36, 0x40, 0x17, 0x7d, 0xa1, 0x2e, 0xfa, 0x02,
	0x7d, 0x85, 0x62, 0x48, 0x59, 0xf2, 0x5f, 0xbc, 0x3a, 0x67, 0xce, 0xf9, 0xce, 0x37, 0x1f, 0xcf,
	0xcc, 0x21, 0x09, 0x6a, 0x5c, 0x34, 0x27, 0x11, 0x0f, 0x4f, 0x52, 0xd9, 0x1c, 0xd3, 0xc4, 0x17,
	0x01, 0xd3, 0xa7, 0x89, 0x48, 0x05, 0xaa, 0xcc, 0xc3, 0x5b, 0x8f, 0xb9, 0x68, 0xd2, 0x29, 0x6f,
	0xfa, 0xe2, 0xec, 0x4c, 0xc4, 0x9e, 0x18, 0x7f, 0xcf, 0xfc, 0x54, 0xe6, 0xa8, 0xad, 0xed, 0xcc,
	0xf8, 0x3b, 0x21, 0x8b, 0x77, 0xe4, 0x7b, 0x1a, 0x86, 0x2c, 0x69, 0x8a, 0x69, 0xca, 0x45, 0x2c,
	0x9b, 0x34, 0x8e, 0x45, 0x4a, 0x33, 0x3f, 0x47, 0xff, 0xff, 0x37, 0x00, 0x60, 0x57, 0xc4, 0x01,
	0x57, 0x41, 0x1a, 0x91, 0x94, 0x9d, 0x49, 0xf4, 0x1a, 0xdc, 0x9f, 0x52, 0x29, 0x59, 0x1c, 0xb2,
	0xc4, 0x64, 0xd2, 0x4f, 0x78, 0x56, 0x5f, 0xd3, 0xb0, 0x56, 0xbf, 0xd3, 0xfe, 0x9f, 0x3e, 0xd7,
	0xa1, 0x1f, 0xdf, 0x00, 0x72, 0x6e, 0x2c, 0x45, 0x2f, 0xc0, 0xa6, 0x7f, 0xc2, 0xfc, 0x53, 0x12,
	0x0f, 0xc5, 0x2c, 0xf1, 0x59, 0xad, 0x90, 0x71, 0xdd, 0x5d, 0x70, 0xe5, 0x61, 0xe7, 0x32, 0x0a,
	0x0d, 0xc0, 0xd6, 0x58, 0xd0, 0x24, 0xe0, 0x71, 0xa8, 0x36, 0x23, 0x52, 0xce, 0x68, 0xec, 0xb3,
	0x39, 0xc7, 0xea, 0xcd, 0x1c, 0xb7, 0x94, 0xa0, 0xaf, 0xc1, 0x83, 0xab, 0x59, 0x66, 0xd2, 0x94,
	0xd5, 0x8a, 0x58, 0xab, 0xaf, 0xb7, 0xd7, 0x74, 0x2e, 0x74, 0xb5, 0x76, 0x6e, 0x86, 0xa1, 0xe7,
	0x60, 0x23, 0x10, 0xfe, 0xec, 0x8c, 0xc5, 0xa9, 0xfb, 0x61, 0xca, 0x6a, 0xa5, 0x4c, 0x02, 0x5c,
	0x48, 0x30, 0x85, 0xaf, 0xe2, 0xce, 0x25, 0x14, 0xd2, 0x01, 0xba, 0x46, 0x97, 0xd4, 0xca, 0x58,
	0xab, 0x57, 0x9d, 0x1b, 0x32, 0xe8, 0xaf, 0x22, 0x80, 0x63, 0x1a, 0x86, 0x34, 0x64, 0x2e, 0x0d,
	0xed, 0xd9, 0xd9, 0x98, 0x25, 0xb5, 0x0a, 0x5e, 0xad, 0x57, 0x3b, 0x7f, 0x16, 0x7f, 0x31, 0xfe,
	0x28, 0xb6, 0x3f, 0x16, 0xdd, 0x13, 0x2e, 0xf1, 0x84, 0xb3, 0x28, 0xc0, 0x34, 0x8a, 0xc4, 0x7b,
	0x89, 0x7d, 0x9a, 0x24, 0x9c, 0x25, 0x12, 0xa7, 0x02, 0x4f, 0xc5, 0x74, 0x16, 0xd1, 0x94, 0xe1,
	0x39, 0x0d, 0x4e, 0x69, 0x88, 0xe3, 0x8c, 0x48, 0x62, 0x1a, 0x07, 0x38, 0x3d, 0x61, 0xf3, 0x35,
	0x16, 0x13, 0xec, 0x8b, 0x58, 0x32, 0x7f, 0x96, 0xf2, 0x1f, 0xb2, 0x0a, 0xa9, 0x63, 0x92, 0xaa,
	0x60, 0x4a, 0x79, 0x2c, 0x71, 0x6b, 0x0f, 0xfb, 0x27, 0x34, 0xa1, 0x7e, 0xaa, 0xaa, 0x7d, 0x91,
	0x24, 0x4c, 0x4e, 0xd5, 0xa5, 0x89, 0x43, 0xb5, 0x97, 0xa2, 0x6a, 0xed, 0xe2, 0x80, 0x87, 0x3c,
	0x55, 0xd5, 0x17, 0xf6, 0xda, 0xc6, 0x54, 0xe2, 0x29, 0x4b, 0x30, 0x31, 0x5c, 0x03, 0x77, 0xba,
	0x47, 0x58, 0x4e, 0x99, 0xcf, 0x27, 0xdc, 0xcf, 0x6f, 0xe1, 0x36, 0x76, 0x98, 0x14, 0xd1, 0x4c,
	0x2d, 0xf0, 0x97, 0xcf, 0x77, 0x33, 0x69, 0x7b, 0x39, 0x95, 0xc4, 0x3c, 0x60, 0x71, 0xca, 0x27,
	0x1f, 0xb2, 0x7d, 0x3e, 0xa9, 0x37, 0x55, 0x7a, 0x41, 0xeb, 0x15, 0x8e, 0x18, 0xcd, 0x24, 0xe5,
	0x42, 0xfe, 0xfe, 0xe9, 0x57, 0xbc, 0x8b, 0x27, 0x22, 0xc1, 0x3c, 0x4e, 0x59, 0x12, 0xf1, 0x38,
	0x83, 0x6e, 0xe3, 0x56, 0x16, 0x9c, 0xd0, 0x28, 0xda, 0x19, 0x53, 0xff, 0x34, 0x0f, 0xb6, 0xaf,
	0x20, 0x93, 0x99, 0x3c, 0x51, 0x19, 0x1d, 0xb4, 0x77, 0x9e, 0xbf, 0x3a, 0x6f, 0xad, 0x52, 0xc0,
	0x12, 0xee, 0xe3, 0x6c, 0x2a, 0xc1, 0x8b, 0x9d, 0xd6, 0xee, 0x32, 0xc7, 0x63, 0x9e, 0x72, 0x1a,
	0x5d, 0x78, 0x7a, 0x5c, 0x3f, 0x97, 0xf4, 0x23, 0x4b, 0x84, 0x7c, 0xa6, 0x83, 0x56, 0x6b, 0xa7,
	0xb5, 0xf7, 0xea, 0x96, 0x07, 0xc1, 0xf5, 0xf9, 0x61, 0x2a, 0x39, 0xb3, 0xa9, 0x6a, 0xef, 0xcb,
	0x97, 0x2f, 0xb3, 0xd4, 0x33, 0x1d, 0x8c, 0xb2, 0x40, 0x1b, 0xd3, 0xe0, 0x7c, 0x60, 0xb7, 0x71,
	0x2c, 0xe2, 0x9d, 0x6b, 0x2c, 0x3e, 0x8d, 0xf1, 0x98, 0x29, 0x1c, 0x0b, 0x74, 0xe7, 0xda, 0x5d,
	0x42, 0x07, 0xe0, 0x9e, 0x64, 0x11, 0xf3, 0x53, 0xc6, 0x48, 0x1c, 0xa8, 0xd3, 0x10, 0x49, 0x6d,
	0x2d, 0xbb, 0xcb, 0x5b, 0xcb, 0x71, 0xba, 0x8a, 0x70, 0xae, 0x17, 0x21, 0x0e, 0x9e, 0x64, 0x5d,
	0x8b, 0x69, 0x2e, 0xc8, 0x14, 0xfe, 0x1b, 0x96, 0x2c, 0x4e, 0xb8, 0x56, 0xcd, 0x48, 0xbf, 0x58,
	0x90, 0x92, 0x5b, 0xc0, 0xce, 0xad, 0x54, 0xe8, 0x2b, 0xb0, 0xc9, 0x03, 0x1a, 0x2c, 0x05, 0x83,
	0x8c, 0xfb, 0xbf, 0x4b, 0x6e, 0xd3, 0x30, 0x97, 0x62, 0x2f, 0x83, 0xd1, 0x2e, 0xa8, 0x4e, 0xa8,
	0x4c, 0xdd, 0x84, 0xfa, 0xa7, 0xb5, 0xf5, 0xac, 0x12, 0x2d, 0x2a, 0xf7, 0xcf, 0x33, 0xce, 0x12,
	0xd4, 0xf8, 0xa7, 0x00, 0xee, 0x2e, 0x5e, 0x71, 0xc3, 0x94, 0xa6, 0x33, 0x89, 0x1e, 0x81, 0x07,
	0x64, 0x38, 0x1c, 0x59, 0xa6, 0x67, 0x0f, 0x5c, 0xaf, 0x7b, 0x60, 0x75, 0x0f, 0x2d, 0xd3, 0x23,
	0x36, 0x5c, 0x41, 0x0f, 0xc0, 0xbd, 0x79, 0xea, 0x42, 0x58, 0x43, 0xdb, 0xa0, 0xde, 0x31, 0x7a,
	0x3d, 0xa3, 0x67, 0x2d, 0xe2, 0xc7, 0xc6, 0x70, 0x68, 0xd9, 0x3d, 0xcb, 0xb9, 0x4a, 0x52, 0x40,
	0x75, 0xf0, 0xf9, 0xa7, 0xd1, 0x17, 0x90, 0xab, 0xe8, 0x33, 0xf0, 0x74, 0x99, 0xc9, 0x3c, 0xd3,
	0x1b, 0x5a, 0xdd, 0x91, 0x43, 0xdc, 0x77, 0x39, 0x12, 0x16, 0x95, 0xdc, 0x6b, 0xa0, 0x9e, 0xe1,
	0x5a, 0xb0, 0x84, 0xd6, 0x41, 0xc5, 0x75, 0x0c, 0x7b, 0x48, 0x5c, 0x58, 0x56, 0x8b, 0xa1, 0x6b,
	0xd8, 0x66, 0xe7, 0x1d, 0xac, 0x28, 0xe6, 0xce, 0xc0, 0x70, 0x4c, 0x62, 0xf7, 0x3c, 0xd3, 0x70,
	0x0d, 0xcf, 0xb1, 0xde, 0x18, 0x7d, 0x62, 0x1a, 0x2e, 0x19, 0xd8, 0x9e, 0x39, 0xb0, 0x2d, 0xb8,
	0x86, 0xda, 0x40, 0x1f, 0x38, 0xa4, 0x47, 0x6c, 0xa3, 0xef, 0x2d, 0xd0, 0x7d, 0x62, 0x5b, 0xde,
	0x48, 0x6d, 0x62, 0xb8, 0x9e, 0x4b, 0xba, 0x87, 0x96, 0xeb, 0xa9, 0x9e, 0x18, 0x76, 0xd7, 0x82,
	0x55, 0xf4, 0x14, 0x3c, 0x1e, 0x1d, 0x7b, 0x03, 0xc7, 0x33, 0x07, 0x6f, 0x6d, 0xaf, 0xe7, 0x18,
	0x59, 0x91, 0x63, 0xbd, 0x1e, 0x11, 0xc7, 0x32, 0x21, 0x68, 0xfc, 0xac, 0x81, 0xfb, 0x37, 0x7d,
	0x54, 0x50, 0x15, 0x94, 0x0c, 0x73, 0xd4, 0x77, 0xe1, 0x0a, 0x5a, 0x03, 0xc5, 0x23, 0xa3, 0x6f,
	0x41, 0x0d, 0x01, 0x50, 0xde, 0xb7, 0x32, 0xbf, 0xa0, 0x00, 0xdd, 0x03, 0xd2, 0x37, 0xe1, 0xaa,
	0x0a, 0x13, 0x7b, 0xdf, 0xb0, 0x5d, 0x58, 0x44, 0x10, 0x6c, 0xd8, 0x83, 0x65, 0x07, 0x61, 0x49,
	0x9d, 0x52, 0xc6, 0xe4, 0xbd, 0x25, 0xee, 0x81, 0x37, 0x07, 0x96, 0xd1, 0x43, 0xf0, 0x9f, 0x91,
	0x6d, 0x74, 0xbb, 0x83, 0xa3, 0x63, 0xc3, 0x26, 0x96, 0xe9, 0x1d, 0x11, 0x7b, 0xe0, 0xc0, 0x4a,
	0xe3, 0x1b, 0x50, 0x9e, 0x7f, 0x3a, 0x4a, 0x40, 0x7b, 0x0b, 0x57, 0x94, 0x39, 0x84, 0x9a, 0x32,
	0xdf, 0xc2, 0x82, 0x32, 0x0e, 0x5c, 0x55, 0xe6, 0x08, 0x16, 0x95, 0x19, 0xc0, 0x92, 0x32, 0x8a,
	0xb3, 0x04, 0xb4, 0x37, 0xb0, 0xd2, 0x78, 0x08, 0x2a, 0xf3, 0xaf, 0x82, 0x8a, 0x74, 0x72, 0x0a,
	0x02, 0xb5, 0xc6, 0x11, 0x78, 0x72, 0xdb, 0x34, 0xe4, 0xe2, 0xdd, 0x65, 0x7f, 0x56, 0xd0, 0x06,
	0x58, 0x5b, 0xac, 0x34, 0xb4, 0x09, 0xaa, 0x4a, 0x6f, 0xdf, 0x72, 0x2d, 0x13, 0x16, 0x1a, 0xbf,
	0x6b, 0x60, 0xf3, 0xd2, 0x04, 0xa8, 0x56, 0x11, 0xd3, 0x6e, 0xe5, 0x4d, 0x23, 0xa6, 0xdd, 0x86,
	0x5a, 0xee, 0x75, 0x5a, 0xb0, 0x30, 0xf7, 0xda, 0x70, 0x15, 0x95, 0x41, 0xc1, 0x30, 0x61, 0x51,
	0x59, 0xb3, 0x07, 0x4b, 0x99, 0x3d, 0x82, 0x65, 0x65, 0x7b, 0x16, 0xac, 0x28, 0x4b, 0x7a, 0x70,
	0x4d, 0x59, 0xa7, 0x07, 0xab, 0xca, 0x8e, 0x4c, 0x08, 0xb2, 0xb8, 0x09, 0xd7, 0x55, 0xf3, 0x89,
	0xb9, 0x3f, 0x6c, 0xc1, 0x8d, 0x73, 0xb7, 0x0d, 0x37, 0x73, 0x7e, 0xa7, 0x05, 0xef, 0xcc, 0xbd,
	0x36, 0xbc, 0xdb, 0xb0, 0xc0, 0xbd, 0x6b, 0x6f, 0x95, 0xf3, 0xe7, 0x1c, 0x5a, 0x7d, 0xab, 0xeb,
	0x5a, 0x56, 0xfe, 0x9c, 0x8b, 0x95, 0xa6, 0xf2, 0xee, 0xd0, 0xf0, 0x8e, 0x1d, 0x2b, 0xbf, 0xd6,
	0xab, 0x8d, 0x47, 0xa0, 0xba, 0x98, 0x58, 0xd5, 0x4d, 0x3b, 0x6f, 0xea, 0x3b, 0xa8, 0x75, 0x86,
	0xe0, 0x21, 0x17, 0xba, 0xfa, 0x07, 0x39, 0xe5, 0xa9, 0x7e, 0x7c, 0xc8, 0x85, 0xbe, 0x9f, 0x0f,
	0xf9, 0x77, 0xdb, 0x32, 0xa5, 0xf2, 0x64, 0x91, 0xf3, 0xc5, 0x59, 0x93, 0x8b, 0xe6, 0x99, 0x08,
	0x58, 0xd4, 0x94, 0xc1, 0x69, 0x33, 0x14, 0xcd, 0xe5, 0xbf, 0xd7, 0xc7, 0x42, 0xf5, 0xf8, 0x70,
	0x5e, 0x39, 0x2e, 0x67, 0x3f, 0x4b, 0x7b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x46, 0x75, 0x26,
	0xde, 0x9c, 0x09, 0x00, 0x00,
}
