// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/a_rpc.proto

package flights

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("io/flights/a_rpc.proto", fileDescriptor_a2f3b2aa6952acc1) }

var fileDescriptor_a2f3b2aa6952acc1 = []byte{
	// 2202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x4f, 0x8c, 0xdc, 0x48,
	0xf5, 0x96, 0xdd, 0xab, 0x8d, 0xb6, 0x7e, 0xc9, 0x26, 0xf1, 0xfc, 0x8d, 0x67, 0x7e, 0x49, 0xa9,
	0x17, 0x89, 0x64, 0x76, 0xc6, 0x3d, 0x4c, 0x12, 0x09, 0x72, 0x59, 0x3c, 0xf9, 0xb3, 0x9a, 0x04,
	0x8d, 0x46, 0x93, 0xac, 0x56, 0x02, 0xa1, 0xa8, 0xda, 0x7e, 0xed, 0xae, 0x1d, 0xb7, 0xcb, 0xb8,
	0xca, 0x33, 0x34, 0xd1, 0xa0, 0x2c, 0x1c, 0xb8, 0xb0, 0x42, 0x32, 0x20, 0x01, 0x2b, 0x6d, 0x94,
	0xc3, 0x72, 0x48, 0x38, 0xac, 0xb4, 0x1c, 0x80, 0xdb, 0x0a, 0x50, 0xc4, 0x61, 0x4f, 0x2b, 0x21,
	0x10, 0x48, 0x68, 0x25, 0x84, 0x10, 0x07, 0x04, 0xe2, 0xc8, 0x05, 0xd9, 0x55, 0xee, 0xb6, 0xbb,
	0xed, 0xce, 0xb0, 0x4c, 0x40, 0x84, 0xd3, 0xb4, 0x5d, 0xcf, 0xcf, 0xef, 0x7d, 0xef, 0x7b, 0xdf,
	0x2b, 0x57, 0x82, 0x66, 0x29, 0x6b, 0x75, 0x7c, 0xea, 0x75, 0x05, 0x6f, 0x91, 0xdb, 0x51, 0xe8,
	0x58, 0x61, 0xc4, 0x04, 0x33, 0x8e, 0xa8, 0x9b, 0xe6, 0xa2, 0xc7, 0x98, 0xe7, 0x43, 0x8b, 0x84,
	0xb4, 0x45, 0x82, 0x80, 0x09, 0x22, 0x28, 0x0b, 0xb8, 0x34, 0x33, 0x17, 0xd4, 0x6a, 0x76, 0xd5,
	0x8e, 0x3b, 0x2d, 0xe8, 0x85, 0xa2, 0xaf, 0x16, 0x97, 0xb3, 0x3f, 0xce, 0x8a, 0x07, 0xc1, 0x0a,
	0xdf, 0x23, 0x9e, 0x07, 0x51, 0x8b, 0x85, 0xd9, 0xe3, 0x15, 0xae, 0x4e, 0x17, 0x22, 0x69, 0x33,
	0x12, 0xb9, 0x34, 0xf0, 0x6e, 0x87, 0x84, 0xe7, 0xeb, 0xf3, 0xc5, 0x48, 0x69, 0x14, 0xb2, 0x48,
	0xa8, 0x95, 0xb9, 0xc2, 0x8a, 0xfc, 0xab, 0x16, 0x9a, 0x63, 0x0b, 0xb7, 0x5d, 0xe0, 0xd4, 0x0b,
	0x88, 0x60, 0x51, 0x85, 0x5b, 0x87, 0x44, 0x11, 0x85, 0x7c, 0x65, 0x81, 0xb2, 0x2c, 0x6b, 0x87,
	0xf5, 0x7a, 0x2c, 0xb8, 0xcd, 0xda, 0xaf, 0x81, 0x23, 0x54, 0x34, 0x6b, 0xbf, 0x7c, 0x09, 0x1d,
	0xb9, 0x26, 0x1f, 0x33, 0xfe, 0xae, 0x21, 0xe4, 0x44, 0x40, 0x04, 0x6c, 0xb1, 0x48, 0x18, 0xc7,
	0x2c, 0xe5, 0xcf, 0x4a, 0x2f, 0xcd, 0x59, 0x4b, 0x62, 0x64, 0xe5, 0x18, 0x59, 0x57, 0x53, 0x8c,
	0x9a, 0x3f, 0xd7, 0x12, 0xfb, 0xfb, 0x1a, 0x3a, 0x69, 0xcb, 0x5c, 0x38, 0xde, 0xbe, 0x7a, 0xf3,
	0x16, 0xb6, 0xb7, 0x36, 0x8c, 0xe7, 0x2f, 0x67, 0xce, 0xb0, 0x5a, 0x31, 0x4f, 0xc9, 0x6b, 0x8e,
	0x49, 0x80, 0x55, 0xe6, 0x38, 0x02, 0x87, 0x45, 0xee, 0xf5, 0x55, 0xd4, 0xb8, 0xb0, 0xba, 0x6a,
	0x9c, 0x43, 0x1f, 0xbf, 0xd5, 0x85, 0x08, 0x30, 0xe5, 0x98, 0xe0, 0x30, 0x62, 0x6d, 0x1f, 0x7a,
	0x78, 0x8f, 0x8a, 0x2e, 0x16, 0x5d, 0xc0, 0x34, 0x08, 0x63, 0x81, 0x5d, 0x22, 0x88, 0x75, 0xfd,
	0x42, 0xfa, 0xc4, 0x79, 0x63, 0x05, 0xbd, 0xb8, 0x0d, 0x22, 0x8e, 0x02, 0x70, 0xf1, 0x5e, 0x17,
	0x82, 0xcc, 0x2e, 0xe6, 0x10, 0x61, 0x9f, 0x38, 0x3b, 0x1c, 0x93, 0x58, 0x74, 0x59, 0x44, 0xbf,
	0x94, 0x95, 0xc8, 0xfa, 0xca, 0x07, 0xbf, 0xff, 0xa6, 0x3e, 0xd3, 0x3c, 0x31, 0x5a, 0x80, 0x4b,
	0xda, 0x92, 0xf1, 0x5b, 0x0d, 0x1d, 0xf1, 0x40, 0x64, 0xa9, 0x4f, 0x0f, 0x52, 0x57, 0xb1, 0x5f,
	0x66, 0x2e, 0x98, 0x65, 0x40, 0x9a, 0x0f, 0xb5, 0xc4, 0x7e, 0xbd, 0x32, 0xf1, 0xff, 0x7b, 0x19,
	0xc4, 0x20, 0xeb, 0x85, 0x6d, 0x10, 0x11, 0x85, 0xdd, 0xca, 0xbc, 0x9b, 0x32, 0x8b, 0x05, 0x74,
	0xea, 0x95, 0xba, 0x98, 0xaf, 0x9f, 0x4e, 0x6d, 0x2e, 0x18, 0x73, 0x68, 0x66, 0x3b, 0x7b, 0x08,
	0xef, 0x11, 0x8e, 0x03, 0x26, 0x70, 0x87, 0xc5, 0x81, 0x2b, 0x73, 0xc2, 0xc6, 0xe9, 0xd1, 0x9c,
	0x5a, 0x77, 0xc8, 0x30, 0xf6, 0x7d, 0xe3, 0xd7, 0x3a, 0x42, 0x71, 0xe8, 0xd6, 0x14, 0x77, 0x24,
	0xb5, 0x1f, 0xe8, 0x89, 0xfd, 0x86, 0x5e, 0x59, 0xd3, 0x57, 0x32, 0x1f, 0xc3, 0x9a, 0xca, 0xeb,
	0xc3, 0xa9, 0xe9, 0x21, 0xa0, 0x71, 0xfd, 0x55, 0xd4, 0xb8, 0xb8, 0x7a, 0xde, 0xd8, 0x42, 0x9b,
	0x37, 0x21, 0xda, 0x85, 0x28, 0x7d, 0x6d, 0x1c, 0x90, 0x5d, 0x42, 0x7d, 0xd2, 0xf6, 0xc1, 0xc2,
	0xeb, 0xc4, 0xd9, 0xc1, 0xac, 0xd3, 0xc1, 0x1d, 0x16, 0xe1, 0xb5, 0x8b, 0xab, 0xbd, 0x34, 0x76,
	0x17, 0x47, 0x10, 0x02, 0x49, 0x63, 0xff, 0x42, 0x0c, 0x5c, 0xe0, 0x38, 0x10, 0xd4, 0xc7, 0x3c,
	0x76, 0x1c, 0xe0, 0xbc, 0x13, 0xfb, 0x8a, 0x3a, 0x66, 0x25, 0x75, 0xfe, 0xa2, 0x21, 0xe4, 0x82,
	0x0f, 0x0a, 0xdb, 0x6a, 0xf6, 0xd4, 0xf5, 0xcf, 0xbb, 0x5a, 0x62, 0x7f, 0xab, 0xba, 0x7f, 0xae,
	0x64, 0x3e, 0x87, 0x58, 0xcb, 0xeb, 0x14, 0xc6, 0x32, 0xd4, 0x1f, 0xb1, 0x1b, 0x0e, 0xc4, 0xac,
	0x99, 0xa5, 0xca, 0x94, 0xef, 0xea, 0xe8, 0x98, 0xd4, 0x8a, 0xcb, 0x52, 0x6c, 0x8c, 0x13, 0x83,
	0xac, 0xd5, 0x9d, 0xda, 0x8c, 0x7f, 0xa6, 0x25, 0xf6, 0xdb, 0x1a, 0x3a, 0xa9, 0xec, 0x2a, 0x14,
	0x23, 0xf7, 0x30, 0x3f, 0x50, 0x0c, 0xac, 0x34, 0xed, 0x3f, 0x2d, 0x18, 0x2a, 0x8c, 0x14, 0x82,
	0x0f, 0x35, 0x84, 0x3c, 0x10, 0x79, 0xfe, 0xd3, 0xa3, 0xf9, 0x67, 0x55, 0x1f, 0x43, 0xa5, 0xf9,
	0x40, 0x4b, 0xec, 0xbb, 0x95, 0xd9, 0x67, 0xb2, 0x91, 0xa7, 0x6e, 0x16, 0x64, 0x63, 0x34, 0xf9,
	0x27, 0xa1, 0x1a, 0xea, 0x15, 0xad, 0x3b, 0xce, 0x30, 0xfa, 0x7d, 0xe3, 0x43, 0x1d, 0x1d, 0x93,
	0xaa, 0x51, 0x5f, 0xe6, 0xf1, 0x14, 0x1f, 0xea, 0x89, 0xfd, 0x75, 0xbd, 0xb2, 0xc0, 0x4a, 0x3e,
	0x06, 0x05, 0x1e, 0xc8, 0xc7, 0xbf, 0x5e, 0xe0, 0xff, 0x2a, 0xf5, 0x28, 0xf0, 0xe8, 0x6f, 0x1a,
	0x3a, 0x26, 0xd5, 0x63, 0x32, 0x95, 0x1e, 0x27, 0x20, 0x15, 0x68, 0x2b, 0x01, 0xc9, 0xd1, 0x2e,
	0x08, 0x48, 0x19, 0xed, 0x7f, 0x97, 0x80, 0x14, 0xb2, 0x7e, 0xb3, 0x81, 0x66, 0xa5, 0x80, 0xc8,
	0xed, 0xc7, 0x95, 0xc1, 0x86, 0xc6, 0x38, 0x35, 0x48, 0x7f, 0x74, 0xa9, 0x16, 0x83, 0xf7, 0xf5,
	0xc4, 0x7e, 0xa8, 0xa3, 0x05, 0xf9, 0x00, 0x1e, 0x3e, 0x51, 0x40, 0x43, 0x6d, 0x3f, 0xf0, 0x88,
	0x0d, 0x65, 0x81, 0xd9, 0x1c, 0xea, 0x8c, 0x7c, 0x35, 0x1e, 0xee, 0xaf, 0x9e, 0x62, 0x42, 0xce,
	0x37, 0xa7, 0x06, 0xa5, 0x19, 0x26, 0x9c, 0x56, 0xe7, 0x1d, 0x1d, 0x4d, 0x79, 0x20, 0xc6, 0x4a,
	0x83, 0x6b, 0x4b, 0xb3, 0x2d, 0xdf, 0x64, 0xd6, 0x17, 0xaf, 0xf9, 0x1b, 0x2d, 0xb1, 0xef, 0x69,
	0x93, 0x8b, 0x34, 0x9b, 0x6a, 0x60, 0x45, 0x85, 0x3e, 0x56, 0x94, 0xc3, 0xda, 0x1a, 0x1d, 0x96,
	0x30, 0xae, 0x19, 0xab, 0x15, 0xc0, 0x94, 0xb5, 0xb1, 0x75, 0x47, 0x5a, 0x6c, 0xc6, 0xbd, 0x36,
	0x44, 0xfb, 0xc6, 0x5b, 0x0d, 0x34, 0x2b, 0xa5, 0xf2, 0x9f, 0x21, 0xf4, 0x04, 0xb8, 0x0e, 0xc4,
	0x69, 0xa5, 0xa7, 0x55, 0x9c, 0x1e, 0x4a, 0xeb, 0xff, 0x14, 0xa7, 0xcd, 0x3a, 0x4e, 0x7f, 0x47,
	0x47, 0xb3, 0x52, 0x67, 0x3f, 0x02, 0xad, 0xeb, 0x84, 0xe7, 0xa7, 0x5a, 0x62, 0xdf, 0x7f, 0x0c,
	0xa7, 0x95, 0xec, 0x56, 0x15, 0xe9, 0x85, 0xa1, 0x22, 0xd7, 0x15, 0xc9, 0x3a, 0x34, 0x56, 0xcf,
	0x2f, 0xd5, 0x41, 0xf3, 0x8b, 0x06, 0x3a, 0x5a, 0x14, 0x63, 0xe3, 0xf8, 0x08, 0x20, 0xb5, 0xf9,
	0x7f, 0xa3, 0x91, 0xd8, 0x7f, 0xd5, 0xd1, 0x09, 0xf5, 0x0d, 0x39, 0x4c, 0xfa, 0x58, 0x49, 0x6d,
	0xcd, 0x2f, 0x8f, 0x29, 0xac, 0xca, 0x0e, 0xe3, 0x4d, 0x26, 0x00, 0x8b, 0x2e, 0x11, 0x58, 0x74,
	0x29, 0xc7, 0x3d, 0x10, 0x5d, 0xe6, 0xe2, 0x3d, 0xea, 0xfb, 0x98, 0x75, 0x04, 0x04, 0x59, 0x1a,
	0xed, 0x6c, 0x0c, 0xb9, 0xcb, 0x98, 0xd3, 0xc0, 0x01, 0x1c, 0xc0, 0x5e, 0xd9, 0x0f, 0xc7, 0x0e,
	0x09, 0x52, 0x2b, 0x12, 0x0b, 0xd6, 0x23, 0x82, 0x3a, 0xc4, 0xf7, 0xfb, 0x58, 0x26, 0xe5, 0x5a,
	0x4f, 0x88, 0xe9, 0x67, 0x52, 0x9b, 0x4f, 0x19, 0xf3, 0x68, 0x56, 0xa1, 0x4e, 0xfc, 0x08, 0x88,
	0xdb, 0xc7, 0xf0, 0x45, 0xca, 0x05, 0x7f, 0xc2, 0x54, 0x9f, 0x6e, 0x1e, 0x1f, 0x39, 0x16, 0x48,
	0x6b, 0x79, 0x5f, 0x47, 0xcf, 0x0d, 0xa4, 0xdb, 0x98, 0x1d, 0x29, 0x64, 0xce, 0xe7, 0xd1, 0x02,
	0x37, 0xff, 0xa4, 0x25, 0xf6, 0x7e, 0x45, 0x1d, 0xd1, 0x50, 0x90, 0xcd, 0x53, 0x15, 0x22, 0x7c,
	0xc8, 0xca, 0xeb, 0x1a, 0xed, 0x91, 0x9c, 0x26, 0xaa, 0x6e, 0x7e, 0x79, 0x85, 0x08, 0xb0, 0xfa,
	0x40, 0x46, 0xee, 0xf4, 0x58, 0x20, 0xba, 0xe5, 0x5b, 0x2e, 0xe9, 0xef, 0x1b, 0xc9, 0x33, 0xe8,
	0x68, 0x51, 0xab, 0xc7, 0xf9, 0x3e, 0x86, 0xcf, 0xef, 0x1a, 0x89, 0xfd, 0x5e, 0xa3, 0x02, 0xa0,
	0xe9, 0xb2, 0x04, 0xcb, 0xc0, 0xcc, 0x47, 0xda, 0x98, 0xfc, 0x06, 0xd9, 0x4a, 0x15, 0xef, 0x69,
	0x27, 0x63, 0x5f, 0xd9, 0x8e, 0x72, 0xcc, 0xe3, 0x36, 0x77, 0x22, 0xda, 0x06, 0x17, 0x0b, 0x36,
	0x64, 0x76, 0x6e, 0x48, 0x7c, 0x88, 0x04, 0x5f, 0x2e, 0xb5, 0x4d, 0x8f, 0xf4, 0xf3, 0x7e, 0x49,
	0xc9, 0x43, 0x23, 0x70, 0x33, 0x42, 0x65, 0xef, 0x71, 0xba, 0x24, 0xf0, 0x80, 0xe3, 0x1e, 0x71,
	0x21, 0xb3, 0x6c, 0x03, 0x66, 0xbb, 0x10, 0xed, 0x45, 0x54, 0xa4, 0x8d, 0xd6, 0xee, 0x17, 0x5e,
	0x22, 0xf1, 0xe1, 0x4f, 0xe3, 0x8c, 0x98, 0x36, 0xab, 0x1a, 0xe7, 0x0f, 0x3a, 0x3a, 0x5a, 0x9c,
	0x0f, 0xb5, 0xbd, 0x53, 0xa7, 0x85, 0x6f, 0xeb, 0x89, 0xfd, 0xb5, 0x4a, 0x2d, 0x2c, 0x0d, 0x00,
	0xf3, 0x9e, 0x36, 0xa6, 0xfa, 0x39, 0x29, 0x86, 0x9c, 0x20, 0x58, 0xc6, 0xe2, 0x96, 0x4d, 0xf2,
	0xb2, 0x95, 0x65, 0x2e, 0x02, 0x25, 0x74, 0xcb, 0x38, 0x0e, 0x7c, 0xe0, 0x3c, 0xab, 0xc9, 0xe7,
	0x88, 0x23, 0xe8, 0x2e, 0x7c, 0x1e, 0x77, 0x7c, 0xe2, 0x61, 0x26, 0x37, 0xf3, 0x25, 0x9a, 0xe6,
	0x4e, 0x53, 0xae, 0x81, 0x48, 0x49, 0xd6, 0x21, 0x3e, 0x87, 0x43, 0xeb, 0xe6, 0xe9, 0xa5, 0x2a,
	0xa0, 0xbf, 0xfa, 0x0c, 0x32, 0x64, 0xbc, 0xeb, 0xea, 0x7c, 0x74, 0x8b, 0x70, 0x6e, 0x2c, 0x0c,
	0xe0, 0x2e, 0xde, 0x96, 0xce, 0xcd, 0x67, 0x2d, 0xca, 0xac, 0x0d, 0xb7, 0xf9, 0xa8, 0x91, 0xd8,
	0xf7, 0x1b, 0x68, 0x3e, 0x37, 0xc1, 0xa9, 0x0d, 0x14, 0xdb, 0x51, 0xcd, 0x9d, 0x92, 0x81, 0xf9,
	0x96, 0x36, 0x9c, 0x3f, 0xf9, 0xa1, 0x2c, 0x0e, 0x09, 0xe7, 0x03, 0xe4, 0x37, 0x3a, 0x23, 0x40,
	0xa7, 0xbc, 0x4a, 0x01, 0xcb, 0x9a, 0xdb, 0x65, 0x20, 0x93, 0xeb, 0x83, 0x90, 0xe2, 0xbe, 0x8c,
	0xa9, 0x90, 0x43, 0xaa, 0x0d, 0xf9, 0x98, 0xc1, 0x31, 0x4f, 0xfd, 0x16, 0x60, 0x2e, 0xcc, 0x7a,
	0xec, 0x42, 0x87, 0xc4, 0xbe, 0xe0, 0x16, 0x96, 0x9f, 0x58, 0x59, 0x1f, 0xa5, 0x21, 0xd0, 0xa7,
	0x74, 0x3e, 0x2d, 0x36, 0xe7, 0xc6, 0x4e, 0xc2, 0x65, 0x1c, 0x29, 0x0b, 0xde, 0xd5, 0xd1, 0x8c,
	0x07, 0x62, 0xbc, 0xd6, 0x46, 0x73, 0x02, 0x11, 0xf2, 0x1e, 0x9c, 0x44, 0x96, 0xe6, 0xaf, 0xb4,
	0xc4, 0xfe, 0x9e, 0x36, 0x81, 0x24, 0xf3, 0xe9, 0x50, 0x2b, 0xad, 0x62, 0xc5, 0x33, 0x5c, 0x1c,
	0x71, 0x55, 0x4c, 0x39, 0xb4, 0xde, 0xb8, 0x60, 0xac, 0xd5, 0xa0, 0xd3, 0xba, 0x23, 0xa8, 0xb3,
	0x03, 0xc3, 0x19, 0x27, 0x2f, 0x3f, 0x03, 0xde, 0xbe, 0x71, 0x4f, 0x47, 0xff, 0x5f, 0x89, 0xda,
	0x7a, 0x3f, 0xfd, 0xbd, 0xe1, 0x1a, 0xaa, 0x53, 0x1e, 0x8f, 0xd0, 0x3b, 0x93, 0x10, 0x7a, 0xa1,
	0x0e, 0x21, 0xbc, 0xde, 0x97, 0x97, 0x1b, 0xae, 0xf9, 0xe2, 0xe3, 0xc0, 0x4a, 0x27, 0x8a, 0x32,
	0x3e, 0x34, 0xdc, 0x4e, 0x1b, 0x8b, 0xb5, 0xb8, 0x51, 0x37, 0x9b, 0xed, 0x86, 0x9c, 0x5d, 0x07,
	0x57, 0x97, 0x89, 0x58, 0xbd, 0xd7, 0x48, 0xec, 0x37, 0x27, 0x4a, 0x8e, 0xda, 0x01, 0x94, 0x25,
	0xe7, 0xbb, 0x85, 0x1d, 0x40, 0xb5, 0xe4, 0x5c, 0xa5, 0xa2, 0x0b, 0x52, 0x64, 0xa8, 0xbb, 0x8c,
	0x59, 0x84, 0xdb, 0x4c, 0x35, 0xba, 0xac, 0x78, 0xbe, 0x15, 0xc8, 0x06, 0xb8, 0xbc, 0xe3, 0x83,
	0x87, 0x49, 0x54, 0x18, 0xee, 0x82, 0x61, 0x9f, 0x39, 0x24, 0x1b, 0x1b, 0x30, 0x70, 0x6d, 0xa7,
	0x9b, 0xe7, 0xcc, 0x7b, 0x87, 0x82, 0xef, 0xf2, 0xec, 0x19, 0xf9, 0x6f, 0x56, 0xc4, 0xb7, 0x9e,
	0xc6, 0x99, 0xbe, 0x68, 0x4e, 0x12, 0x9b, 0x37, 0x74, 0x64, 0xc8, 0x79, 0x5a, 0x22, 0xc5, 0x41,
	0x94, 0xa6, 0x6e, 0xda, 0xff, 0x44, 0x1e, 0xbb, 0x4d, 0xa0, 0x85, 0x9a, 0xfa, 0x65, 0x5a, 0x9c,
	0x1e, 0xce, 0xfe, 0x27, 0x2a, 0x2f, 0x8b, 0x4b, 0x93, 0xf0, 0xf8, 0xa3, 0x8e, 0x8e, 0x8f, 0xc8,
	0x88, 0xb1, 0x58, 0x03, 0x86, 0x84, 0xe1, 0x4c, 0xe5, 0x2a, 0xf0, 0x6d, 0xe0, 0x21, 0x0b, 0x38,
	0x34, 0xbf, 0xad, 0x27, 0xf6, 0xa3, 0x49, 0x78, 0x9c, 0x1c, 0x93, 0x14, 0xf3, 0xd6, 0x50, 0x40,
	0x5c, 0xea, 0x51, 0x41, 0xfc, 0x32, 0x28, 0x67, 0x81, 0x9f, 0xc3, 0x34, 0x50, 0xd4, 0xce, 0x02,
	0x81, 0x6c, 0x32, 0xf7, 0x88, 0x48, 0xb5, 0x25, 0x6b, 0x8a, 0xa8, 0xd8, 0x26, 0x3e, 0x78, 0x87,
	0x06, 0xe1, 0x15, 0x63, 0x7d, 0x00, 0x61, 0x1a, 0x4d, 0xeb, 0x4e, 0xbb, 0x90, 0xba, 0x35, 0x22,
	0xd2, 0x15, 0x6b, 0x99, 0x62, 0xff, 0x48, 0x1e, 0xa5, 0x15, 0x51, 0x5b, 0xef, 0x6f, 0xb8, 0x85,
	0x33, 0x87, 0x0a, 0xb8, 0x53, 0x0b, 0xf3, 0xf9, 0x54, 0xc9, 0x33, 0xfb, 0x38, 0x70, 0x7d, 0x68,
	0xfe, 0x59, 0x4b, 0xec, 0xf7, 0x27, 0x21, 0x3c, 0x37, 0x2e, 0xda, 0xeb, 0xfd, 0x54, 0xa8, 0x6f,
	0x15, 0x85, 0x3a, 0xdd, 0xa3, 0xf8, 0x50, 0x0d, 0xf8, 0x24, 0xb0, 0x53, 0x7f, 0x37, 0xa8, 0x18,
	0xee, 0x59, 0x0e, 0x0b, 0xe7, 0x39, 0x63, 0x66, 0x04, 0x67, 0xea, 0x5a, 0xa9, 0x94, 0xff, 0x58,
	0x47, 0xb3, 0x23, 0xd0, 0x01, 0x5f, 0xef, 0x6f, 0x6d, 0x6e, 0x1b, 0x67, 0x6b, 0xe8, 0x78, 0x8d,
	0x45, 0xeb, 0x8c, 0xed, 0x64, 0x64, 0x3f, 0x20, 0x71, 0x3f, 0xd0, 0x12, 0xfb, 0x87, 0x93, 0x60,
	0x3d, 0x33, 0x06, 0x2b, 0x70, 0x7c, 0x8d, 0x45, 0x58, 0xbd, 0xc9, 0xbc, 0x78, 0x10, 0x1a, 0xe7,
	0xe7, 0x14, 0xa9, 0xb6, 0x11, 0xbc, 0xb5, 0xb9, 0x7d, 0x20, 0xfc, 0x16, 0x25, 0x7e, 0x33, 0x68,
	0x6a, 0x93, 0x29, 0x17, 0x67, 0xf9, 0xb9, 0xd2, 0xf9, 0xba, 0x31, 0x35, 0x82, 0x5e, 0x18, 0x44,
	0xfb, 0xeb, 0xaf, 0x37, 0x12, 0xfb, 0x81, 0x6e, 0xdc, 0xd5, 0xd1, 0x54, 0x5e, 0xb8, 0xfc, 0xbb,
	0x24, 0xcd, 0x89, 0xde, 0xea, 0x02, 0xae, 0x58, 0xc0, 0x3e, 0x08, 0x8e, 0xfb, 0x2c, 0xc6, 0x3d,
	0x12, 0x10, 0x0f, 0xd2, 0x9f, 0x91, 0xda, 0x19, 0x4b, 0x35, 0x2e, 0x65, 0x06, 0x32, 0x1f, 0x3b,
	0x0c, 0x7d, 0xc0, 0xaf, 0x12, 0xdf, 0x07, 0x91, 0x19, 0xbd, 0x9c, 0x49, 0x26, 0xde, 0x22, 0x7d,
	0xcb, 0xfc, 0x64, 0x57, 0x88, 0x90, 0x5f, 0x6a, 0x65, 0xd1, 0xed, 0x50, 0x61, 0x39, 0xac, 0xd7,
	0xf2, 0xc1, 0x23, 0x7e, 0x4b, 0x40, 0xd4, 0xe3, 0x2b, 0xac, 0xb3, 0xa2, 0xbe, 0x74, 0xb3, 0x01,
	0xb5, 0xc2, 0x21, 0xda, 0xa5, 0x0e, 0xb4, 0x9a, 0x2f, 0xa1, 0xe3, 0x79, 0x88, 0x37, 0xe3, 0x30,
	0x64, 0x91, 0x30, 0xe6, 0x72, 0x67, 0x2e, 0x73, 0xb8, 0x95, 0x7b, 0xa4, 0xcc, 0x9c, 0xe2, 0xd2,
	0xe2, 0xd3, 0x85, 0xb7, 0xac, 0x35, 0x56, 0xad, 0x4f, 0x2c, 0x69, 0xfa, 0xda, 0x09, 0x12, 0x86,
	0x3e, 0x75, 0x32, 0x4c, 0x5b, 0xaf, 0x71, 0x16, 0x5c, 0x1a, 0xbb, 0x83, 0xe6, 0x28, 0x1b, 0xf8,
	0xdb, 0xba, 0x41, 0x99, 0xfa, 0xe8, 0xe3, 0x9f, 0x5d, 0xe6, 0x82, 0xf0, 0xae, 0x55, 0x8c, 0x9e,
	0xb2, 0x56, 0x8f, 0xb9, 0xe0, 0xb7, 0xb8, 0xbb, 0xd3, 0xf2, 0x58, 0x6b, 0xf8, 0x7f, 0x2f, 0x1e,
	0xe8, 0xcf, 0x6d, 0xdd, 0x50, 0x4f, 0xb6, 0x9f, 0xcd, 0x46, 0xc6, 0xf9, 0x7f, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x48, 0xf3, 0xb9, 0x8a, 0x9d, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlightsClient interface {
	// Create an airport record. Optional method allowing the carrier to specify how the airport name is rendered in the pass and the GPS location that will trigger a lock-screen alert.
	CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve an airport record. The AirportCode is the three character IATA code or 4 character ICAO code.
	GetPort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*Port, error)
	// Update an airport record.
	UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error)
	// Delete an airport record. Deleting a record will remove any custom data provided. A new Airport record may be automatically created for a flight departing, arriving or transiting an airport which does not have a record, using publicly available data.
	DeletePort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a carrier record. All Flight Designations and Flights must have a carrier record.
	CreateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve a carrier record.
	GetCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*Carrier, error)
	// Update a carrier record
	UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Carrier, error)
	// Delete a carrier record.
	DeleteCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a flight designator record. As much default information as possible should be provided to facilitate the automatic generation of flight records.
	CreateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve a flight designation record.
	GetFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*FlightDesignator, error)
	// Update a flight designation record.
	UpdateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*FlightDesignator, error)
	// Delete a flight designation record.
	DeleteFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a flight record. In practice, this method is not often used, since flight records can be automatically generated. Any information in the flight record will override information in the carrier and flight designation records.
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve a flight record.
	GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error)
	// Update a flight record.
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	// Delete a flight record.
	DeleteFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a boarding pass record. Flight related information not present in the boarding pass record will be populated from the flight, flight designator or carrier records.
	CreateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*io.Id, error)
	// Retrieve a boarding pass record.
	GetBoardingPassRecord(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*BoardingPassRecord, error)
	// Retrieve a boarding pass record by PassKit Id.
	GetBoardingPassRecordByPassId(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*BoardingPassRecord, error)
	// Update a boarding pass record.
	UpdateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassRecord, error)
	// Delete a boarding pass record.
	DeleteBoardingPass(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve digital boarding pass(es) in the requested format by ticker number and leg.
	GetBoardingPass(ctx context.Context, in *BoardingPassRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error)
	// Retrieve a single digital boarding pass in the requested format by PassKit pass id.
	GetBoardingPassById(ctx context.Context, in *BoardingPassRequestById, opts ...grpc.CallOption) (*io.PassBundle, error)
	// Retrieves digital boarding pass(es) records for a PNR. Where the PNR has multiple flights (E.g. outbound and return), a journey leg or departure point is required.
	GetBoardingPassesByPNR(ctx context.Context, in *BoardingPassesForBookingRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error)
}

type flightsClient struct {
	cc *grpc.ClientConn
}

func NewFlightsClient(cc *grpc.ClientConn) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/createPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetPort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/flights.Flights/getPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/flights.Flights/updatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeletePort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/deletePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/createCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*Carrier, error) {
	out := new(Carrier)
	err := c.cc.Invoke(ctx, "/flights.Flights/getCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Carrier, error) {
	out := new(Carrier)
	err := c.cc.Invoke(ctx, "/flights.Flights/updateCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/deleteCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/createFlightDesignator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*FlightDesignator, error) {
	out := new(FlightDesignator)
	err := c.cc.Invoke(ctx, "/flights.Flights/getFlightDesignator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*FlightDesignator, error) {
	out := new(FlightDesignator)
	err := c.cc.Invoke(ctx, "/flights.Flights/updateFlightDesignator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/deleteFlightDesignator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/createFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/flights.Flights/getFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/flights.Flights/updateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/deleteFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/flights.Flights/createBoardingPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPassRecord(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*BoardingPassRecord, error) {
	out := new(BoardingPassRecord)
	err := c.cc.Invoke(ctx, "/flights.Flights/getBoardingPassRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPassRecordByPassId(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*BoardingPassRecord, error) {
	out := new(BoardingPassRecord)
	err := c.cc.Invoke(ctx, "/flights.Flights/getBoardingPassRecordByPassId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassRecord, error) {
	out := new(BoardingPassRecord)
	err := c.cc.Invoke(ctx, "/flights.Flights/updateBoardingPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteBoardingPass(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flights.Flights/deleteBoardingPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPass(ctx context.Context, in *BoardingPassRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error) {
	out := new(BoardingPassesResponse)
	err := c.cc.Invoke(ctx, "/flights.Flights/getBoardingPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPassById(ctx context.Context, in *BoardingPassRequestById, opts ...grpc.CallOption) (*io.PassBundle, error) {
	out := new(io.PassBundle)
	err := c.cc.Invoke(ctx, "/flights.Flights/getBoardingPassById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPassesByPNR(ctx context.Context, in *BoardingPassesForBookingRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error) {
	out := new(BoardingPassesResponse)
	err := c.cc.Invoke(ctx, "/flights.Flights/getBoardingPassesByPNR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServer is the server API for Flights service.
type FlightsServer interface {
	// Create an airport record. Optional method allowing the carrier to specify how the airport name is rendered in the pass and the GPS location that will trigger a lock-screen alert.
	CreatePort(context.Context, *Port) (*empty.Empty, error)
	// Retrieve an airport record. The AirportCode is the three character IATA code or 4 character ICAO code.
	GetPort(context.Context, *AirportCode) (*Port, error)
	// Update an airport record.
	UpdatePort(context.Context, *Port) (*Port, error)
	// Delete an airport record. Deleting a record will remove any custom data provided. A new Airport record may be automatically created for a flight departing, arriving or transiting an airport which does not have a record, using publicly available data.
	DeletePort(context.Context, *AirportCode) (*empty.Empty, error)
	// Create a carrier record. All Flight Designations and Flights must have a carrier record.
	CreateCarrier(context.Context, *Carrier) (*empty.Empty, error)
	// Retrieve a carrier record.
	GetCarrier(context.Context, *CarrierCode) (*Carrier, error)
	// Update a carrier record
	UpdateCarrier(context.Context, *Carrier) (*Carrier, error)
	// Delete a carrier record.
	DeleteCarrier(context.Context, *CarrierCode) (*empty.Empty, error)
	// Create a flight designator record. As much default information as possible should be provided to facilitate the automatic generation of flight records.
	CreateFlightDesignator(context.Context, *FlightDesignator) (*empty.Empty, error)
	// Retrieve a flight designation record.
	GetFlightDesignator(context.Context, *FlightDesignatorRequest) (*FlightDesignator, error)
	// Update a flight designation record.
	UpdateFlightDesignator(context.Context, *FlightDesignator) (*FlightDesignator, error)
	// Delete a flight designation record.
	DeleteFlightDesignator(context.Context, *FlightDesignatorRequest) (*empty.Empty, error)
	// Create a flight record. In practice, this method is not often used, since flight records can be automatically generated. Any information in the flight record will override information in the carrier and flight designation records.
	CreateFlight(context.Context, *Flight) (*empty.Empty, error)
	// Retrieve a flight record.
	GetFlight(context.Context, *FlightRequest) (*Flight, error)
	// Update a flight record.
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	// Delete a flight record.
	DeleteFlight(context.Context, *FlightRequest) (*empty.Empty, error)
	// Create a boarding pass record. Flight related information not present in the boarding pass record will be populated from the flight, flight designator or carrier records.
	CreateBoardingPass(context.Context, *BoardingPassRecord) (*io.Id, error)
	// Retrieve a boarding pass record.
	GetBoardingPassRecord(context.Context, *BoardingPassRecordRequest) (*BoardingPassRecord, error)
	// Retrieve a boarding pass record by PassKit Id.
	GetBoardingPassRecordByPassId(context.Context, *io.Id) (*BoardingPassRecord, error)
	// Update a boarding pass record.
	UpdateBoardingPass(context.Context, *BoardingPassRecord) (*BoardingPassRecord, error)
	// Delete a boarding pass record.
	DeleteBoardingPass(context.Context, *BoardingPassRecordRequest) (*empty.Empty, error)
	// Retrieve digital boarding pass(es) in the requested format by ticker number and leg.
	GetBoardingPass(context.Context, *BoardingPassRequest) (*BoardingPassesResponse, error)
	// Retrieve a single digital boarding pass in the requested format by PassKit pass id.
	GetBoardingPassById(context.Context, *BoardingPassRequestById) (*io.PassBundle, error)
	// Retrieves digital boarding pass(es) records for a PNR. Where the PNR has multiple flights (E.g. outbound and return), a journey leg or departure point is required.
	GetBoardingPassesByPNR(context.Context, *BoardingPassesForBookingRequest) (*BoardingPassesResponse, error)
}

// UnimplementedFlightsServer can be embedded to have forward compatible implementations.
type UnimplementedFlightsServer struct {
}

func (*UnimplementedFlightsServer) CreatePort(ctx context.Context, req *Port) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (*UnimplementedFlightsServer) GetPort(ctx context.Context, req *AirportCode) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (*UnimplementedFlightsServer) UpdatePort(ctx context.Context, req *Port) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (*UnimplementedFlightsServer) DeletePort(ctx context.Context, req *AirportCode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (*UnimplementedFlightsServer) CreateCarrier(ctx context.Context, req *Carrier) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarrier not implemented")
}
func (*UnimplementedFlightsServer) GetCarrier(ctx context.Context, req *CarrierCode) (*Carrier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarrier not implemented")
}
func (*UnimplementedFlightsServer) UpdateCarrier(ctx context.Context, req *Carrier) (*Carrier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarrier not implemented")
}
func (*UnimplementedFlightsServer) DeleteCarrier(ctx context.Context, req *CarrierCode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarrier not implemented")
}
func (*UnimplementedFlightsServer) CreateFlightDesignator(ctx context.Context, req *FlightDesignator) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlightDesignator not implemented")
}
func (*UnimplementedFlightsServer) GetFlightDesignator(ctx context.Context, req *FlightDesignatorRequest) (*FlightDesignator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightDesignator not implemented")
}
func (*UnimplementedFlightsServer) UpdateFlightDesignator(ctx context.Context, req *FlightDesignator) (*FlightDesignator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightDesignator not implemented")
}
func (*UnimplementedFlightsServer) DeleteFlightDesignator(ctx context.Context, req *FlightDesignatorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlightDesignator not implemented")
}
func (*UnimplementedFlightsServer) CreateFlight(ctx context.Context, req *Flight) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (*UnimplementedFlightsServer) GetFlight(ctx context.Context, req *FlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (*UnimplementedFlightsServer) UpdateFlight(ctx context.Context, req *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (*UnimplementedFlightsServer) DeleteFlight(ctx context.Context, req *FlightRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlight not implemented")
}
func (*UnimplementedFlightsServer) CreateBoardingPass(ctx context.Context, req *BoardingPassRecord) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoardingPass not implemented")
}
func (*UnimplementedFlightsServer) GetBoardingPassRecord(ctx context.Context, req *BoardingPassRecordRequest) (*BoardingPassRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPassRecord not implemented")
}
func (*UnimplementedFlightsServer) GetBoardingPassRecordByPassId(ctx context.Context, req *io.Id) (*BoardingPassRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPassRecordByPassId not implemented")
}
func (*UnimplementedFlightsServer) UpdateBoardingPass(ctx context.Context, req *BoardingPassRecord) (*BoardingPassRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoardingPass not implemented")
}
func (*UnimplementedFlightsServer) DeleteBoardingPass(ctx context.Context, req *BoardingPassRecordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoardingPass not implemented")
}
func (*UnimplementedFlightsServer) GetBoardingPass(ctx context.Context, req *BoardingPassRequest) (*BoardingPassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPass not implemented")
}
func (*UnimplementedFlightsServer) GetBoardingPassById(ctx context.Context, req *BoardingPassRequestById) (*io.PassBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPassById not implemented")
}
func (*UnimplementedFlightsServer) GetBoardingPassesByPNR(ctx context.Context, req *BoardingPassesForBookingRequest) (*BoardingPassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPassesByPNR not implemented")
}

func RegisterFlightsServer(s *grpc.Server, srv FlightsServer) {
	s.RegisterService(&_Flights_serviceDesc, srv)
}

func _Flights_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetPort(ctx, req.(*AirportCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/DeletePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeletePort(ctx, req.(*AirportCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/CreateCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarrierCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetCarrier(ctx, req.(*CarrierCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/UpdateCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarrierCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/DeleteCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteCarrier(ctx, req.(*CarrierCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/CreateFlightDesignator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateFlightDesignator(ctx, req.(*FlightDesignator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetFlightDesignator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetFlightDesignator(ctx, req.(*FlightDesignatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/UpdateFlightDesignator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateFlightDesignator(ctx, req.(*FlightDesignator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/DeleteFlightDesignator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteFlightDesignator(ctx, req.(*FlightDesignatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetFlight(ctx, req.(*FlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/DeleteFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteFlight(ctx, req.(*FlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/CreateBoardingPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateBoardingPass(ctx, req.(*BoardingPassRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPassRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPassRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetBoardingPassRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPassRecord(ctx, req.(*BoardingPassRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPassRecordByPassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPassRecordByPassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetBoardingPassRecordByPassId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPassRecordByPassId(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/UpdateBoardingPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateBoardingPass(ctx, req.(*BoardingPassRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/DeleteBoardingPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteBoardingPass(ctx, req.(*BoardingPassRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetBoardingPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPass(ctx, req.(*BoardingPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPassById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPassById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetBoardingPassById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPassById(ctx, req.(*BoardingPassRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPassesByPNR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassesForBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPassesByPNR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flights.Flights/GetBoardingPassesByPNR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPassesByPNR(ctx, req.(*BoardingPassesForBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flights.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createPort",
			Handler:    _Flights_CreatePort_Handler,
		},
		{
			MethodName: "getPort",
			Handler:    _Flights_GetPort_Handler,
		},
		{
			MethodName: "updatePort",
			Handler:    _Flights_UpdatePort_Handler,
		},
		{
			MethodName: "deletePort",
			Handler:    _Flights_DeletePort_Handler,
		},
		{
			MethodName: "createCarrier",
			Handler:    _Flights_CreateCarrier_Handler,
		},
		{
			MethodName: "getCarrier",
			Handler:    _Flights_GetCarrier_Handler,
		},
		{
			MethodName: "updateCarrier",
			Handler:    _Flights_UpdateCarrier_Handler,
		},
		{
			MethodName: "deleteCarrier",
			Handler:    _Flights_DeleteCarrier_Handler,
		},
		{
			MethodName: "createFlightDesignator",
			Handler:    _Flights_CreateFlightDesignator_Handler,
		},
		{
			MethodName: "getFlightDesignator",
			Handler:    _Flights_GetFlightDesignator_Handler,
		},
		{
			MethodName: "updateFlightDesignator",
			Handler:    _Flights_UpdateFlightDesignator_Handler,
		},
		{
			MethodName: "deleteFlightDesignator",
			Handler:    _Flights_DeleteFlightDesignator_Handler,
		},
		{
			MethodName: "createFlight",
			Handler:    _Flights_CreateFlight_Handler,
		},
		{
			MethodName: "getFlight",
			Handler:    _Flights_GetFlight_Handler,
		},
		{
			MethodName: "updateFlight",
			Handler:    _Flights_UpdateFlight_Handler,
		},
		{
			MethodName: "deleteFlight",
			Handler:    _Flights_DeleteFlight_Handler,
		},
		{
			MethodName: "createBoardingPass",
			Handler:    _Flights_CreateBoardingPass_Handler,
		},
		{
			MethodName: "getBoardingPassRecord",
			Handler:    _Flights_GetBoardingPassRecord_Handler,
		},
		{
			MethodName: "getBoardingPassRecordByPassId",
			Handler:    _Flights_GetBoardingPassRecordByPassId_Handler,
		},
		{
			MethodName: "updateBoardingPass",
			Handler:    _Flights_UpdateBoardingPass_Handler,
		},
		{
			MethodName: "deleteBoardingPass",
			Handler:    _Flights_DeleteBoardingPass_Handler,
		},
		{
			MethodName: "getBoardingPass",
			Handler:    _Flights_GetBoardingPass_Handler,
		},
		{
			MethodName: "getBoardingPassById",
			Handler:    _Flights_GetBoardingPassById_Handler,
		},
		{
			MethodName: "getBoardingPassesByPNR",
			Handler:    _Flights_GetBoardingPassesByPNR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io/flights/a_rpc.proto",
}
