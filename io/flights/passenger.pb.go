// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/passenger.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of document used to validate the traveler's identity.
type IdentityDocument int32

const (
	// Passport
	IdentityDocument_PASSPORT IdentityDocument = 0
	// National ID card
	IdentityDocument_NATIONAL_ID_CARD IdentityDocument = 1
	// Driving license
	IdentityDocument_DRIVING_LICENSE IdentityDocument = 2
	// Credit card
	IdentityDocument_CREDIT_CARD IdentityDocument = 3
	// Frequent flyer card
	IdentityDocument_FREQUENT_FLYER_CARD IdentityDocument = 4
	// Other travel document
	IdentityDocument_OTHER_TRAVEL_DOCUMENT IdentityDocument = 5
)

var IdentityDocument_name = map[int32]string{
	0: "PASSPORT",
	1: "NATIONAL_ID_CARD",
	2: "DRIVING_LICENSE",
	3: "CREDIT_CARD",
	4: "FREQUENT_FLYER_CARD",
	5: "OTHER_TRAVEL_DOCUMENT",
}

var IdentityDocument_value = map[string]int32{
	"PASSPORT":              0,
	"NATIONAL_ID_CARD":      1,
	"DRIVING_LICENSE":       2,
	"CREDIT_CARD":           3,
	"FREQUENT_FLYER_CARD":   4,
	"OTHER_TRAVEL_DOCUMENT": 5,
}

func (x IdentityDocument) String() string {
	return proto.EnumName(IdentityDocument_name, int32(x))
}

func (IdentityDocument) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_083a51a387612c8b, []int{0}
}

// Details of a passenger and any infant.
type Passenger struct {
	// Personal details of the passenger.
	// @tag: "validateGeneric:"required"
	PassengerDetails *io.Person `protobuf:"bytes,1,opt,name=passengerDetails,proto3" json:"passengerDetails,omitempty" validateGeneric:"required"`
	// Frequent flyer details for th passenger.
	// @tag: "validateGeneric:"omitempty"
	FrequentFlyerInfo *FrequentFlyerInfo `protobuf:"bytes,2,opt,name=frequentFlyerInfo,proto3" json:"frequentFlyerInfo,omitempty" validateGeneric:"omitempty"`
	// Optional identity details, only required if need to be rendered on the pass, or for analytics purposes.
	// @tag: "validateGeneric:"omitempty"
	IdentityDetails *IdentityDetails `protobuf:"bytes,3,opt,name=identityDetails,proto3" json:"identityDetails,omitempty" validateGeneric:"omitempty"`
	// If the passenger is travelling with an infant under 2 years old, not occupying a seat, set to true.
	// @tag: "validateGeneric:"omitempty"
	WithInfant bool `protobuf:"varint,4,opt,name=withInfant,proto3" json:"withInfant,omitempty" validateGeneric:"omitempty"`
	// Details of the infant travelling with the passenger.
	// @tag: "validateGeneric:"omitempty"
	InfantDetails *Infant `protobuf:"bytes,5,opt,name=infantDetails,proto3" json:"infantDetails,omitempty" validateGeneric:"omitempty"`
	// If a passenger has a Known Traveler Number (KTN) or trusted traveler number, record it here.
	// @tag: "validateGeneric:"omitempty"
	KnownTravelerNumber  string   `protobuf:"bytes,7,opt,name=knownTravelerNumber,proto3" json:"knownTravelerNumber,omitempty" validateGeneric:"omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Passenger) Reset()         { *m = Passenger{} }
func (m *Passenger) String() string { return proto.CompactTextString(m) }
func (*Passenger) ProtoMessage()    {}
func (*Passenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_083a51a387612c8b, []int{0}
}

func (m *Passenger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Passenger.Unmarshal(m, b)
}
func (m *Passenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Passenger.Marshal(b, m, deterministic)
}
func (m *Passenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passenger.Merge(m, src)
}
func (m *Passenger) XXX_Size() int {
	return xxx_messageInfo_Passenger.Size(m)
}
func (m *Passenger) XXX_DiscardUnknown() {
	xxx_messageInfo_Passenger.DiscardUnknown(m)
}

var xxx_messageInfo_Passenger proto.InternalMessageInfo

func (m *Passenger) GetPassengerDetails() *io.Person {
	if m != nil {
		return m.PassengerDetails
	}
	return nil
}

func (m *Passenger) GetFrequentFlyerInfo() *FrequentFlyerInfo {
	if m != nil {
		return m.FrequentFlyerInfo
	}
	return nil
}

func (m *Passenger) GetIdentityDetails() *IdentityDetails {
	if m != nil {
		return m.IdentityDetails
	}
	return nil
}

func (m *Passenger) GetWithInfant() bool {
	if m != nil {
		return m.WithInfant
	}
	return false
}

func (m *Passenger) GetInfantDetails() *Infant {
	if m != nil {
		return m.InfantDetails
	}
	return nil
}

func (m *Passenger) GetKnownTravelerNumber() string {
	if m != nil {
		return m.KnownTravelerNumber
	}
	return ""
}

// Passenger Frequent Flyer information
type FrequentFlyerInfo struct {
	// The the marketing name for the frequent flyer program, e.g. KrisFlyer, Miles & More, Skymiles, etc.
	// @tag: "validateGeneric:"omitempty"
	ProgramName string `protobuf:"bytes,1,opt,name=programName,proto3" json:"programName,omitempty" validateGeneric:"omitempty"`
	// The airline designator of the traveler's frequent flyer program.
	// @tag: "validateGeneric:"required"
	AirlineDesignator string `protobuf:"bytes,2,opt,name=airlineDesignator,proto3" json:"airlineDesignator,omitempty" validateGeneric:"required"`
	// The traveler frequent flyer number.
	// @tag: "validateGeneric:"required"
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty" validateGeneric:"required"`
	// An optional code to represent the tier of the traveler, if known. This field may be used to render a tier specific logo on the boarding pass.
	// @tag: "validateGeneric:"omitempty"
	Tier                 string   `protobuf:"bytes,4,opt,name=tier,proto3" json:"tier,omitempty" validateGeneric:"omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequentFlyerInfo) Reset()         { *m = FrequentFlyerInfo{} }
func (m *FrequentFlyerInfo) String() string { return proto.CompactTextString(m) }
func (*FrequentFlyerInfo) ProtoMessage()    {}
func (*FrequentFlyerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_083a51a387612c8b, []int{1}
}

func (m *FrequentFlyerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrequentFlyerInfo.Unmarshal(m, b)
}
func (m *FrequentFlyerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrequentFlyerInfo.Marshal(b, m, deterministic)
}
func (m *FrequentFlyerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequentFlyerInfo.Merge(m, src)
}
func (m *FrequentFlyerInfo) XXX_Size() int {
	return xxx_messageInfo_FrequentFlyerInfo.Size(m)
}
func (m *FrequentFlyerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequentFlyerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FrequentFlyerInfo proto.InternalMessageInfo

func (m *FrequentFlyerInfo) GetProgramName() string {
	if m != nil {
		return m.ProgramName
	}
	return ""
}

func (m *FrequentFlyerInfo) GetAirlineDesignator() string {
	if m != nil {
		return m.AirlineDesignator
	}
	return ""
}

func (m *FrequentFlyerInfo) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *FrequentFlyerInfo) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

// Details of document used to identify the traveler's identity.
type IdentityDetails struct {
	// Type of document used to validate the traveler's identity.
	IdentityDocument IdentityDocument `protobuf:"varint,1,opt,name=identityDocument,proto3,enum=flights.IdentityDocument" json:"identityDocument,omitempty"`
	// The two digit ISO 3166 country code of the country of the travel document issuing authority.
	IssuingCountry string `protobuf:"bytes,2,opt,name=issuingCountry,proto3" json:"issuingCountry,omitempty"`
	// The two digit ISO 3166 country code of the traveler's nationality.
	Nationality string `protobuf:"bytes,3,opt,name=nationality,proto3" json:"nationality,omitempty"`
	// The number or other unique identifying reference of the traveler's document.
	DocumentNumber string `protobuf:"bytes,4,opt,name=documentNumber,proto3" json:"documentNumber,omitempty"`
	// The date of birth as marked on the traveler's identity document.
	DateOfBirth *io.Date `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	// The gender as marked on the traveler's identity document.
	Gender io.Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=io.Gender" json:"gender,omitempty"`
	// The issue date of the traveler's identity document.
	IssuedDate *io.Date `protobuf:"bytes,7,opt,name=issuedDate,proto3" json:"issuedDate,omitempty"`
	// The expiry date of the traveler's identity document.
	ExpiryDate           *io.Date `protobuf:"bytes,8,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityDetails) Reset()         { *m = IdentityDetails{} }
func (m *IdentityDetails) String() string { return proto.CompactTextString(m) }
func (*IdentityDetails) ProtoMessage()    {}
func (*IdentityDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_083a51a387612c8b, []int{2}
}

func (m *IdentityDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityDetails.Unmarshal(m, b)
}
func (m *IdentityDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityDetails.Marshal(b, m, deterministic)
}
func (m *IdentityDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityDetails.Merge(m, src)
}
func (m *IdentityDetails) XXX_Size() int {
	return xxx_messageInfo_IdentityDetails.Size(m)
}
func (m *IdentityDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityDetails.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityDetails proto.InternalMessageInfo

func (m *IdentityDetails) GetIdentityDocument() IdentityDocument {
	if m != nil {
		return m.IdentityDocument
	}
	return IdentityDocument_PASSPORT
}

func (m *IdentityDetails) GetIssuingCountry() string {
	if m != nil {
		return m.IssuingCountry
	}
	return ""
}

func (m *IdentityDetails) GetNationality() string {
	if m != nil {
		return m.Nationality
	}
	return ""
}

func (m *IdentityDetails) GetDocumentNumber() string {
	if m != nil {
		return m.DocumentNumber
	}
	return ""
}

func (m *IdentityDetails) GetDateOfBirth() *io.Date {
	if m != nil {
		return m.DateOfBirth
	}
	return nil
}

func (m *IdentityDetails) GetGender() io.Gender {
	if m != nil {
		return m.Gender
	}
	return io.Gender_NOT_KNOWN
}

func (m *IdentityDetails) GetIssuedDate() *io.Date {
	if m != nil {
		return m.IssuedDate
	}
	return nil
}

func (m *IdentityDetails) GetExpiryDate() *io.Date {
	if m != nil {
		return m.ExpiryDate
	}
	return nil
}

// Details of infant under 2 years not occupying a seat.
type Infant struct {
	// Personal details of the infant.
	// @tag: "validateGeneric:"required"
	InfantDetails *io.Person `protobuf:"bytes,1,opt,name=infantDetails,proto3" json:"infantDetails,omitempty" validateGeneric:"required"`
	// Optional identity details, only required if need to be rendered on the pass, or for analytics purposes.
	// @tag: "validateGeneric:"omitempty"
	IdentityDetails *IdentityDetails `protobuf:"bytes,2,opt,name=identityDetails,proto3" json:"identityDetails,omitempty" validateGeneric:"omitempty"`
	// The barcode payload to be rendered on the infant boarding pass. If not provided, an IATA barcode will be compiled, based on the adult boarding pass barcode data.
	// @tag: "validateGeneric:"omitempty"
	BarcodePayload string `protobuf:"bytes,3,opt,name=barcodePayload,proto3" json:"barcodePayload,omitempty" validateGeneric:"omitempty"`
	// Optional conditional items for the infant barcode.  Not required if barcode payload is set.
	// @tag: "validateGeneric:"omitempty"
	ConditionalItems *ConditionalItems `protobuf:"bytes,4,opt,name=conditionalItems,proto3" json:"conditionalItems,omitempty" validateGeneric:"omitempty"`
	// Optional additional barcode data. If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the infant barcode.
	// @tag: "validateGeneric:"omitempty"
	BarcodeAdditionalData string   `protobuf:"bytes,5,opt,name=barcodeAdditionalData,proto3" json:"barcodeAdditionalData,omitempty" validateGeneric:"omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Infant) Reset()         { *m = Infant{} }
func (m *Infant) String() string { return proto.CompactTextString(m) }
func (*Infant) ProtoMessage()    {}
func (*Infant) Descriptor() ([]byte, []int) {
	return fileDescriptor_083a51a387612c8b, []int{3}
}

func (m *Infant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Infant.Unmarshal(m, b)
}
func (m *Infant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Infant.Marshal(b, m, deterministic)
}
func (m *Infant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Infant.Merge(m, src)
}
func (m *Infant) XXX_Size() int {
	return xxx_messageInfo_Infant.Size(m)
}
func (m *Infant) XXX_DiscardUnknown() {
	xxx_messageInfo_Infant.DiscardUnknown(m)
}

var xxx_messageInfo_Infant proto.InternalMessageInfo

func (m *Infant) GetInfantDetails() *io.Person {
	if m != nil {
		return m.InfantDetails
	}
	return nil
}

func (m *Infant) GetIdentityDetails() *IdentityDetails {
	if m != nil {
		return m.IdentityDetails
	}
	return nil
}

func (m *Infant) GetBarcodePayload() string {
	if m != nil {
		return m.BarcodePayload
	}
	return ""
}

func (m *Infant) GetConditionalItems() *ConditionalItems {
	if m != nil {
		return m.ConditionalItems
	}
	return nil
}

func (m *Infant) GetBarcodeAdditionalData() string {
	if m != nil {
		return m.BarcodeAdditionalData
	}
	return ""
}

func init() {
	proto.RegisterEnum("flights.IdentityDocument", IdentityDocument_name, IdentityDocument_value)
	proto.RegisterType((*Passenger)(nil), "flights.Passenger")
	proto.RegisterType((*FrequentFlyerInfo)(nil), "flights.FrequentFlyerInfo")
	proto.RegisterType((*IdentityDetails)(nil), "flights.IdentityDetails")
	proto.RegisterType((*Infant)(nil), "flights.Infant")
}

func init() {
	proto.RegisterFile("io/flights/passenger.proto", fileDescriptor_083a51a387612c8b)
}

var fileDescriptor_083a51a387612c8b = []byte{
	// 934 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x72, 0xdb, 0x36,
	0x14, 0xad, 0xe8, 0x47, 0x2c, 0xb8, 0xb5, 0x65, 0xb8, 0x69, 0x14, 0x2f, 0x32, 0x18, 0x2f, 0x32,
	0x1e, 0x8f, 0x43, 0x66, 0xdc, 0xc7, 0xa2, 0x3b, 0x59, 0xa2, 0x13, 0x4e, 0x5c, 0x49, 0x85, 0x95,
	0xcc, 0xb4, 0x1b, 0x0d, 0x44, 0x5c, 0x51, 0xa8, 0x49, 0x40, 0x05, 0x20, 0x3b, 0xfa, 0x8a, 0x76,
	0xfa, 0x0b, 0xdd, 0x65, 0xd3, 0x0f, 0xe9, 0x4c, 0x17, 0xf9, 0x90, 0x7e, 0x43, 0x87, 0x20, 0x2d,
	0x29, 0x94, 0x37, 0x5d, 0x09, 0xba, 0xe7, 0xdc, 0x17, 0xee, 0xb9, 0x20, 0x3a, 0x12, 0x2a, 0x18,
	0xa7, 0x22, 0x99, 0x58, 0x13, 0x4c, 0x99, 0x31, 0x20, 0x13, 0xd0, 0xfe, 0x54, 0x2b, 0xab, 0xf0,
	0xa3, 0x12, 0x38, 0x6a, 0xae, 0x90, 0x46, 0x4c, 0xc7, 0x8a, 0x43, 0x41, 0x39, 0x7a, 0x26, 0x54,
	0x10, 0xab, 0x2c, 0x53, 0xb2, 0xfc, 0x19, 0xaa, 0xd1, 0x2f, 0x10, 0x5b, 0x53, 0xe2, 0xcd, 0x25,
	0x3e, 0x05, 0x6d, 0x94, 0x64, 0x69, 0x89, 0x9c, 0xb9, 0x9f, 0xf8, 0x45, 0x02, 0xf2, 0x85, 0xb9,
	0x63, 0x49, 0x02, 0x3a, 0x50, 0x53, 0x2b, 0x94, 0x34, 0x01, 0x93, 0x52, 0x59, 0xe6, 0xce, 0x05,
	0xfb, 0xf8, 0xaf, 0x2d, 0x54, 0xef, 0xdf, 0x97, 0x87, 0xbf, 0x43, 0x8d, 0x45, 0xad, 0x1d, 0xb0,
	0x4c, 0xa4, 0xa6, 0x59, 0x23, 0xb5, 0x93, 0xdd, 0x73, 0xe4, 0x0b, 0xe5, 0xf7, 0x5d, 0x26, 0xba,
	0xc6, 0xc1, 0xaf, 0xd1, 0xc1, 0x58, 0xc3, 0xaf, 0x33, 0x90, 0xf6, 0x32, 0x9d, 0x83, 0x8e, 0xe4,
	0x58, 0x35, 0x3d, 0xe7, 0x78, 0xe4, 0x97, 0x0d, 0xfa, 0x97, 0x55, 0x06, 0x5d, 0x77, 0xc2, 0x17,
	0x68, 0x5f, 0x70, 0x90, 0x56, 0xd8, 0xf9, 0x7d, 0x01, 0x1b, 0x2e, 0x4e, 0x73, 0x11, 0x27, 0xfa,
	0x14, 0xa7, 0x55, 0x07, 0xfc, 0x0c, 0xa1, 0x3b, 0x61, 0x27, 0x91, 0x1c, 0x33, 0x69, 0x9b, 0x9b,
	0xa4, 0x76, 0xb2, 0x43, 0x57, 0x2c, 0xf8, 0x5b, 0xf4, 0x85, 0x70, 0xa7, 0xfb, 0x0c, 0x5b, 0x2e,
	0xc3, 0xfe, 0x32, 0x83, 0x43, 0xe9, 0xa7, 0x2c, 0xfc, 0x12, 0x1d, 0xde, 0x48, 0x75, 0x27, 0x07,
	0x9a, 0xdd, 0x42, 0x0a, 0xba, 0x3b, 0xcb, 0x46, 0xa0, 0x9b, 0x8f, 0x48, 0xed, 0xa4, 0x4e, 0x1f,
	0x82, 0xbe, 0xff, 0xe8, 0xfd, 0xd1, 0xfa, 0xc7, 0x43, 0x7f, 0x7b, 0xa7, 0xcb, 0x3b, 0x3e, 0xff,
	0xe0, 0x2d, 0xce, 0x44, 0xc8, 0xb1, 0xd2, 0x99, 0x1b, 0x08, 0x89, 0x99, 0x24, 0xc5, 0x9c, 0x58,
	0x9a, 0xce, 0xc9, 0x08, 0xc8, 0x54, 0xab, 0x5b, 0xc1, 0x81, 0xfb, 0xa4, 0x95, 0xa6, 0x64, 0x2c,
	0x20, 0xe5, 0x86, 0x30, 0x0d, 0x0b, 0x1a, 0xc9, 0x9b, 0x22, 0x76, 0x02, 0x04, 0xde, 0xc7, 0xe0,
	0x8c, 0x44, 0x8d, 0x9d, 0x61, 0x99, 0x43, 0xb2, 0x0c, 0x88, 0x55, 0x79, 0x40, 0x0d, 0x92, 0x83,
	0x06, 0x4e, 0x94, 0x74, 0xa4, 0x91, 0x62, 0x9a, 0x0b, 0x99, 0x90, 0x7c, 0xa0, 0x45, 0x96, 0xe9,
	0xb2, 0x36, 0x43, 0xac, 0x06, 0x66, 0x81, 0x13, 0x66, 0x48, 0x3f, 0x8a, 0x08, 0x93, 0x9c, 0x80,
	0x8c, 0xf5, 0x7c, 0xea, 0x8c, 0x96, 0x68, 0x30, 0xd6, 0x27, 0x0f, 0xb7, 0x23, 0x0c, 0xe1, 0x90,
	0x42, 0xce, 0x54, 0x7a, 0x99, 0x79, 0x26, 0x67, 0x86, 0x8d, 0x52, 0x20, 0x4a, 0xc6, 0xe0, 0x8a,
	0xc8, 0x33, 0x12, 0x0d, 0xb1, 0xd2, 0x9c, 0x4c, 0x98, 0x21, 0x42, 0xde, 0xb2, 0x54, 0xf0, 0x3c,
	0xb1, 0xff, 0xb1, 0xb6, 0xa6, 0xb5, 0xe3, 0xdf, 0x6a, 0xe8, 0x60, 0x4d, 0x4a, 0x98, 0xa0, 0xdd,
	0xa9, 0x56, 0x89, 0x66, 0x59, 0x97, 0x65, 0xe0, 0x44, 0x5b, 0xa7, 0xab, 0x26, 0x7c, 0x86, 0x0e,
	0x98, 0xd0, 0xa9, 0x90, 0xd0, 0x01, 0x23, 0x12, 0xc9, 0xac, 0xd2, 0x4e, 0xa3, 0x75, 0xba, 0x0e,
	0xe0, 0xaf, 0xd0, 0xb6, 0x2c, 0xe6, 0xbb, 0xe1, 0x28, 0xe5, 0x3f, 0x8c, 0xd1, 0xa6, 0x15, 0xa0,
	0x9d, 0xaa, 0xea, 0xd4, 0x9d, 0x8f, 0xff, 0xf5, 0xd0, 0x7e, 0x45, 0x94, 0x38, 0x44, 0x8d, 0x85,
	0x2c, 0x55, 0x3c, 0xcb, 0x40, 0x5a, 0x57, 0xd4, 0xde, 0xf9, 0xd3, 0x75, 0x21, 0x97, 0x04, 0xba,
	0xe6, 0x82, 0x9f, 0xa3, 0x3d, 0x61, 0xcc, 0x4c, 0xc8, 0xa4, 0xad, 0x66, 0xd2, 0xea, 0x79, 0x59,
	0x71, 0xc5, 0x9a, 0xb7, 0x2f, 0x59, 0x21, 0x0a, 0x61, 0xe7, 0x65, 0xcd, 0xab, 0xa6, 0x3c, 0x12,
	0x2f, 0xa3, 0x96, 0xc2, 0x2d, 0x5a, 0xa8, 0x58, 0xf1, 0x29, 0xda, 0xcd, 0xef, 0xbe, 0x37, 0xbe,
	0x10, 0xda, 0x4e, 0xca, 0xd5, 0xd8, 0xc9, 0xb7, 0xbf, 0xc3, 0x2c, 0xd0, 0x55, 0x10, 0x1f, 0xa3,
	0xed, 0xc4, 0x0d, 0xb6, 0xb9, 0xed, 0x5a, 0x73, 0x8f, 0xc4, 0x2b, 0x67, 0xa1, 0x25, 0x82, 0x4f,
	0x10, 0xca, 0x6b, 0x05, 0x9e, 0xbb, 0xbb, 0x65, 0x59, 0x0d, 0xb7, 0x82, 0xe5, 0x4c, 0x78, 0x3f,
	0x15, 0x7a, 0xee, 0x98, 0x3b, 0x55, 0xe6, 0x12, 0x3b, 0xfe, 0xd3, 0x43, 0xdb, 0xe5, 0x2e, 0xbf,
	0xac, 0xee, 0xf2, 0xfa, 0x73, 0x55, 0x59, 0xe3, 0x07, 0x5e, 0x18, 0xef, 0xff, 0xbe, 0x30, 0xcf,
	0xd1, 0x5e, 0xf9, 0x5c, 0xf7, 0xd9, 0x3c, 0x55, 0x8c, 0x97, 0x37, 0x5e, 0xb1, 0xe6, 0x2a, 0x88,
	0x95, 0xe4, 0xa2, 0x18, 0x43, 0x64, 0x21, 0x33, 0xee, 0xda, 0x77, 0x57, 0x54, 0xd0, 0xae, 0x10,
	0xe8, 0x9a, 0x0b, 0xfe, 0x06, 0x3d, 0x2e, 0x03, 0xb7, 0xf8, 0x3d, 0xd2, 0x61, 0x96, 0xb9, 0xe9,
	0xd4, 0xe9, 0xc3, 0xe0, 0xe9, 0xef, 0x35, 0xd4, 0xa8, 0x4a, 0x0c, 0x7f, 0x8e, 0x76, 0xfa, 0xad,
	0xeb, 0xeb, 0x7e, 0x8f, 0x0e, 0x1a, 0x9f, 0xe1, 0x2f, 0x51, 0xa3, 0xdb, 0x1a, 0x44, 0xbd, 0x6e,
	0xeb, 0x6a, 0x18, 0x75, 0x86, 0xed, 0x16, 0xed, 0x34, 0x6a, 0xf8, 0x10, 0xed, 0x77, 0x68, 0xf4,
	0x2e, 0xea, 0xbe, 0x1a, 0x5e, 0x45, 0xed, 0xb0, 0x7b, 0x1d, 0x36, 0x3c, 0xbc, 0x8f, 0x76, 0xdb,
	0x34, 0xec, 0x44, 0x83, 0x82, 0xb5, 0x81, 0x9f, 0xa0, 0xc3, 0x4b, 0x1a, 0xfe, 0xf8, 0x36, 0xec,
	0x0e, 0x86, 0x97, 0x57, 0x3f, 0x85, 0xb4, 0x00, 0x36, 0xf1, 0x53, 0xf4, 0xb8, 0x37, 0x78, 0x1d,
	0xd2, 0xe1, 0x80, 0xb6, 0xde, 0x85, 0x57, 0xc3, 0x4e, 0xaf, 0xfd, 0xf6, 0x87, 0xb0, 0x3b, 0x68,
	0x6c, 0x5d, 0x5c, 0xa3, 0x27, 0x42, 0xf9, 0xf9, 0x4a, 0xdf, 0x08, 0xeb, 0xf7, 0xdf, 0x08, 0xe5,
	0x5f, 0x16, 0xd7, 0xf0, 0xf3, 0x99, 0xb1, 0xcc, 0x4c, 0x16, 0x58, 0xac, 0xb2, 0x40, 0xa8, 0x20,
	0x53, 0x1c, 0xd2, 0xc0, 0xf0, 0x9b, 0x20, 0x51, 0xc1, 0xf2, 0x63, 0xf9, 0xc1, 0xab, 0xf7, 0xdf,
	0x94, 0x9e, 0xa3, 0x6d, 0xf7, 0x25, 0xfb, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xca,
	0xee, 0x91, 0x72, 0x07, 0x00, 0x00,
}
