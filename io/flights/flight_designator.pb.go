// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/flight_designator.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Flight alerts automatically update boarding passes as information becomes available or changes. Note that these services may incur additional usage charges.
type FlightAlerts int32

const (
	// Boarding passes will not automatically update.
	FlightAlerts_NO_ALERTS FlightAlerts = 0
	// Boarding passes will automatically update whenever a change to the departure gate/time, arrival gate/time or baggage belt information is detected.
	FlightAlerts_ALL_ALERTS FlightAlerts = 1
	// Boarding passes will automatically update whenever a change to the departure gate is detected.
	FlightAlerts_DEPARTURE_GATE_ALERT FlightAlerts = 2
	// Boarding passes will automatically update whenever a change to the estimated departure gate is detected.
	FlightAlerts_DEPARTURE_TIME_ALERT FlightAlerts = 4
	// Boarding passes will automatically update whenever a change to the arrival gate is detected.
	FlightAlerts_ARRIVAL_GATE_ALERT FlightAlerts = 8
	// Boarding passes will automatically update whenever a change to the estimated arrival time is detected.
	FlightAlerts_ARRIVAL_TIME_ALERT FlightAlerts = 16
	// Boarding passes will automatically update whenever the baggage collection belt or area is known or changes.
	FlightAlerts_BAGGAGE_BELT_ALERT FlightAlerts = 32
)

var FlightAlerts_name = map[int32]string{
	0:  "NO_ALERTS",
	1:  "ALL_ALERTS",
	2:  "DEPARTURE_GATE_ALERT",
	4:  "DEPARTURE_TIME_ALERT",
	8:  "ARRIVAL_GATE_ALERT",
	16: "ARRIVAL_TIME_ALERT",
	32: "BAGGAGE_BELT_ALERT",
}

var FlightAlerts_value = map[string]int32{
	"NO_ALERTS":            0,
	"ALL_ALERTS":           1,
	"DEPARTURE_GATE_ALERT": 2,
	"DEPARTURE_TIME_ALERT": 4,
	"ARRIVAL_GATE_ALERT":   8,
	"ARRIVAL_TIME_ALERT":   16,
	"BAGGAGE_BELT_ALERT":   32,
}

func (x FlightAlerts) String() string {
	return proto.EnumName(FlightAlerts_name, int32(x))
}

func (FlightAlerts) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{0}
}

// The Boarding Policy is used to determine informational labels on the pass.
type BoardingPolicy int32

const (
	// Boarding is managed by zone.
	BoardingPolicy_ZONE BoardingPolicy = 0
	// Boarding is managed by group.
	BoardingPolicy_GROUP BoardingPolicy = 1
	// Another, or No boarding policy is in place.
	BoardingPolicy_OTHER_BOARDING_POLICY BoardingPolicy = 2
)

var BoardingPolicy_name = map[int32]string{
	0: "ZONE",
	1: "GROUP",
	2: "OTHER_BOARDING_POLICY",
}

var BoardingPolicy_value = map[string]int32{
	"ZONE":                  0,
	"GROUP":                 1,
	"OTHER_BOARDING_POLICY": 2,
}

func (x BoardingPolicy) String() string {
	return proto.EnumName(BoardingPolicy_name, int32(x))
}

func (BoardingPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{1}
}

// The Seat Class Policy is used to determine informational labels on the pass.
type SeatClassPolicy int32

const (
	// Seats groups are determined by cabin. "Cabin" will be used as the label on the pass.
	SeatClassPolicy_CABIN SeatClassPolicy = 0
	// Seats groups are determined by class of travel. "Class" will be used as the label on the pass.
	SeatClassPolicy_CLASS SeatClassPolicy = 1
	// Seat groups are determined by tier. "Tier" will be used as the label on the pass.
	SeatClassPolicy_TIER SeatClassPolicy = 2
	// Another, or no seat policy is in place. No label will be used on the pass.
	SeatClassPolicy_OTHER_SEAT_POLICY SeatClassPolicy = 3
)

var SeatClassPolicy_name = map[int32]string{
	0: "CABIN",
	1: "CLASS",
	2: "TIER",
	3: "OTHER_SEAT_POLICY",
}

var SeatClassPolicy_value = map[string]int32{
	"CABIN":             0,
	"CLASS":             1,
	"TIER":              2,
	"OTHER_SEAT_POLICY": 3,
}

func (x SeatClassPolicy) String() string {
	return proto.EnumName(SeatClassPolicy_name, int32(x))
}

func (SeatClassPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{2}
}

// The authority of an identifier (carrier code, airport code, etc.).
type Authority int32

const (
	// International Air Transport Association (IATA).
	Authority_IATA Authority = 0
	// International Civil Aviation Organization (ICAO).
	Authority_ICAO Authority = 1
)

var Authority_name = map[int32]string{
	0: "IATA",
	1: "ICAO",
}

var Authority_value = map[string]int32{
	"IATA": 0,
	"ICAO": 1,
}

func (x Authority) String() string {
	return proto.EnumName(Authority_name, int32(x))
}

func (Authority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{3}
}

// Pass fields represent the keys for localizable label content contained in the Pass design. The fields will be rendered in ascending order of the enum value. The names and usage are suggested only. These fields can be used for any purpose or not at all, depending on your needs.
type PassFields int32

const (
	// Details of the passenger passport, typically a masked number and expiry date.
	PassFields_PASSPORT_DETAILS PassFields = 0
	// Used for Special Service Request (SSR) codes.
	PassFields_SSRS PassFields = 1
	// Provide advice about booking modification, meal ordering, and other pre-travel advice such as how much time to allow before departure, etc.
	PassFields_PRE_TRAVEL_ADVICE PassFields = 2
	// Provide advice on check-in location, opening and closing times and other check-in considerations such as disallowed cabin-baggage items. This field can also be used for baggage allowances.
	PassFields_CHECKIN_ADVICE PassFields = 3
	// Provide advice on local and destination security, immigration and visa or other documentation requirements.
	PassFields_SECURITY_AND_IMMIGRATION_ADVICE PassFields = 4
	// Provide advice on baggage allowance, restrictions (E.g. lithium batteries, firearms, etc.), fees and self-service instructions (where applicable). This field can also be used for the arrival baggage belt location and arrival/customs procedures.
	PassFields_BAGGAGE_ADVICE PassFields = 5
	// Used primarily by airline staff to identify the fare type / class of travel. Can assist passengers when claiming missing miles.
	PassFields_FARE_TYPE PassFields = 6
	// Can be used for promotional and marketing purposes.
	PassFields_MARKETING_OFFER PassFields = 7
	// Can be used for promotional and marketing purposes.
	PassFields_ADDITIONAL_MARKETING_OFFER PassFields = 8
	// Used for additional terms and conditions of carriage not detailed elsewhere on the pass.
	PassFields_GENERAL_TERMS PassFields = 9
)

var PassFields_name = map[int32]string{
	0: "PASSPORT_DETAILS",
	1: "SSRS",
	2: "PRE_TRAVEL_ADVICE",
	3: "CHECKIN_ADVICE",
	4: "SECURITY_AND_IMMIGRATION_ADVICE",
	5: "BAGGAGE_ADVICE",
	6: "FARE_TYPE",
	7: "MARKETING_OFFER",
	8: "ADDITIONAL_MARKETING_OFFER",
	9: "GENERAL_TERMS",
}

var PassFields_value = map[string]int32{
	"PASSPORT_DETAILS":                0,
	"SSRS":                            1,
	"PRE_TRAVEL_ADVICE":               2,
	"CHECKIN_ADVICE":                  3,
	"SECURITY_AND_IMMIGRATION_ADVICE": 4,
	"BAGGAGE_ADVICE":                  5,
	"FARE_TYPE":                       6,
	"MARKETING_OFFER":                 7,
	"ADDITIONAL_MARKETING_OFFER":      8,
	"GENERAL_TERMS":                   9,
}

func (x PassFields) String() string {
	return proto.EnumName(PassFields_name, int32(x))
}

func (PassFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{4}
}

// carrier code and flight number and valid from represent the primary key.
type FlightDesignator struct {
	// The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	// The flight number.  Note this number must match the carrier code.
	FlightNumber string `protobuf:"bytes,4,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	// The date that the record is valid from. If not provided, then the date of submission will be used.
	ValidFrom *io.Date `protobuf:"bytes,5,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the IATA carrier code for the operating carrier.
	OperatingCarrierCode string `protobuf:"bytes,6,opt,name=operatingCarrierCode,proto3" json:"operatingCarrierCode,omitempty"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the flight number for the operating carrier.
	OperatingFlightNumber string `protobuf:"bytes,7,opt,name=operatingFlightNumber,proto3" json:"operatingFlightNumber,omitempty"`
	// The name of the operating airline.
	OperatingAirlineName string `protobuf:"bytes,10,opt,name=operatingAirlineName,proto3" json:"operatingAirlineName,omitempty"`
	// The localized name of the operating airline.
	LocalizedOperatingAirlineName *io.LocalizedString `protobuf:"bytes,11,opt,name=localizedOperatingAirlineName,proto3" json:"localizedOperatingAirlineName,omitempty"`
	// The origin port of the flight. In the case of direct flights with multiple stops, this will represent the port where the route commences.
	Origin *Port `protobuf:"bytes,12,opt,name=origin,proto3" json:"origin,omitempty"`
	// The destination port of the flight. In the case of direct flights with multiple stops, this will represent the final port where the route terminates.
	Destination *Port `protobuf:"bytes,13,opt,name=destination,proto3" json:"destination,omitempty"`
	// In the case of multiple stops, an ordered array of transit points, commencing with the first port after the origin and ending with the penultimate port.
	TransitPoints []*Port `protobuf:"bytes,14,rep,name=transitPoints,proto3" json:"transitPoints,omitempty"`
	// The default terminal that the flight departs from.
	DepartureTerminal string `protobuf:"bytes,15,opt,name=departureTerminal,proto3" json:"departureTerminal,omitempty"`
	// The default terminal of the final destination.
	ArrivalTerminal string `protobuf:"bytes,16,opt,name=arrivalTerminal,proto3" json:"arrivalTerminal,omitempty"`
	// In the case of multiple stops, an ordered array of transit terminals. The length of this array should match the number of transit points.
	TransitTerminals []string `protobuf:"bytes,17,rep,name=transitTerminals,proto3" json:"transitTerminals,omitempty"`
	// The Boarding Policy is used to determine informational labels on the pass.
	BoardingPolicy BoardingPolicy `protobuf:"varint,18,opt,name=boardingPolicy,proto3,enum=flights.BoardingPolicy" json:"boardingPolicy,omitempty"`
	// The Seat Class Policy is used to determine informational labels on the pass.
	SeatClassPolicy SeatClassPolicy `protobuf:"varint,19,opt,name=seatClassPolicy,proto3,enum=flights.SeatClassPolicy" json:"seatClassPolicy,omitempty"`
	// An array of alerts to subscribe to for the flight. Note that additional charges apply.
	Alerts []FlightAlerts `protobuf:"varint,20,rep,packed,name=alerts,proto3,enum=flights.FlightAlerts" json:"alerts,omitempty"`
	// The PassKit designId that will be used for boarding passes for this flight. It can be overwritten at the flight level.
	PassDesignId string `protobuf:"bytes,21,opt,name=passDesignId,proto3" json:"passDesignId,omitempty"`
	// minutes after estimated arrival to automatically invalidate the pass. Enter 0 if the pass should not auto invalidate.
	AutoInvalidateAfter int32 `protobuf:"varint,22,opt,name=autoInvalidateAfter,proto3" json:"autoInvalidateAfter,omitempty"`
	// invalidate passes where either the booking or the flight have been cancelled. default is true)
	AutoInvalidateCancelledPasses bool `protobuf:"varint,23,opt,name=autoInvalidateCancelledPasses,proto3" json:"autoInvalidateCancelledPasses,omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen.
	LocationMessages []*io.GPSLocation `protobuf:"bytes,24,rep,name=locationMessages,proto3" json:"locationMessages,omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen.
	BeaconMessages []*io.Beacon `protobuf:"bytes,25,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty"`
	// A list of links to be appended to the end of each boarding pass.
	DefaultLinks []*io.Link `protobuf:"bytes,26,rep,name=defaultLinks,proto3" json:"defaultLinks,omitempty"`
	// Array of details, length should be equal to length of transitPoints+1. If flight is non-stop, length will be 1.
	CheckIn []*CheckInDetails `protobuf:"bytes,27,rep,name=checkIn,proto3" json:"checkIn,omitempty"`
	// Setting to false will prevent further flights to be created against this flight number. Will automatically be set to false if a second designator with a validFrom date before the current date and after this designator's validFrom date is found.
	Active bool `protobuf:"varint,28,opt,name=active,proto3" json:"active,omitempty"`
	// PassKit offer ID. Hero offers are displayed prominently on the boarding pass. A hero offer can only be applied to the entire flight.
	HeroOfferId string `protobuf:"bytes,29,opt,name=heroOfferId,proto3" json:"heroOfferId,omitempty"`
	// PassKit Offer IDs. For Google Pay, the first offer in this array will also display a promotional image.
	OfferIds             []string `protobuf:"bytes,30,rep,name=offerIds,proto3" json:"offerIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlightDesignator) Reset()         { *m = FlightDesignator{} }
func (m *FlightDesignator) String() string { return proto.CompactTextString(m) }
func (*FlightDesignator) ProtoMessage()    {}
func (*FlightDesignator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{0}
}

func (m *FlightDesignator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlightDesignator.Unmarshal(m, b)
}
func (m *FlightDesignator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlightDesignator.Marshal(b, m, deterministic)
}
func (m *FlightDesignator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlightDesignator.Merge(m, src)
}
func (m *FlightDesignator) XXX_Size() int {
	return xxx_messageInfo_FlightDesignator.Size(m)
}
func (m *FlightDesignator) XXX_DiscardUnknown() {
	xxx_messageInfo_FlightDesignator.DiscardUnknown(m)
}

var xxx_messageInfo_FlightDesignator proto.InternalMessageInfo

func (m *FlightDesignator) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *FlightDesignator) GetFlightNumber() string {
	if m != nil {
		return m.FlightNumber
	}
	return ""
}

func (m *FlightDesignator) GetValidFrom() *io.Date {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *FlightDesignator) GetOperatingCarrierCode() string {
	if m != nil {
		return m.OperatingCarrierCode
	}
	return ""
}

func (m *FlightDesignator) GetOperatingFlightNumber() string {
	if m != nil {
		return m.OperatingFlightNumber
	}
	return ""
}

func (m *FlightDesignator) GetOperatingAirlineName() string {
	if m != nil {
		return m.OperatingAirlineName
	}
	return ""
}

func (m *FlightDesignator) GetLocalizedOperatingAirlineName() *io.LocalizedString {
	if m != nil {
		return m.LocalizedOperatingAirlineName
	}
	return nil
}

func (m *FlightDesignator) GetOrigin() *Port {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *FlightDesignator) GetDestination() *Port {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *FlightDesignator) GetTransitPoints() []*Port {
	if m != nil {
		return m.TransitPoints
	}
	return nil
}

func (m *FlightDesignator) GetDepartureTerminal() string {
	if m != nil {
		return m.DepartureTerminal
	}
	return ""
}

func (m *FlightDesignator) GetArrivalTerminal() string {
	if m != nil {
		return m.ArrivalTerminal
	}
	return ""
}

func (m *FlightDesignator) GetTransitTerminals() []string {
	if m != nil {
		return m.TransitTerminals
	}
	return nil
}

func (m *FlightDesignator) GetBoardingPolicy() BoardingPolicy {
	if m != nil {
		return m.BoardingPolicy
	}
	return BoardingPolicy_ZONE
}

func (m *FlightDesignator) GetSeatClassPolicy() SeatClassPolicy {
	if m != nil {
		return m.SeatClassPolicy
	}
	return SeatClassPolicy_CABIN
}

func (m *FlightDesignator) GetAlerts() []FlightAlerts {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *FlightDesignator) GetPassDesignId() string {
	if m != nil {
		return m.PassDesignId
	}
	return ""
}

func (m *FlightDesignator) GetAutoInvalidateAfter() int32 {
	if m != nil {
		return m.AutoInvalidateAfter
	}
	return 0
}

func (m *FlightDesignator) GetAutoInvalidateCancelledPasses() bool {
	if m != nil {
		return m.AutoInvalidateCancelledPasses
	}
	return false
}

func (m *FlightDesignator) GetLocationMessages() []*io.GPSLocation {
	if m != nil {
		return m.LocationMessages
	}
	return nil
}

func (m *FlightDesignator) GetBeaconMessages() []*io.Beacon {
	if m != nil {
		return m.BeaconMessages
	}
	return nil
}

func (m *FlightDesignator) GetDefaultLinks() []*io.Link {
	if m != nil {
		return m.DefaultLinks
	}
	return nil
}

func (m *FlightDesignator) GetCheckIn() []*CheckInDetails {
	if m != nil {
		return m.CheckIn
	}
	return nil
}

func (m *FlightDesignator) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *FlightDesignator) GetHeroOfferId() string {
	if m != nil {
		return m.HeroOfferId
	}
	return ""
}

func (m *FlightDesignator) GetOfferIds() []string {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

type FlightDesignatorRequest struct {
	// The IATA or ICAO carrier code for the flight.
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	// The flight number.
	FlightNumber         int32    `protobuf:"varint,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlightDesignatorRequest) Reset()         { *m = FlightDesignatorRequest{} }
func (m *FlightDesignatorRequest) String() string { return proto.CompactTextString(m) }
func (*FlightDesignatorRequest) ProtoMessage()    {}
func (*FlightDesignatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{1}
}

func (m *FlightDesignatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlightDesignatorRequest.Unmarshal(m, b)
}
func (m *FlightDesignatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlightDesignatorRequest.Marshal(b, m, deterministic)
}
func (m *FlightDesignatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlightDesignatorRequest.Merge(m, src)
}
func (m *FlightDesignatorRequest) XXX_Size() int {
	return xxx_messageInfo_FlightDesignatorRequest.Size(m)
}
func (m *FlightDesignatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlightDesignatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlightDesignatorRequest proto.InternalMessageInfo

func (m *FlightDesignatorRequest) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *FlightDesignatorRequest) GetFlightNumber() int32 {
	if m != nil {
		return m.FlightNumber
	}
	return 0
}

// Information to assist passengers to check in.
type CheckInDetails struct {
	// Minutes before scheduled departure time that check in opens. Default is 180 minutes.
	CheckinOpenTime int32 `protobuf:"varint,1,opt,name=checkinOpenTime,proto3" json:"checkinOpenTime,omitempty"`
	// Minutes before scheduled departure time that check in closes. Default is 45 minutes.
	CheckinCloseTime int32 `protobuf:"varint,2,opt,name=checkinCloseTime,proto3" json:"checkinCloseTime,omitempty"`
	// String that represents the default check in counter/row or other identifier to assist passenger.
	CheckinLocation string `protobuf:"bytes,4,opt,name=checkinLocation,proto3" json:"checkinLocation,omitempty"`
	//localized checkin location.
	LocalizedCheckinLocation *io.LocalizedString `protobuf:"bytes,5,opt,name=localizedCheckinLocation,proto3" json:"localizedCheckinLocation,omitempty"`
	// Ability to process NFC boarding passes will vary by port. Default is false.
	EnableNFC            bool     `protobuf:"varint,6,opt,name=enableNFC,proto3" json:"enableNFC,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckInDetails) Reset()         { *m = CheckInDetails{} }
func (m *CheckInDetails) String() string { return proto.CompactTextString(m) }
func (*CheckInDetails) ProtoMessage()    {}
func (*CheckInDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e310730c5d55661, []int{2}
}

func (m *CheckInDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckInDetails.Unmarshal(m, b)
}
func (m *CheckInDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckInDetails.Marshal(b, m, deterministic)
}
func (m *CheckInDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckInDetails.Merge(m, src)
}
func (m *CheckInDetails) XXX_Size() int {
	return xxx_messageInfo_CheckInDetails.Size(m)
}
func (m *CheckInDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckInDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CheckInDetails proto.InternalMessageInfo

func (m *CheckInDetails) GetCheckinOpenTime() int32 {
	if m != nil {
		return m.CheckinOpenTime
	}
	return 0
}

func (m *CheckInDetails) GetCheckinCloseTime() int32 {
	if m != nil {
		return m.CheckinCloseTime
	}
	return 0
}

func (m *CheckInDetails) GetCheckinLocation() string {
	if m != nil {
		return m.CheckinLocation
	}
	return ""
}

func (m *CheckInDetails) GetLocalizedCheckinLocation() *io.LocalizedString {
	if m != nil {
		return m.LocalizedCheckinLocation
	}
	return nil
}

func (m *CheckInDetails) GetEnableNFC() bool {
	if m != nil {
		return m.EnableNFC
	}
	return false
}

func init() {
	proto.RegisterEnum("flights.FlightAlerts", FlightAlerts_name, FlightAlerts_value)
	proto.RegisterEnum("flights.BoardingPolicy", BoardingPolicy_name, BoardingPolicy_value)
	proto.RegisterEnum("flights.SeatClassPolicy", SeatClassPolicy_name, SeatClassPolicy_value)
	proto.RegisterEnum("flights.Authority", Authority_name, Authority_value)
	proto.RegisterEnum("flights.PassFields", PassFields_name, PassFields_value)
	proto.RegisterType((*FlightDesignator)(nil), "flights.FlightDesignator")
	proto.RegisterType((*FlightDesignatorRequest)(nil), "flights.FlightDesignatorRequest")
	proto.RegisterType((*CheckInDetails)(nil), "flights.CheckInDetails")
}

func init() { proto.RegisterFile("io/flights/flight_designator.proto", fileDescriptor_0e310730c5d55661) }

var fileDescriptor_0e310730c5d55661 = []byte{
	// 1456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x72, 0x1a, 0xc9,
	0x15, 0xf6, 0x20, 0x81, 0xa1, 0x25, 0xa1, 0x51, 0xcb, 0xac, 0xc7, 0x5a, 0x7b, 0x77, 0xa2, 0xfc,
	0x14, 0xa1, 0x24, 0xd8, 0xc8, 0xa9, 0xca, 0xc6, 0x9b, 0x4a, 0xd2, 0x0c, 0x03, 0x9e, 0x32, 0x02,
	0xaa, 0x19, 0xb9, 0xca, 0x4e, 0x25, 0x54, 0x6b, 0xa6, 0x85, 0x3a, 0x1e, 0xa6, 0x49, 0x77, 0xcb,
	0x6b, 0x6f, 0x6a, 0xab, 0x72, 0x9d, 0x4b, 0x3d, 0x41, 0x6e, 0x72, 0x91, 0xbc, 0x41, 0xaa, 0x72,
	0x91, 0x67, 0xd0, 0x4b, 0xe4, 0x32, 0x8f, 0x90, 0xad, 0x69, 0x06, 0x34, 0x20, 0x56, 0x57, 0xc0,
	0xf7, 0x7d, 0xe7, 0xeb, 0xee, 0xd3, 0xa7, 0xcf, 0x01, 0x1c, 0x32, 0xde, 0xb8, 0x88, 0xd8, 0xf8,
	0x52, 0xc9, 0xf4, 0x73, 0x14, 0x52, 0xc9, 0xc6, 0x31, 0x51, 0x5c, 0xd4, 0xa7, 0x82, 0x2b, 0x0e,
	0x1f, 0xa6, 0x82, 0x83, 0x4f, 0x19, 0x6f, 0x90, 0x29, 0x6b, 0x04, 0x7c, 0x32, 0xe1, 0xf1, 0x88,
	0x9f, 0xff, 0x91, 0x06, 0x4a, 0xce, 0x54, 0x07, 0x4f, 0x19, 0x4f, 0x89, 0x46, 0xc4, 0x03, 0x12,
	0xb1, 0x6f, 0x88, 0x62, 0x3c, 0x4e, 0xd9, 0x27, 0xb7, 0xec, 0x54, 0xf0, 0x0f, 0x6c, 0xc2, 0xd4,
	0xc7, 0x94, 0xaa, 0x64, 0x02, 0x59, 0xfc, 0x6e, 0xee, 0x67, 0x65, 0x76, 0x46, 0x98, 0x98, 0x72,
	0xa1, 0x52, 0xe6, 0x48, 0x7f, 0x04, 0xc7, 0x63, 0x1a, 0x1f, 0xcb, 0xaf, 0xc9, 0x78, 0x4c, 0x45,
	0x83, 0x4f, 0x93, 0xc5, 0x64, 0x83, 0xc4, 0x31, 0x57, 0x7a, 0xe1, 0xd4, 0xe7, 0xf0, 0xef, 0xdb,
	0xc0, 0x6c, 0x6b, 0x9f, 0xd6, 0xe2, 0x60, 0xf0, 0x17, 0x60, 0x2b, 0x20, 0x42, 0x30, 0x2a, 0x1c,
	0x1e, 0x52, 0xcb, 0xb0, 0x8d, 0x6a, 0xa9, 0x59, 0xb9, 0x46, 0xf0, 0xaf, 0xc6, 0xee, 0x1f, 0x7e,
	0x87, 0x8e, 0xdf, 0x7e, 0x71, 0xfc, 0xcb, 0xdf, 0xff, 0xf9, 0xf9, 0xd1, 0xcf, 0xbf, 0xfd, 0x11,
	0xce, 0x2a, 0xe1, 0x4f, 0xc1, 0xf6, 0x6c, 0x53, 0xbd, 0xab, 0xc9, 0x39, 0x15, 0xd6, 0xa6, 0x8e,
	0xcc, 0x5f, 0xa3, 0xdc, 0x87, 0x3c, 0x5e, 0xa2, 0xe0, 0x4f, 0x40, 0xe9, 0x3d, 0x89, 0x58, 0xd8,
	0x16, 0x7c, 0x62, 0xe5, 0x6d, 0xa3, 0xba, 0x75, 0x52, 0xac, 0x33, 0x5e, 0x6f, 0x11, 0x45, 0xf1,
	0x2d, 0x05, 0x7f, 0x05, 0x1e, 0xf1, 0x29, 0x15, 0x44, 0xb1, 0x78, 0xec, 0x64, 0x36, 0x55, 0xd0,
	0xd6, 0xc5, 0x6b, 0x94, 0xff, 0x90, 0xfb, 0x8b, 0x91, 0xc3, 0x6b, 0x55, 0xf0, 0x2b, 0x50, 0x59,
	0xe0, 0xed, 0xec, 0xce, 0x1e, 0x66, 0x77, 0xb6, 0x5e, 0x03, 0x4f, 0x32, 0x4b, 0x23, 0x26, 0x22,
	0x16, 0xd3, 0x1e, 0x99, 0x50, 0x0b, 0x24, 0xb1, 0x78, 0x2d, 0x07, 0xdf, 0x80, 0x67, 0xe9, 0xfd,
	0xd2, 0xb0, 0xbf, 0x2e, 0x78, 0x4b, 0x1f, 0x75, 0x3f, 0x39, 0x6a, 0x77, 0x2e, 0x1c, 0x2a, 0xc1,
	0xe2, 0x31, 0xbe, 0x3f, 0x12, 0xfe, 0x18, 0x14, 0xb8, 0x60, 0x63, 0x16, 0x5b, 0xdb, 0xda, 0x63,
	0xa7, 0x9e, 0x16, 0x40, 0x7d, 0xc0, 0x85, 0xc2, 0x29, 0x09, 0x1b, 0x60, 0x2b, 0xa4, 0x52, 0xb1,
	0x58, 0xdf, 0xb3, 0xb5, 0xb3, 0x4e, 0x9b, 0x55, 0xc0, 0xe7, 0x60, 0x47, 0x09, 0x12, 0x4b, 0xa6,
	0x06, 0x9c, 0xc5, 0x4a, 0x5a, 0x65, 0x7b, 0xe3, 0x6e, 0xc8, 0xb2, 0x06, 0x1e, 0x81, 0xbd, 0x90,
	0x4e, 0x89, 0x50, 0x57, 0x82, 0xfa, 0x54, 0x4c, 0x58, 0x4c, 0x22, 0x6b, 0x57, 0x27, 0xe6, 0x2e,
	0x01, 0xab, 0x60, 0x37, 0xb9, 0x94, 0xf7, 0x24, 0x5a, 0x68, 0x4d, 0xad, 0x5d, 0x85, 0x61, 0x0d,
	0x98, 0xe9, 0x42, 0x73, 0x48, 0x5a, 0x7b, 0xf6, 0x46, 0xb5, 0x84, 0xef, 0xe0, 0xf0, 0x37, 0xa0,
	0x7c, 0xce, 0x89, 0x08, 0x59, 0x3c, 0x1e, 0xf0, 0x88, 0x05, 0x1f, 0x2d, 0x68, 0x1b, 0xd5, 0xf2,
	0xc9, 0xe3, 0xc5, 0xce, 0x9b, 0x4b, 0x34, 0x5e, 0x91, 0xc3, 0x26, 0xd8, 0x95, 0x94, 0x28, 0x27,
	0x22, 0x52, 0xa6, 0x0e, 0xfb, 0xda, 0xc1, 0x5a, 0x38, 0x0c, 0x97, 0x79, 0xbc, 0x1a, 0x00, 0x8f,
	0x41, 0x81, 0x44, 0x54, 0x28, 0x69, 0x3d, 0xb2, 0x37, 0xaa, 0xe5, 0x93, 0xca, 0x22, 0x74, 0x56,
	0x4b, 0x48, 0x93, 0x38, 0x15, 0xc1, 0x43, 0xb0, 0x3d, 0x25, 0x52, 0xce, 0x1e, 0x9b, 0x17, 0x5a,
	0x15, 0x9d, 0x86, 0x25, 0x0c, 0x7e, 0x05, 0xf6, 0xc9, 0x95, 0xe2, 0x5e, 0xac, 0x5f, 0x01, 0x51,
	0x14, 0x5d, 0x28, 0x2a, 0xac, 0x4f, 0x6c, 0xa3, 0x9a, 0x6f, 0x96, 0xae, 0x51, 0xe1, 0xc5, 0xe6,
	0xc9, 0x97, 0x5f, 0x7e, 0x81, 0xd7, 0xa9, 0x60, 0x1f, 0x3c, 0x5b, 0x86, 0x1d, 0x12, 0x07, 0x34,
	0x8a, 0x68, 0x38, 0x20, 0x52, 0x52, 0x69, 0x3d, 0xb6, 0x8d, 0x6a, 0x31, 0xb5, 0xf1, 0xf1, 0x99,
	0x8b, 0xef, 0xd7, 0x43, 0x07, 0x98, 0x49, 0x5d, 0x26, 0xa5, 0x72, 0x4a, 0xa5, 0x24, 0x63, 0x2a,
	0x2d, 0x4b, 0x57, 0xc8, 0x6e, 0x52, 0xc4, 0x9d, 0xc1, 0xb0, 0x9b, 0xd2, 0xcd, 0xc2, 0x35, 0xda,
	0xf8, 0x9b, 0x01, 0xf0, 0x9d, 0x00, 0xf8, 0x02, 0x94, 0xcf, 0x29, 0x09, 0x32, 0x16, 0x4f, 0xb4,
	0x05, 0x48, 0x2c, 0x9a, 0x9a, 0x59, 0x44, 0xaf, 0x28, 0xe1, 0x11, 0xd8, 0x0e, 0xe9, 0x05, 0xb9,
	0x8a, 0x54, 0x37, 0x69, 0x80, 0xd6, 0x81, 0x8e, 0xd4, 0xcd, 0x22, 0x01, 0xf0, 0x12, 0x0b, 0x7f,
	0x06, 0x1e, 0x06, 0x97, 0x34, 0x78, 0xe7, 0xc5, 0xd6, 0xa7, 0x5a, 0x78, 0x5b, 0x0d, 0xce, 0x0c,
	0x6f, 0x51, 0x45, 0x58, 0x24, 0xf1, 0x5c, 0x07, 0x7f, 0x00, 0x0a, 0x24, 0x50, 0xec, 0x3d, 0xb5,
	0x9e, 0xae, 0xe6, 0x26, 0x25, 0xa0, 0x0d, 0xb6, 0x2e, 0xa9, 0xe0, 0xfd, 0x8b, 0x0b, 0x2a, 0xbc,
	0xd0, 0x7a, 0xa6, 0x6f, 0x2d, 0x0b, 0xc1, 0x03, 0x50, 0xe4, 0xb3, 0xaf, 0xd2, 0xfa, 0x4c, 0x17,
	0xec, 0xe2, 0xf7, 0x8b, 0xff, 0x18, 0xd7, 0xe8, 0xdf, 0x06, 0xf8, 0x97, 0x51, 0xdb, 0x9b, 0x15,
	0x85, 0x7d, 0xdb, 0x6c, 0x4f, 0xde, 0x22, 0x7b, 0xb6, 0x41, 0xfb, 0x76, 0xb4, 0xd8, 0x82, 0x06,
	0x5c, 0x84, 0x09, 0x12, 0x08, 0x76, 0x4e, 0xa5, 0x3d, 0xe1, 0x52, 0x45, 0x1f, 0x6d, 0x99, 0x74,
	0xef, 0xc0, 0x0e, 0x89, 0x22, 0xf6, 0xd7, 0x4c, 0x5d, 0xda, 0x82, 0x8e, 0x89, 0x08, 0x6d, 0xc5,
	0x6d, 0x32, 0xb7, 0x49, 0xfb, 0x12, 0x8f, 0xeb, 0x37, 0x46, 0xb6, 0x3b, 0xdf, 0x18, 0x4b, 0x1d,
	0xf8, 0xc6, 0x48, 0x3b, 0xc6, 0x8d, 0x91, 0x6d, 0x07, 0x37, 0xc6, 0x7e, 0x9a, 0xcf, 0x41, 0xa6,
	0x26, 0x0f, 0xff, 0x67, 0x80, 0xc7, 0xab, 0x73, 0x02, 0xd3, 0x3f, 0x5d, 0x51, 0xa9, 0x60, 0x6d,
	0xdd, 0xb8, 0xd0, 0x9d, 0x79, 0x23, 0xe9, 0xcc, 0xf7, 0x4e, 0x88, 0x9c, 0x2e, 0xea, 0x75, 0x13,
	0xe2, 0xc5, 0xb7, 0xd7, 0xe8, 0x1b, 0xf0, 0xa1, 0xf6, 0xe4, 0x4e, 0xca, 0xec, 0x74, 0xe1, 0x93,
	0x5f, 0x9f, 0x49, 0x1a, 0xda, 0x17, 0x3a, 0x5f, 0x4a, 0x30, 0xfa, 0x9e, 0xc5, 0x63, 0x3b, 0x9c,
	0x5d, 0xaf, 0xcd, 0x2f, 0x6c, 0x62, 0x27, 0x8d, 0x88, 0x05, 0x57, 0x11, 0x11, 0x77, 0x93, 0x7c,
	0x7f, 0x7a, 0x0e, 0xff, 0x6f, 0x80, 0xf2, 0x72, 0xc5, 0x24, 0x6d, 0x4c, 0xd7, 0x0c, 0x8b, 0xfb,
	0x53, 0x1a, 0xfb, 0x6c, 0x32, 0x3b, 0x6c, 0x1e, 0xaf, 0xc2, 0x49, 0x1b, 0x4b, 0x21, 0x27, 0xe2,
	0x92, 0x6a, 0xa9, 0x3e, 0x2a, 0xbe, 0x83, 0x67, 0x5c, 0xe7, 0x0f, 0x69, 0x36, 0x37, 0xf1, 0x2a,
	0x0c, 0xfb, 0xc0, 0x5a, 0x8c, 0x08, 0x67, 0x25, 0x24, 0xff, 0xfd, 0x73, 0xe5, 0x7b, 0x83, 0xe0,
	0x53, 0x50, 0xa2, 0x31, 0x39, 0x8f, 0x68, 0xaf, 0xed, 0xe8, 0x89, 0x5a, 0xc4, 0xb7, 0x40, 0xed,
	0x1f, 0x06, 0xd8, 0xce, 0x36, 0x31, 0xb8, 0x03, 0x4a, 0xbd, 0xfe, 0x08, 0x75, 0x5d, 0xec, 0x0f,
	0xcd, 0x07, 0xb0, 0x0c, 0x00, 0xea, 0x76, 0xe7, 0xbf, 0x0d, 0x68, 0x81, 0x47, 0x2d, 0x77, 0x80,
	0xb0, 0x7f, 0x86, 0xdd, 0x51, 0x07, 0xf9, 0xee, 0x8c, 0x32, 0x73, 0xcb, 0x8c, 0xef, 0x9d, 0xce,
	0x99, 0x4d, 0xf8, 0x09, 0x80, 0x08, 0x63, 0xef, 0x35, 0xea, 0x66, 0x23, 0x8a, 0x59, 0x3c, 0xa3,
	0x37, 0x13, 0xbc, 0x89, 0x3a, 0x1d, 0xd4, 0x71, 0x47, 0x4d, 0xb7, 0xeb, 0xa7, 0xb8, 0x5d, 0xfb,
	0x2d, 0x28, 0x2f, 0x37, 0x7b, 0x58, 0x04, 0x9b, 0x6f, 0xfb, 0x3d, 0xd7, 0x7c, 0x00, 0x4b, 0x20,
	0xdf, 0xc1, 0xfd, 0xb3, 0x81, 0x69, 0xc0, 0x27, 0xa0, 0xd2, 0xf7, 0x5f, 0xba, 0x78, 0xd4, 0xec,
	0x23, 0xdc, 0xf2, 0x7a, 0x9d, 0xd1, 0xa0, 0xdf, 0xf5, 0x9c, 0x37, 0x66, 0xae, 0xf6, 0x12, 0xec,
	0xae, 0x34, 0xfb, 0x24, 0xd0, 0x41, 0x4d, 0xaf, 0x37, 0xf3, 0x70, 0xba, 0x68, 0x98, 0x1c, 0xb3,
	0x08, 0x36, 0x7d, 0xcf, 0xc5, 0x66, 0x0e, 0x56, 0xc0, 0xde, 0xcc, 0x6d, 0xe8, 0x22, 0x7f, 0xee,
	0xb4, 0x51, 0xfb, 0x1c, 0x94, 0xd0, 0x95, 0xba, 0xe4, 0x82, 0x29, 0xbd, 0x0d, 0x0f, 0xf9, 0xc8,
	0x7c, 0xa0, 0xbf, 0x39, 0xa8, 0x6f, 0x1a, 0xb5, 0xff, 0x1a, 0x00, 0x24, 0xaf, 0xab, 0xcd, 0x68,
	0x14, 0x4a, 0xf8, 0x08, 0x98, 0x03, 0x34, 0x1c, 0x0e, 0xfa, 0xd8, 0x1f, 0xb5, 0x5c, 0x1f, 0x79,
	0xdd, 0xe1, 0x4c, 0x3e, 0x1c, 0xe2, 0x64, 0xc1, 0x0a, 0xd8, 0x1b, 0x24, 0x79, 0xc3, 0xe8, 0xb5,
	0xdb, 0x1d, 0xa1, 0xd6, 0x6b, 0xcf, 0x71, 0xcd, 0x1c, 0x84, 0xa0, 0xec, 0xbc, 0x74, 0x9d, 0x57,
	0x5e, 0x6f, 0x8e, 0x6d, 0xc0, 0x1f, 0x82, 0xcf, 0x87, 0xae, 0x73, 0x86, 0x3d, 0xff, 0xcd, 0x08,
	0xf5, 0x5a, 0x23, 0xef, 0xf4, 0xd4, 0xeb, 0x60, 0xe4, 0x7b, 0xfd, 0x85, 0x68, 0x33, 0x09, 0x9c,
	0xe7, 0x30, 0xc5, 0xf2, 0xc9, 0xd5, 0xb6, 0x51, 0xb2, 0xc8, 0x9b, 0x81, 0x6b, 0x16, 0xe0, 0x3e,
	0xd8, 0x3d, 0x45, 0xf8, 0x95, 0xeb, 0x27, 0x29, 0xea, 0xb7, 0xdb, 0x2e, 0x36, 0x1f, 0xc2, 0xcf,
	0xc0, 0x01, 0x6a, 0xb5, 0xbc, 0xc4, 0x0c, 0x75, 0x47, 0xab, 0x7c, 0x11, 0xee, 0x81, 0x9d, 0x8e,
	0xdb, 0x73, 0x71, 0x72, 0x67, 0x2e, 0x3e, 0x1d, 0x9a, 0xa5, 0xe6, 0x10, 0x3c, 0x66, 0xbc, 0x9e,
	0x4c, 0xb7, 0x77, 0x4c, 0xd5, 0x07, 0xaf, 0x18, 0x4f, 0xc7, 0xa2, 0x7c, 0x7b, 0x24, 0x15, 0x91,
	0x97, 0x0b, 0x2e, 0xe0, 0x93, 0x06, 0xe3, 0x8d, 0x09, 0x0f, 0x69, 0xd4, 0x90, 0xe1, 0xbb, 0xc6,
	0x98, 0x37, 0x6e, 0xff, 0xe3, 0xfe, 0x33, 0x57, 0x1a, 0xbc, 0x4a, 0x23, 0xcf, 0x0b, 0xfa, 0xaf,
	0xeb, 0xf3, 0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x6f, 0x17, 0x54, 0x9e, 0x0b, 0x00, 0x00,
}
