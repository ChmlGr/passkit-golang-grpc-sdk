// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/boarding_pass.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
	cabincodes "stash.passkit.com/io/model/sdk/go/io/flights/cabincodes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Boarding Pass record is unique to an individual passenger journey form a boarding point to a deplaning point. A Carrier and a Flight Designation record must exist. If a Flight record does not already exist, then it will be auto-generated based on the Flight Designation record and other publicly available data.
type BoardingPassRecord struct {
	// Id assigned by PassKit to represent the boarding pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet.  This field is not writable.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PNR code of the carrier operating the flight, independent of code-share, lease or other issues.
	OperatingCarrierPNR string `protobuf:"bytes,2,opt,name=operatingCarrierPNR,proto3" json:"operatingCarrierPNR,omitempty"`
	// Up to three related PNRs can be used to index the record and can be the marketing carrier PNR or a master PNR containing multiple bookings. If required, a related PNR can be followed by the two or three character designator of the carrier or CRS controlling the PNR, separated by an oblique.
	RelatedPNRs []string `protobuf:"bytes,3,rep,name=relatedPNRs,proto3" json:"relatedPNRs,omitempty"`
	// Ticket number can optionally be prefixed by the 3 digit airline code and a dash, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
	TicketNumber string `protobuf:"bytes,4,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	// The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
	TicketLeg int32 `protobuf:"varint,5,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty"`
	// 3 letter IATA code or 4 letter ICAO code of the passenger boarding point. If omitted it will be derived from the flight designation.
	BoardingPoint string `protobuf:"bytes,6,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty"`
	// 3 letter IATA code or 4 letter ICAO code of the passenger deplaning point. If omitted it will be derived from the flight designation.
	DeplaningPoint string `protobuf:"bytes,7,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty"`
	// The two or three character airline code of the marketing carrier.
	CarrierCode string `protobuf:"bytes,8,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	// The flight number of the marketing character (excluding the carrier code).
	FlightNumber string `protobuf:"bytes,9,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	// For direct flights with multiple stopping points, the segment of the flight commencing from the boarding point.  If omitted, will be derived from the boardingPoint. For non-stop flights, this will be 1.
	FlightSegment int32 `protobuf:"varint,10,opt,name=flightSegment,proto3" json:"flightSegment,omitempty"`
	// The date of departure in local airport time.
	FlightDate *io.Date `protobuf:"bytes,11,opt,name=flightDate,proto3" json:"flightDate,omitempty"`
	// Details of the passenger and any infant.
	Passenger *Passenger `protobuf:"bytes,12,opt,name=passenger,proto3" json:"passenger,omitempty"`
	// Free-form text that can be used to describe the ticket class, tier or cabin. E.g. "Business", "Premium Economy", "Club World".
	Class string `protobuf:"bytes,13,opt,name=class,proto3" json:"class,omitempty"`
	// The compartment code / class of the ticket.
	CompartmentCode cabincodes.CompartmentCode `protobuf:"varint,14,opt,name=compartmentCode,proto3,enum=cabin_codes.CompartmentCode" json:"compartmentCode,omitempty"`
	// The allocated seat number.  The text "ANY" or "XXX" can be used where a free seating condition exists.
	SeatNumber string `protobuf:"bytes,15,opt,name=seatNumber,proto3" json:"seatNumber,omitempty"`
	// The check in sequence number.
	SequenceNumber int32 `protobuf:"varint,16,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	// A boarding group or zone indicator. This is displayed on the pass to assist passengers and ground-staff to expedite boarding.
	BoardingGroup string `protobuf:"bytes,17,opt,name=boardingGroup,proto3" json:"boardingGroup,omitempty"`
	// An additional field to indicate boarding priority or order.
	BoardingPosition string `protobuf:"bytes,18,opt,name=boardingPosition,proto3" json:"boardingPosition,omitempty"`
	// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2CP, 20K.
	FreeBaggageAllowance string `protobuf:"bytes,19,opt,name=freeBaggageAllowance,proto3" json:"freeBaggageAllowance,omitempty"`
	// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2CP, 20K.
	CarryOnAllowance string `protobuf:"bytes,20,opt,name=carryOnAllowance,proto3" json:"carryOnAllowance,omitempty"`
	// An array of SSR codes. Codes should be 4 capitalized letters. Codes may be annotated.
	SsrCodes []string `protobuf:"bytes,21,rep,name=ssrCodes,proto3" json:"ssrCodes,omitempty"`
	// Other service information that may be relevant to the booking.
	Osi string `protobuf:"bytes,22,opt,name=osi,proto3" json:"osi,omitempty"`
	// Free text booking remarks.
	Remarks string `protobuf:"bytes,23,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
	PassengerStatus PassengerStatus `protobuf:"varint,24,opt,name=passengerStatus,proto3,enum=flights.PassengerStatus" json:"passengerStatus,omitempty"`
	// Conditional items for the flight segment as described in IATA PSC Resolution 792.
	ConditionalItems *ConditionalItems `protobuf:"bytes,25,opt,name=conditionalItems,proto3" json:"conditionalItems,omitempty"`
	// Payload to be encoded in the pass barcode. If omitted, an IATA BCBP Standard (Resolution 792) barcode will be generated.
	BarcodePayload string `protobuf:"bytes,26,opt,name=barcodePayload,proto3" json:"barcodePayload,omitempty"`
	// Security image should relate to a security image provided in the pass design. If passenger has TSA PreCheck and an image name with `tsa_precheck` is present, it will be used automatically.
	SecurityImage string `protobuf:"bytes,27,opt,name=securityImage,proto3" json:"securityImage,omitempty"`
	// Privilege image should relate to a boarding privilege image provided in the pass design. If the passenger has a frequent flyer tier and an image with a lowercase name of the tier is present, it will be used automatically.
	PrivilegeImage string `protobuf:"bytes,28,opt,name=privilegeImage,proto3" json:"privilegeImage,omitempty"`
	// Footer image is applicable to iOS devices. If not provided and security or privilege images (or their defaults) exist, then a composite will automatically be created. Else if a footer image or an airline alliance images exists in the design, it will be used.
	FooterImage string `protobuf:"bytes,29,opt,name=footerImage,proto3" json:"footerImage,omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designation and flight values.
	LocationMessages []*io.GPSLocation `protobuf:"bytes,30,rep,name=locationMessages,proto3" json:"locationMessages,omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designation and flight values.
	BeaconMessages []*io.Beacon `protobuf:"bytes,31,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty"`
	// A list of links to be appended to the end of each boarding pass.
	Links []*io.Link `protobuf:"bytes,32,rep,name=links,proto3" json:"links,omitempty"`
	// Pass Metadata
	Metadata             *io.Metadata `protobuf:"bytes,33,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BoardingPassRecord) Reset()         { *m = BoardingPassRecord{} }
func (m *BoardingPassRecord) String() string { return proto.CompactTextString(m) }
func (*BoardingPassRecord) ProtoMessage()    {}
func (*BoardingPassRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{0}
}

func (m *BoardingPassRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassRecord.Unmarshal(m, b)
}
func (m *BoardingPassRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassRecord.Marshal(b, m, deterministic)
}
func (m *BoardingPassRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassRecord.Merge(m, src)
}
func (m *BoardingPassRecord) XXX_Size() int {
	return xxx_messageInfo_BoardingPassRecord.Size(m)
}
func (m *BoardingPassRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassRecord proto.InternalMessageInfo

func (m *BoardingPassRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BoardingPassRecord) GetOperatingCarrierPNR() string {
	if m != nil {
		return m.OperatingCarrierPNR
	}
	return ""
}

func (m *BoardingPassRecord) GetRelatedPNRs() []string {
	if m != nil {
		return m.RelatedPNRs
	}
	return nil
}

func (m *BoardingPassRecord) GetTicketNumber() string {
	if m != nil {
		return m.TicketNumber
	}
	return ""
}

func (m *BoardingPassRecord) GetTicketLeg() int32 {
	if m != nil {
		return m.TicketLeg
	}
	return 0
}

func (m *BoardingPassRecord) GetBoardingPoint() string {
	if m != nil {
		return m.BoardingPoint
	}
	return ""
}

func (m *BoardingPassRecord) GetDeplaningPoint() string {
	if m != nil {
		return m.DeplaningPoint
	}
	return ""
}

func (m *BoardingPassRecord) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func (m *BoardingPassRecord) GetFlightNumber() string {
	if m != nil {
		return m.FlightNumber
	}
	return ""
}

func (m *BoardingPassRecord) GetFlightSegment() int32 {
	if m != nil {
		return m.FlightSegment
	}
	return 0
}

func (m *BoardingPassRecord) GetFlightDate() *io.Date {
	if m != nil {
		return m.FlightDate
	}
	return nil
}

func (m *BoardingPassRecord) GetPassenger() *Passenger {
	if m != nil {
		return m.Passenger
	}
	return nil
}

func (m *BoardingPassRecord) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *BoardingPassRecord) GetCompartmentCode() cabincodes.CompartmentCode {
	if m != nil {
		return m.CompartmentCode
	}
	return cabincodes.CompartmentCode_NONE
}

func (m *BoardingPassRecord) GetSeatNumber() string {
	if m != nil {
		return m.SeatNumber
	}
	return ""
}

func (m *BoardingPassRecord) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *BoardingPassRecord) GetBoardingGroup() string {
	if m != nil {
		return m.BoardingGroup
	}
	return ""
}

func (m *BoardingPassRecord) GetBoardingPosition() string {
	if m != nil {
		return m.BoardingPosition
	}
	return ""
}

func (m *BoardingPassRecord) GetFreeBaggageAllowance() string {
	if m != nil {
		return m.FreeBaggageAllowance
	}
	return ""
}

func (m *BoardingPassRecord) GetCarryOnAllowance() string {
	if m != nil {
		return m.CarryOnAllowance
	}
	return ""
}

func (m *BoardingPassRecord) GetSsrCodes() []string {
	if m != nil {
		return m.SsrCodes
	}
	return nil
}

func (m *BoardingPassRecord) GetOsi() string {
	if m != nil {
		return m.Osi
	}
	return ""
}

func (m *BoardingPassRecord) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *BoardingPassRecord) GetPassengerStatus() PassengerStatus {
	if m != nil {
		return m.PassengerStatus
	}
	return PassengerStatus_ISSUED_NOT_CHECKED_IN
}

func (m *BoardingPassRecord) GetConditionalItems() *ConditionalItems {
	if m != nil {
		return m.ConditionalItems
	}
	return nil
}

func (m *BoardingPassRecord) GetBarcodePayload() string {
	if m != nil {
		return m.BarcodePayload
	}
	return ""
}

func (m *BoardingPassRecord) GetSecurityImage() string {
	if m != nil {
		return m.SecurityImage
	}
	return ""
}

func (m *BoardingPassRecord) GetPrivilegeImage() string {
	if m != nil {
		return m.PrivilegeImage
	}
	return ""
}

func (m *BoardingPassRecord) GetFooterImage() string {
	if m != nil {
		return m.FooterImage
	}
	return ""
}

func (m *BoardingPassRecord) GetLocationMessages() []*io.GPSLocation {
	if m != nil {
		return m.LocationMessages
	}
	return nil
}

func (m *BoardingPassRecord) GetBeaconMessages() []*io.Beacon {
	if m != nil {
		return m.BeaconMessages
	}
	return nil
}

func (m *BoardingPassRecord) GetLinks() []*io.Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *BoardingPassRecord) GetMetadata() *io.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Boarding passes are indexed by ticket number and leg or boarding point. Either a journey leg or boarding point is required.
type BoardingPassRecordRequest struct {
	// Ticket number can optionally be prefixed by the 3 digit airline code and a dash, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
	TicketNumber string `protobuf:"bytes,1,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	// Optional. The leg of the ticket. Typically for a return ticket, the outbound leg will be 1 and the return leg will be 2.
	TicketLeg int32 `protobuf:"varint,2,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty"`
	// Optional. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	BoardingPoint        string   `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoardingPassRecordRequest) Reset()         { *m = BoardingPassRecordRequest{} }
func (m *BoardingPassRecordRequest) String() string { return proto.CompactTextString(m) }
func (*BoardingPassRecordRequest) ProtoMessage()    {}
func (*BoardingPassRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{1}
}

func (m *BoardingPassRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassRecordRequest.Unmarshal(m, b)
}
func (m *BoardingPassRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassRecordRequest.Marshal(b, m, deterministic)
}
func (m *BoardingPassRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassRecordRequest.Merge(m, src)
}
func (m *BoardingPassRecordRequest) XXX_Size() int {
	return xxx_messageInfo_BoardingPassRecordRequest.Size(m)
}
func (m *BoardingPassRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassRecordRequest proto.InternalMessageInfo

func (m *BoardingPassRecordRequest) GetTicketNumber() string {
	if m != nil {
		return m.TicketNumber
	}
	return ""
}

func (m *BoardingPassRecordRequest) GetTicketLeg() int32 {
	if m != nil {
		return m.TicketLeg
	}
	return 0
}

func (m *BoardingPassRecordRequest) GetBoardingPoint() string {
	if m != nil {
		return m.BoardingPoint
	}
	return ""
}

// Used to request a digital boarding pass by ticket number and either the boarding point, or journey leg.
type BoardingPassRequest struct {
	// Boarding passes are indexed by ticket number and journey leg or boarding point.
	BoardingPass *BoardingPassRecordRequest `protobuf:"bytes,1,opt,name=boardingPass,proto3" json:"boardingPass,omitempty"`
	// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
	Format               []io.PassBundleFormat `protobuf:"varint,2,rep,packed,name=format,proto3,enum=io.PassBundleFormat" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BoardingPassRequest) Reset()         { *m = BoardingPassRequest{} }
func (m *BoardingPassRequest) String() string { return proto.CompactTextString(m) }
func (*BoardingPassRequest) ProtoMessage()    {}
func (*BoardingPassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{2}
}

func (m *BoardingPassRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassRequest.Unmarshal(m, b)
}
func (m *BoardingPassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassRequest.Marshal(b, m, deterministic)
}
func (m *BoardingPassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassRequest.Merge(m, src)
}
func (m *BoardingPassRequest) XXX_Size() int {
	return xxx_messageInfo_BoardingPassRequest.Size(m)
}
func (m *BoardingPassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassRequest proto.InternalMessageInfo

func (m *BoardingPassRequest) GetBoardingPass() *BoardingPassRecordRequest {
	if m != nil {
		return m.BoardingPass
	}
	return nil
}

func (m *BoardingPassRequest) GetFormat() []io.PassBundleFormat {
	if m != nil {
		return m.Format
	}
	return nil
}

// Used to request a digital boarding pass.
type BoardingPassRequestById struct {
	// The PassKit pass id.
	Id *io.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. If omitted, return the URL to the web pass landing page.
	Format               []io.PassBundleFormat `protobuf:"varint,2,rep,packed,name=format,proto3,enum=io.PassBundleFormat" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BoardingPassRequestById) Reset()         { *m = BoardingPassRequestById{} }
func (m *BoardingPassRequestById) String() string { return proto.CompactTextString(m) }
func (*BoardingPassRequestById) ProtoMessage()    {}
func (*BoardingPassRequestById) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{3}
}

func (m *BoardingPassRequestById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassRequestById.Unmarshal(m, b)
}
func (m *BoardingPassRequestById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassRequestById.Marshal(b, m, deterministic)
}
func (m *BoardingPassRequestById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassRequestById.Merge(m, src)
}
func (m *BoardingPassRequestById) XXX_Size() int {
	return xxx_messageInfo_BoardingPassRequestById.Size(m)
}
func (m *BoardingPassRequestById) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassRequestById.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassRequestById proto.InternalMessageInfo

func (m *BoardingPassRequestById) GetId() *io.Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BoardingPassRequestById) GetFormat() []io.PassBundleFormat {
	if m != nil {
		return m.Format
	}
	return nil
}

// Used to request digital boarding pass(es) by booking number. Either a journey leg or boarding point is required.
type BoardingPassesForBookingRequest struct {
	// The master PNR for the booking.
	Pnr string `protobuf:"bytes,1,opt,name=pnr,proto3" json:"pnr,omitempty"`
	// Optional. The leg of the ticket. Typically for a return ticket, the outbound leg will be 1 and the return leg will be 2.
	TicketLeg int32 `protobuf:"varint,2,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty"`
	// Optional. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	BoardingPoint string `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty"`
	// Optional. If omitted, return the URL to the web pass landing page.
	Format               []io.PassBundleFormat `protobuf:"varint,4,rep,packed,name=format,proto3,enum=io.PassBundleFormat" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BoardingPassesForBookingRequest) Reset()         { *m = BoardingPassesForBookingRequest{} }
func (m *BoardingPassesForBookingRequest) String() string { return proto.CompactTextString(m) }
func (*BoardingPassesForBookingRequest) ProtoMessage()    {}
func (*BoardingPassesForBookingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{4}
}

func (m *BoardingPassesForBookingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassesForBookingRequest.Unmarshal(m, b)
}
func (m *BoardingPassesForBookingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassesForBookingRequest.Marshal(b, m, deterministic)
}
func (m *BoardingPassesForBookingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassesForBookingRequest.Merge(m, src)
}
func (m *BoardingPassesForBookingRequest) XXX_Size() int {
	return xxx_messageInfo_BoardingPassesForBookingRequest.Size(m)
}
func (m *BoardingPassesForBookingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassesForBookingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassesForBookingRequest proto.InternalMessageInfo

func (m *BoardingPassesForBookingRequest) GetPnr() string {
	if m != nil {
		return m.Pnr
	}
	return ""
}

func (m *BoardingPassesForBookingRequest) GetTicketLeg() int32 {
	if m != nil {
		return m.TicketLeg
	}
	return 0
}

func (m *BoardingPassesForBookingRequest) GetBoardingPoint() string {
	if m != nil {
		return m.BoardingPoint
	}
	return ""
}

func (m *BoardingPassesForBookingRequest) GetFormat() []io.PassBundleFormat {
	if m != nil {
		return m.Format
	}
	return nil
}

// Contains an array of digital boarding passes.
type BoardingPassesResponse struct {
	// An array of boarding passes found relating to the PNR.
	BoardingPasses       []*io.PassBundle `protobuf:"bytes,1,rep,name=boardingPasses,proto3" json:"boardingPasses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BoardingPassesResponse) Reset()         { *m = BoardingPassesResponse{} }
func (m *BoardingPassesResponse) String() string { return proto.CompactTextString(m) }
func (*BoardingPassesResponse) ProtoMessage()    {}
func (*BoardingPassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f23b02e0f0e8cc0, []int{5}
}

func (m *BoardingPassesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoardingPassesResponse.Unmarshal(m, b)
}
func (m *BoardingPassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoardingPassesResponse.Marshal(b, m, deterministic)
}
func (m *BoardingPassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoardingPassesResponse.Merge(m, src)
}
func (m *BoardingPassesResponse) XXX_Size() int {
	return xxx_messageInfo_BoardingPassesResponse.Size(m)
}
func (m *BoardingPassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BoardingPassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BoardingPassesResponse proto.InternalMessageInfo

func (m *BoardingPassesResponse) GetBoardingPasses() []*io.PassBundle {
	if m != nil {
		return m.BoardingPasses
	}
	return nil
}

func init() {
	proto.RegisterType((*BoardingPassRecord)(nil), "flights.BoardingPassRecord")
	proto.RegisterType((*BoardingPassRecordRequest)(nil), "flights.BoardingPassRecordRequest")
	proto.RegisterType((*BoardingPassRequest)(nil), "flights.BoardingPassRequest")
	proto.RegisterType((*BoardingPassRequestById)(nil), "flights.BoardingPassRequestById")
	proto.RegisterType((*BoardingPassesForBookingRequest)(nil), "flights.BoardingPassesForBookingRequest")
	proto.RegisterType((*BoardingPassesResponse)(nil), "flights.BoardingPassesResponse")
}

func init() { proto.RegisterFile("io/flights/boarding_pass.proto", fileDescriptor_5f23b02e0f0e8cc0) }

var fileDescriptor_5f23b02e0f0e8cc0 = []byte{
	// 1539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x2f, 0xa5, 0xb5, 0x63, 0x8f, 0x1c, 0xd9, 0x9d, 0x38, 0x31, 0xed, 0xcd, 0xee, 0xce, 0x1a,
	0xee, 0x42, 0x31, 0x64, 0x29, 0x95, 0xb7, 0xff, 0x16, 0x05, 0x02, 0xc9, 0x5b, 0x07, 0xc6, 0x66,
	0x5d, 0x81, 0xbe, 0xed, 0x36, 0x31, 0x46, 0xe4, 0x33, 0x3d, 0x31, 0x39, 0xc3, 0xcc, 0x0c, 0x63,
	0x0b, 0x81, 0x81, 0x9e, 0xdd, 0x9b, 0x2e, 0xbd, 0x16, 0x05, 0x0a, 0x14, 0xfd, 0x06, 0xbd, 0xf4,
	0xd0, 0x8f, 0xa0, 0x63, 0x81, 0x1e, 0x7a, 0xe8, 0xbd, 0x1f, 0xa1, 0x98, 0x21, 0x25, 0x91, 0xb2,
	0x03, 0x34, 0x40, 0x7d, 0x31, 0xe7, 0xfd, 0x7e, 0x6f, 0xde, 0xe3, 0x7b, 0x9c, 0xf7, 0x1b, 0xa1,
	0x4f, 0x99, 0x68, 0x9f, 0x45, 0x2c, 0x3c, 0xd7, 0xaa, 0x3d, 0x10, 0x54, 0x06, 0x8c, 0x87, 0xa7,
	0x09, 0x55, 0xaa, 0x95, 0x48, 0xa1, 0x05, 0xbe, 0x97, 0x83, 0x5b, 0x5b, 0x05, 0xa2, 0xc1, 0x81,
	0x87, 0x20, 0x33, 0xd2, 0x96, 0x5b, 0xdc, 0x84, 0x4a, 0x5f, 0x04, 0x90, 0x23, 0x8d, 0x02, 0xe2,
	0xd3, 0x01, 0xe3, 0xa7, 0x06, 0x2c, 0x3d, 0xe7, 0xcc, 0x8f, 0x99, 0x68, 0xd3, 0x84, 0xb5, 0x7d,
	0x11, 0xc7, 0x82, 0x9f, 0x8a, 0xc1, 0x6b, 0xf0, 0xf5, 0x04, 0xdc, 0x64, 0x22, 0x07, 0xda, 0x89,
	0x14, 0x57, 0x2c, 0x66, 0x7a, 0x98, 0x43, 0x0f, 0x67, 0x50, 0xc4, 0xf8, 0xc5, 0xc4, 0x63, 0x63,
	0x66, 0x8e, 0x41, 0x4b, 0xe6, 0x4f, 0x80, 0xa6, 0xfd, 0xe7, 0xef, 0x85, 0xc0, 0xf7, 0xd4, 0x25,
	0x0d, 0x43, 0x90, 0x6d, 0x91, 0x68, 0x26, 0xb8, 0x6a, 0x53, 0xce, 0x85, 0xa6, 0xf6, 0x39, 0x63,
	0x6f, 0xff, 0x19, 0x23, 0xdc, 0xcb, 0xcb, 0xd2, 0xa7, 0x4a, 0x79, 0xe0, 0x0b, 0x19, 0xe0, 0x3a,
	0xaa, 0xb0, 0xc0, 0x75, 0x88, 0xd3, 0x58, 0xf6, 0x2a, 0x2c, 0xc0, 0xcf, 0xd1, 0x03, 0x91, 0x80,
	0xa4, 0x9a, 0xf1, 0xf0, 0x80, 0x4a, 0xc9, 0x40, 0xf6, 0x8f, 0x3d, 0xb7, 0x62, 0x08, 0xbd, 0x87,
	0xa3, 0x2e, 0xbe, 0x71, 0x56, 0x5f, 0x7d, 0xdf, 0xdd, 0xfb, 0xee, 0xe9, 0xde, 0x2f, 0x5e, 0xbe,
	0xfb, 0x49, 0xf3, 0x67, 0xd7, 0x3b, 0xde, 0x5d, 0x1e, 0xf8, 0xdf, 0x15, 0x54, 0x93, 0x10, 0x51,
	0x0d, 0x41, 0xff, 0xd8, 0x53, 0x6e, 0x95, 0x54, 0x1b, 0xcb, 0xbd, 0xbf, 0x57, 0x46, 0xdd, 0xbf,
	0x55, 0x3a, 0xbf, 0xaf, 0x78, 0x19, 0x44, 0x0c, 0x46, 0x7c, 0xca, 0xc9, 0x00, 0x48, 0xaa, 0x20,
	0x20, 0x5a, 0x10, 0xc6, 0x03, 0xb8, 0x22, 0xfa, 0x1c, 0x88, 0xb4, 0x49, 0x12, 0xca, 0x83, 0x09,
	0xc7, 0x58, 0x63, 0x2a, 0x2f, 0xc0, 0x84, 0x23, 0x7e, 0x16, 0xcf, 0xec, 0x42, 0x84, 0x24, 0x94,
	0xc4, 0x54, 0xe9, 0x7c, 0xed, 0x0b, 0xae, 0x29, 0xe3, 0x86, 0x16, 0xa7, 0x91, 0x66, 0x49, 0x04,
	0x64, 0x20, 0xc4, 0x05, 0xe3, 0xa1, 0x6a, 0x91, 0xa3, 0x33, 0x22, 0xe1, 0x4d, 0xca, 0x24, 0x04,
	0x4d, 0x42, 0x89, 0x9c, 0xa5, 0x33, 0x89, 0x74, 0x26, 0xa2, 0x48, 0x5c, 0x42, 0x40, 0x06, 0x43,
	0x1b, 0x55, 0x5f, 0x0a, 0x13, 0x43, 0x9f, 0x4b, 0x00, 0xe2, 0x9f, 0x53, 0x49, 0x7d, 0x13, 0x2a,
	0x00, 0xc5, 0x42, 0x4e, 0xb5, 0x90, 0x44, 0x9c, 0x59, 0xe2, 0x24, 0x29, 0x21, 0xc9, 0x81, 0x77,
	0x62, 0xf3, 0x90, 0x22, 0x8a, 0x4c, 0x22, 0x06, 0xee, 0x1f, 0x7b, 0x4d, 0xa2, 0x20, 0xa1, 0xd2,
	0x46, 0x1c, 0x0c, 0x09, 0xe5, 0x44, 0x0c, 0x22, 0xf6, 0x26, 0x85, 0xd6, 0x8d, 0xf3, 0x79, 0xb9,
	0xba, 0x8d, 0xdf, 0xb4, 0xa7, 0xeb, 0x4e, 0x73, 0xff, 0xfa, 0xc9, 0xb3, 0x1d, 0xaf, 0x58, 0x57,
	0xdc, 0x45, 0x2b, 0x9a, 0xf9, 0x17, 0xa0, 0x8f, 0xd3, 0x78, 0x00, 0xd2, 0xfd, 0xc8, 0x76, 0xea,
	0x93, 0x51, 0x77, 0xeb, 0xc6, 0xd9, 0x78, 0xd5, 0xf8, 0xde, 0x7a, 0xee, 0x5f, 0xef, 0x3d, 0x79,
	0x96, 0x3d, 0xfe, 0xf8, 0xe9, 0xf5, 0x8e, 0x57, 0x72, 0xc1, 0xbb, 0x68, 0x39, 0x5b, 0xbf, 0x80,
	0xd0, 0x5d, 0x20, 0x4e, 0x63, 0xa1, 0xb7, 0x32, 0xea, 0x2e, 0xb3, 0x1f, 0xd8, 0xbf, 0xff, 0x3c,
	0xf3, 0x66, 0x30, 0xfe, 0x39, 0xba, 0x3f, 0x39, 0x5c, 0x7d, 0xc1, 0xb8, 0x76, 0x17, 0x6d, 0x3c,
	0x3c, 0xea, 0xae, 0xde, 0x38, 0x2b, 0x36, 0xf7, 0x97, 0xef, 0xf6, 0x9b, 0x5f, 0x5e, 0xef, 0x78,
	0x65, 0x22, 0xfe, 0x0a, 0xd5, 0x03, 0x48, 0x22, 0xca, 0xa7, 0xae, 0xf7, 0xde, 0xeb, 0x3a, 0xc7,
	0xc4, 0xbb, 0xa8, 0x96, 0x57, 0xf5, 0x40, 0x04, 0xe0, 0x2e, 0x59, 0xc7, 0xa5, 0x51, 0x77, 0xe1,
	0xaa, 0xfa, 0x5b, 0xa7, 0xe2, 0x15, 0x41, 0xfc, 0x04, 0xad, 0x64, 0xe7, 0x34, 0x2f, 0xc8, 0xb2,
	0x25, 0x2f, 0x8c, 0xba, 0x95, 0xab, 0x05, 0xaf, 0x04, 0xe1, 0x1d, 0x74, 0x3f, 0x5b, 0x9f, 0x40,
	0x18, 0x03, 0xd7, 0x2e, 0x32, 0x2f, 0xef, 0x95, 0x8d, 0xb8, 0x81, 0x50, 0x66, 0xf8, 0x9a, 0x6a,
	0x70, 0x6b, 0xc4, 0x69, 0xd4, 0x3a, 0x4b, 0x2d, 0x26, 0x5a, 0x66, 0xed, 0x15, 0x30, 0xfc, 0x14,
	0x2d, 0x4f, 0x07, 0x8a, 0xbb, 0x62, 0x89, 0xb8, 0x95, 0x0f, 0x8d, 0x56, 0x7f, 0x82, 0x78, 0x33,
	0x12, 0x5e, 0x47, 0x0b, 0x7e, 0x44, 0x95, 0x72, 0xef, 0xdb, 0x13, 0x98, 0x2d, 0xf0, 0x21, 0x5a,
	0xf5, 0x45, 0x9c, 0x50, 0xa9, 0x4d, 0x02, 0xf6, 0x95, 0xeb, 0xc4, 0x69, 0xd4, 0x3b, 0x8f, 0x5b,
	0xc5, 0x71, 0x73, 0x50, 0xe6, 0x78, 0xf3, 0x4e, 0xf8, 0x47, 0x08, 0x29, 0xa0, 0x93, 0x42, 0xac,
	0x16, 0x0b, 0x51, 0x00, 0xf0, 0x17, 0xa8, 0xae, 0xe0, 0x4d, 0x0a, 0xdc, 0x87, 0x9c, 0xba, 0x66,
	0xeb, 0x30, 0x67, 0x35, 0xe5, 0x9a, 0xb4, 0xf4, 0xb9, 0x14, 0x69, 0xe2, 0xfe, 0xd0, 0x26, 0x5d,
	0x36, 0xe2, 0x5d, 0xb4, 0x36, 0x6b, 0xbc, 0x62, 0x66, 0x06, 0xb9, 0xd8, 0x12, 0x6f, 0xd9, 0xf1,
	0x2f, 0xd1, 0xfa, 0x99, 0x04, 0xe8, 0xd1, 0x30, 0xa4, 0x21, 0x74, 0xcd, 0x81, 0xa3, 0xdc, 0x07,
	0xf7, 0x41, 0xa9, 0xc1, 0x55, 0xef, 0x4e, 0x16, 0xfe, 0x12, 0xad, 0x99, 0xc6, 0x0f, 0x7f, 0xcd,
	0x67, 0x9e, 0xeb, 0x73, 0x9e, 0xb7, 0x18, 0x78, 0x0b, 0x2d, 0x29, 0x65, 0x3f, 0x15, 0xe5, 0x3e,
	0x34, 0x43, 0xc9, 0x9b, 0xae, 0xf1, 0x1a, 0xaa, 0x0a, 0xc5, 0xdc, 0x47, 0x36, 0x5d, 0xf3, 0x88,
	0x5d, 0x74, 0x4f, 0x82, 0x19, 0x38, 0xca, 0xdd, 0xb0, 0xd6, 0xc9, 0x12, 0xf7, 0xd0, 0xea, 0xb4,
	0x8f, 0x27, 0x9a, 0xea, 0x54, 0xb9, 0xae, 0x6d, 0x92, 0x7b, 0xbb, 0xe5, 0x19, 0xee, 0xcd, 0x3b,
	0xe0, 0x5f, 0xa1, 0x35, 0x5f, 0xf0, 0xc0, 0x16, 0x83, 0x46, 0x47, 0x1a, 0x62, 0xe5, 0x6e, 0xda,
	0xef, 0x66, 0x73, 0xba, 0xc9, 0xc1, 0x1c, 0xc1, 0xbb, 0xe5, 0x62, 0x1a, 0x98, 0x8b, 0x55, 0x9f,
	0x0e, 0x23, 0x41, 0x03, 0x77, 0xcb, 0xe6, 0x3a, 0x67, 0x35, 0x0d, 0x54, 0xe0, 0xa7, 0x92, 0xe9,
	0xe1, 0x51, 0x4c, 0x43, 0x70, 0x3f, 0xce, 0x1a, 0x58, 0x32, 0x9a, 0xdd, 0x12, 0xc9, 0xde, 0xb2,
	0x08, 0x42, 0xc8, 0x68, 0x8f, 0xb3, 0xdd, 0xca, 0x56, 0x4c, 0x50, 0xed, 0x4c, 0x08, 0x0d, 0x32,
	0x23, 0x7d, 0x62, 0x49, 0x45, 0x13, 0x3e, 0x40, 0x6b, 0x91, 0xf0, 0xad, 0x0c, 0x7d, 0x0b, 0x4a,
	0xd1, 0x10, 0x94, 0xfb, 0x29, 0xa9, 0x36, 0x6a, 0x9d, 0x55, 0x73, 0x7e, 0x9e, 0xf7, 0x4f, 0x5e,
	0xe4, 0x70, 0x6f, 0x71, 0xd4, 0xad, 0xfe, 0xc1, 0x41, 0xde, 0x2d, 0x07, 0x33, 0x37, 0x06, 0x40,
	0xfd, 0xc2, 0x16, 0x9f, 0xd9, 0x2d, 0x90, 0xd9, 0xa2, 0x67, 0x91, 0xa9, 0xf7, 0x1c, 0x13, 0x7f,
	0x81, 0x16, 0xac, 0x94, 0xba, 0xc4, 0xba, 0xd8, 0x53, 0xfb, 0x82, 0xf1, 0x8b, 0xa9, 0x43, 0x06,
	0xe3, 0x06, 0x5a, 0x8a, 0x41, 0xd3, 0x80, 0x6a, 0xea, 0x7e, 0x6e, 0xeb, 0xbf, 0x62, 0xa8, 0xdf,
	0xe6, 0x36, 0x6f, 0x8a, 0x7e, 0xf5, 0xaf, 0xea, 0xa8, 0xfb, 0xcf, 0x2a, 0xfa, 0x47, 0x75, 0x77,
	0x7d, 0xa2, 0xa6, 0xc4, 0xb4, 0x99, 0x64, 0x7a, 0xda, 0xf9, 0x6b, 0xa5, 0x4b, 0xca, 0x40, 0xae,
	0x61, 0x4c, 0x91, 0x94, 0x9b, 0x19, 0x6f, 0x14, 0x8e, 0x72, 0x23, 0x72, 0xec, 0x2d, 0x0b, 0x52,
	0x1a, 0x91, 0xe9, 0x57, 0x41, 0x5e, 0x8b, 0x54, 0x72, 0x18, 0x92, 0x33, 0x21, 0x63, 0x42, 0xc9,
	0xe4, 0xbc, 0x90, 0xc4, 0x4c, 0x41, 0xeb, 0x48, 0xa6, 0x93, 0x31, 0x33, 0xb6, 0x48, 0x97, 0xe4,
	0xaa, 0x6b, 0x65, 0x92, 0x92, 0x43, 0xfb, 0xdd, 0x90, 0xaf, 0x73, 0x5d, 0x62, 0x82, 0x4f, 0x52,
	0x88, 0x53, 0xa5, 0x09, 0x5c, 0x31, 0xa5, 0xad, 0xfe, 0x4d, 0xa9, 0x39, 0x1c, 0x08, 0x50, 0x84,
	0x0b, 0x4d, 0x68, 0x24, 0x81, 0x06, 0xc3, 0x8c, 0xda, 0x34, 0xa2, 0xc5, 0x09, 0xd3, 0xe4, 0x92,
	0x45, 0x91, 0x11, 0x46, 0x9a, 0x6a, 0x61, 0x2e, 0x1d, 0x90, 0x0b, 0x18, 0x35, 0xb2, 0x2d, 0xb8,
	0x15, 0xb7, 0xf7, 0x07, 0x37, 0xc9, 0x09, 0x7d, 0x0e, 0x92, 0x24, 0xe9, 0x20, 0x62, 0x7e, 0x34,
	0x24, 0xf4, 0x2d, 0x65, 0x11, 0x1d, 0x44, 0x40, 0x4c, 0x69, 0x5b, 0x63, 0xe7, 0xae, 0x8b, 0xc4,
	0xd8, 0x29, 0x89, 0xd5, 0xd8, 0x99, 0x89, 0xd1, 0xd8, 0x29, 0x8d, 0xf3, 0xb1, 0x53, 0x98, 0xc5,
	0x63, 0x67, 0x36, 0x65, 0xc7, 0x4e, 0x59, 0x8a, 0xc6, 0xce, 0x9c, 0xbe, 0x8c, 0x9d, 0xa2, 0x82,
	0x6c, 0xff, 0xd1, 0x41, 0x9b, 0xb7, 0xaf, 0x4a, 0x9e, 0x19, 0x86, 0x4a, 0xdf, 0x12, 0x5c, 0xe7,
	0xc3, 0x05, 0xf7, 0x71, 0x51, 0x70, 0x2b, 0x76, 0xd6, 0x16, 0x24, 0x76, 0x67, 0x5e, 0x62, 0xab,
	0xe5, 0x31, 0x6b, 0x8d, 0xdb, 0xbf, 0x73, 0xd0, 0x83, 0x72, 0x92, 0x59, 0x7a, 0x87, 0x68, 0x65,
	0x50, 0x30, 0xdb, 0xf4, 0x6a, 0x9d, 0xed, 0xe9, 0x38, 0x79, 0xef, 0x8b, 0x79, 0x25, 0x3f, 0xdc,
	0x44, 0x8b, 0xe6, 0x2b, 0xa4, 0xda, 0xad, 0x90, 0x6a, 0xa3, 0xde, 0x59, 0x37, 0x07, 0xc2, 0x20,
	0xbd, 0x94, 0x07, 0x11, 0x1c, 0x5a, 0xcc, 0xcb, 0x39, 0xdb, 0xa7, 0x68, 0xe3, 0x8e, 0x64, 0x7a,
	0xc3, 0xa3, 0x00, 0x3f, 0x9a, 0xde, 0x30, 0x6b, 0x9d, 0x45, 0xb3, 0xc9, 0x51, 0x60, 0x6f, 0x9a,
	0x1f, 0x16, 0xe0, 0x4f, 0x0e, 0xfa, 0xac, 0x18, 0x01, 0xd4, 0xa1, 0x90, 0xbd, 0xec, 0x3a, 0x37,
	0x79, 0xf5, 0x35, 0x54, 0x4d, 0x78, 0xde, 0x10, 0xcf, 0x3c, 0xfe, 0x3f, 0x0a, 0x5d, 0xc8, 0xf3,
	0xa3, 0xff, 0x21, 0xcf, 0x3e, 0x7a, 0x54, 0x4e, 0xd3, 0x03, 0x95, 0x08, 0xae, 0x00, 0xff, 0x14,
	0xd5, 0x07, 0x25, 0xc4, 0x75, 0xec, 0x50, 0xaa, 0x97, 0xf7, 0xf3, 0xe6, 0x58, 0xbd, 0x13, 0xb4,
	0xc1, 0x44, 0xcb, 0x7c, 0xcc, 0x17, 0x4c, 0xb7, 0xfa, 0xdf, 0x30, 0xd1, 0xca, 0x4e, 0x99, 0xfa,
	0xae, 0xa9, 0x34, 0x55, 0xe7, 0x53, 0xcc, 0x17, 0x71, 0x9b, 0x89, 0x76, 0x2c, 0x02, 0x88, 0xda,
	0x2a, 0xb8, 0x68, 0x87, 0xa2, 0x3d, 0xfb, 0xd5, 0xf2, 0x97, 0xca, 0x72, 0xff, 0x9b, 0xdc, 0x73,
	0xb0, 0x68, 0x7f, 0x14, 0xec, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xae, 0x9c, 0x16, 0x7d, 0x35,
	0x0d, 0x00, 0x00,
}
