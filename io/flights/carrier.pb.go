// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/flights/carrier.proto

package flights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A carrier record contains details of the carrier.  The carrier will be the issuer of the boarding pass and may be used as a marketing or operating carrier.
type Carrier struct {
	// The IATA carrier code. If the carrier has not been issued an IATA carrier code or an ICAO carrier code, use YY.
	// @tag: validateGeneric:"required_without=IcaoCarrierCode,fixedLenAlphaNum=2"
	IataCarrierCode string `protobuf:"bytes,1,opt,name=iataCarrierCode,proto3" json:"iataCarrierCode,omitempty" validateGeneric:"required_without=IcaoCarrierCode,fixedLenAlphaNum=2"`
	// The ICAO carrier code. Required if an iataCarrierCode is not provided.
	// @tag: validateGeneric:"required_without=IataCarrierCode,fixedLenAlphaNum=3|isdefault"
	IcaoCarrierCode string `protobuf:"bytes,2,opt,name=icaoCarrierCode,proto3" json:"icaoCarrierCode,omitempty" validateGeneric:"required_without=IataCarrierCode,fixedLenAlphaNum=3|isdefault"`
	// The IATA accounting code / AWB prefix.  If no code has been allocated, enter zero.
	// @tag: validateGeneric:"numeric,max=999"
	IataAccountingCode int32 `protobuf:"varint,3,opt,name=iataAccountingCode,proto3" json:"iataAccountingCode,omitempty" validateGeneric:"numeric,max=999"`
	// The name of the airline. This will be printed below the logo on the Google Pay pass.
	// @tag: validateGeneric:"required"
	AirlineName string `protobuf:"bytes,4,opt,name=airlineName,proto3" json:"airlineName,omitempty" validateGeneric:"required"`
	// The localized airline name, if applicable.
	LocalizedAirlineName *io.LocalizedString `protobuf:"bytes,5,opt,name=localizedAirlineName,proto3" json:"localizedAirlineName,omitempty"`
	// If the carrier will issue Apple Wallet passes, supply the certificate id (E.g. pass.com.passkitair). The certificate must have previously been uploaded.
	// @tag: validateGeneric:"required"
	PassTypeIdentifier string `protobuf:"bytes,6,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty" validateGeneric:"required"`
	// If PassKit are generating the boarding pass barcode, and the barcode needs signing, the ID of the private key used to sign the barcode payload.
	PrivateKeyId         string   `protobuf:"bytes,7,opt,name=privateKeyId,proto3" json:"privateKeyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Carrier) Reset()         { *m = Carrier{} }
func (m *Carrier) String() string { return proto.CompactTextString(m) }
func (*Carrier) ProtoMessage()    {}
func (*Carrier) Descriptor() ([]byte, []int) {
	return fileDescriptor_72b8f33b242f205b, []int{0}
}

func (m *Carrier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Carrier.Unmarshal(m, b)
}
func (m *Carrier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Carrier.Marshal(b, m, deterministic)
}
func (m *Carrier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Carrier.Merge(m, src)
}
func (m *Carrier) XXX_Size() int {
	return xxx_messageInfo_Carrier.Size(m)
}
func (m *Carrier) XXX_DiscardUnknown() {
	xxx_messageInfo_Carrier.DiscardUnknown(m)
}

var xxx_messageInfo_Carrier proto.InternalMessageInfo

func (m *Carrier) GetIataCarrierCode() string {
	if m != nil {
		return m.IataCarrierCode
	}
	return ""
}

func (m *Carrier) GetIcaoCarrierCode() string {
	if m != nil {
		return m.IcaoCarrierCode
	}
	return ""
}

func (m *Carrier) GetIataAccountingCode() int32 {
	if m != nil {
		return m.IataAccountingCode
	}
	return 0
}

func (m *Carrier) GetAirlineName() string {
	if m != nil {
		return m.AirlineName
	}
	return ""
}

func (m *Carrier) GetLocalizedAirlineName() *io.LocalizedString {
	if m != nil {
		return m.LocalizedAirlineName
	}
	return nil
}

func (m *Carrier) GetPassTypeIdentifier() string {
	if m != nil {
		return m.PassTypeIdentifier
	}
	return ""
}

func (m *Carrier) GetPrivateKeyId() string {
	if m != nil {
		return m.PrivateKeyId
	}
	return ""
}

// CarrierCode is used for retrieving or deleting a port record.
type CarrierCode struct {
	// The IATA or ICAO carrier code.
	CarrierCode          string   `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CarrierCode) Reset()         { *m = CarrierCode{} }
func (m *CarrierCode) String() string { return proto.CompactTextString(m) }
func (*CarrierCode) ProtoMessage()    {}
func (*CarrierCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_72b8f33b242f205b, []int{1}
}

func (m *CarrierCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CarrierCode.Unmarshal(m, b)
}
func (m *CarrierCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CarrierCode.Marshal(b, m, deterministic)
}
func (m *CarrierCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarrierCode.Merge(m, src)
}
func (m *CarrierCode) XXX_Size() int {
	return xxx_messageInfo_CarrierCode.Size(m)
}
func (m *CarrierCode) XXX_DiscardUnknown() {
	xxx_messageInfo_CarrierCode.DiscardUnknown(m)
}

var xxx_messageInfo_CarrierCode proto.InternalMessageInfo

func (m *CarrierCode) GetCarrierCode() string {
	if m != nil {
		return m.CarrierCode
	}
	return ""
}

func init() {
	proto.RegisterType((*Carrier)(nil), "flights.Carrier")
	proto.RegisterType((*CarrierCode)(nil), "flights.CarrierCode")
}

func init() {
	proto.RegisterFile("io/flights/carrier.proto", fileDescriptor_72b8f33b242f205b)
}

var fileDescriptor_72b8f33b242f205b = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6b, 0x13, 0x51,
	0x10, 0xc7, 0xdd, 0x68, 0x5b, 0xfa, 0x52, 0x51, 0xb6, 0x82, 0xa1, 0x78, 0x18, 0x8a, 0x87, 0x22,
	0xcd, 0x3e, 0x69, 0x2f, 0x2a, 0x0a, 0x6e, 0x03, 0x4a, 0x89, 0x48, 0x49, 0x7b, 0xb1, 0xa2, 0xf0,
	0xb2, 0x3b, 0xd9, 0x0c, 0xd9, 0x7d, 0xb3, 0xbe, 0xf7, 0x62, 0x89, 0xe2, 0x3f, 0xe0, 0x45, 0xc8,
	0x59, 0xf0, 0xe0, 0xad, 0x7f, 0x4e, 0xae, 0xfe, 0x33, 0xb2, 0x9b, 0xc4, 0x6c, 0x62, 0xf6, 0xb2,
	0xcc, 0xcc, 0xe7, 0x3b, 0xb3, 0x3b, 0x3f, 0x44, 0x83, 0x58, 0xf6, 0x52, 0x4a, 0xfa, 0xce, 0xca,
	0x48, 0x19, 0x43, 0x68, 0x82, 0xdc, 0xb0, 0x63, 0x7f, 0x6b, 0xe6, 0xde, 0x7b, 0x40, 0x2c, 0x23,
	0xce, 0x32, 0xd6, 0x32, 0xe5, 0x48, 0xa5, 0xf4, 0x45, 0x39, 0x62, 0x3d, 0xc5, 0xf6, 0x0e, 0xcb,
	0x57, 0xd4, 0x4c, 0x50, 0x37, 0xed, 0x95, 0x4a, 0x12, 0x34, 0x92, 0xf3, 0x02, 0xb0, 0x52, 0x69,
	0xcd, 0xae, 0x84, 0xed, 0x94, 0xde, 0xbf, 0xde, 0x10, 0x5b, 0xad, 0x69, 0x19, 0xff, 0x85, 0xb8,
	0x43, 0xca, 0xa9, 0x99, 0xd9, 0xe2, 0x18, 0x1b, 0x1e, 0x78, 0x07, 0xdb, 0x27, 0xbb, 0xe3, 0xf0,
	0xee, 0x77, 0xef, 0xf6, 0xc7, 0xf7, 0x61, 0xf3, 0xf2, 0x71, 0xf3, 0xe9, 0x87, 0xaf, 0x47, 0xdf,
	0x1e, 0x76, 0x56, 0xd9, 0x52, 0x1e, 0x29, 0xae, 0xca, 0x6b, 0xeb, 0xe5, 0xc7, 0xa5, 0x7c, 0x99,
	0xf5, 0x9f, 0x0b, 0xbf, 0xc8, 0x18, 0x46, 0x11, 0x0f, 0xb5, 0x23, 0x9d, 0x94, 0x19, 0x6e, 0x82,
	0x77, 0xb0, 0x71, 0xb2, 0x33, 0x0e, 0xb7, 0xdf, 0xdd, 0x28, 0x9e, 0x27, 0x3f, 0x5e, 0x76, 0xd6,
	0x70, 0x3e, 0x88, 0xba, 0x22, 0x93, 0x92, 0xc6, 0xb7, 0x2a, 0xc3, 0xc6, 0xad, 0xa2, 0x70, 0xa7,
	0xea, 0xf2, 0x5f, 0x8b, 0x7b, 0xb3, 0x6e, 0x61, 0x1c, 0x56, 0xd0, 0x0d, 0xf0, 0x0e, 0xea, 0x47,
	0xbb, 0x01, 0x71, 0xf0, 0x66, 0x1e, 0x3f, 0x77, 0x86, 0x74, 0xd2, 0x59, 0x2b, 0xf0, 0x03, 0xe1,
	0xe7, 0xca, 0xda, 0x8b, 0x51, 0x8e, 0xa7, 0x31, 0x6a, 0x47, 0x3d, 0x42, 0xd3, 0xd8, 0x2c, 0x2b,
	0xae, 0x89, 0xf8, 0xfb, 0x62, 0x27, 0x37, 0xf4, 0x59, 0x39, 0x6c, 0xe3, 0xe8, 0x34, 0x6e, 0x6c,
	0x95, 0xe4, 0x92, 0xef, 0xd9, 0xef, 0xda, 0x38, 0xfc, 0x55, 0x13, 0x3f, 0x6b, 0x8f, 0xe6, 0xd3,
	0x38, 0xfa, 0xe3, 0x85, 0x30, 0x5b, 0x00, 0x30, 0x18, 0xb1, 0x89, 0x21, 0x62, 0xed, 0x14, 0x69,
	0x0b, 0x31, 0x3a, 0x45, 0xa9, 0x05, 0xee, 0x81, 0xeb, 0xe3, 0x1c, 0x0b, 0x00, 0x2e, 0x16, 0x16,
	0x5c, 0x51, 0x9a, 0x42, 0x17, 0x4b, 0x82, 0xac, 0x1d, 0xa2, 0x99, 0xf3, 0x5d, 0x56, 0x26, 0x26,
	0x9d, 0x40, 0xf1, 0xb5, 0xa0, 0x74, 0x0c, 0x99, 0x1a, 0x15, 0xe8, 0xd0, 0x62, 0x0c, 0xca, 0x82,
	0x82, 0x4c, 0x99, 0x01, 0x16, 0xdd, 0x05, 0x36, 0xc0, 0x39, 0x1a, 0x55, 0x1a, 0x8b, 0x4a, 0x61,
	0x9a, 0x56, 0xa0, 0x22, 0xc7, 0x7f, 0x94, 0x05, 0x83, 0x9f, 0x86, 0x64, 0x10, 0x14, 0xb4, 0x96,
	0xfe, 0x24, 0x98, 0x78, 0xab, 0xeb, 0x33, 0xf1, 0xaa, 0xd3, 0x9a, 0x78, 0x6b, 0x3a, 0xb9, 0x2f,
	0x45, 0xbd, 0xba, 0x31, 0x20, 0xea, 0xd1, 0xea, 0xae, 0x76, 0xaa, 0xae, 0x93, 0x73, 0x71, 0x9f,
	0x38, 0x28, 0x32, 0x0d, 0xc8, 0x05, 0x67, 0x6d, 0xe2, 0xe0, 0xd5, 0xf4, 0x88, 0x2e, 0x0f, 0xad,
	0x53, 0xb6, 0xff, 0x2f, 0x16, 0x71, 0x26, 0x89, 0x65, 0xc6, 0x31, 0xa6, 0xd2, 0xc6, 0x03, 0x99,
	0xb0, 0x5c, 0x5c, 0xe2, 0x75, 0x6d, 0xfb, 0xac, 0x3d, 0x53, 0x76, 0x37, 0xcb, 0xcb, 0x39, 0xfe,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x0a, 0x16, 0x9d, 0xaa, 0x03, 0x00, 0x00,
}
