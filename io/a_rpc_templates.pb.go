// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/core/a_rpc_templates.proto

package io

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("io/core/a_rpc_templates.proto", fileDescriptor_33d7d8d9de4f06da)
}

var fileDescriptor_33d7d8d9de4f06da = []byte{
	// 2237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x6d, 0x6c, 0x1c, 0x47,
	0x19, 0xd6, 0x6c, 0x69, 0x62, 0x8f, 0x9d, 0x73, 0xba, 0xb1, 0x13, 0x67, 0x03, 0xc9, 0x74, 0xa9,
	0x88, 0x30, 0xc9, 0xdd, 0xa9, 0x49, 0x41, 0xb8, 0x50, 0xb1, 0xb1, 0x93, 0x2a, 0x69, 0x45, 0x2c,
	0x37, 0x15, 0x12, 0xa8, 0x8a, 0xd6, 0x7b, 0x73, 0x77, 0x8b, 0xf7, 0x76, 0x96, 0xdd, 0x39, 0x1b,
	0x13, 0xf2, 0x83, 0x08, 0x04, 0xa8, 0x88, 0x8f, 0x6d, 0x20, 0x88, 0x56, 0x05, 0xf1, 0x25, 0x4a,
	0x11, 0x0d, 0xad, 0x40, 0x20, 0xf1, 0x29, 0x54, 0x2a, 0x40, 0x82, 0x1f, 0xfd, 0x20, 0xfc, 0xe1,
	0x47, 0x5a, 0x21, 0x40, 0x11, 0x12, 0x12, 0x82, 0x1f, 0x48, 0x08, 0xcd, 0xc7, 0xce, 0xce, 0xde,
	0x57, 0x4c, 0x7b, 0xb1, 0x9d, 0x5f, 0xde, 0x9b, 0xd9, 0xdb, 0x9d, 0xe7, 0xb9, 0xe7, 0x7d, 0xdf,
	0xe7, 0x7d, 0x65, 0xf8, 0x06, 0x9f, 0x54, 0x3c, 0x12, 0xe3, 0x8a, 0x7b, 0x36, 0x8e, 0xbc, 0xb3,
	0x14, 0xb7, 0xa2, 0xc0, 0xa5, 0x38, 0x29, 0x47, 0x31, 0xa1, 0xc4, 0x34, 0x7c, 0x62, 0xbd, 0xbe,
	0x41, 0x48, 0x23, 0xc0, 0x15, 0x37, 0xf2, 0x2b, 0x6e, 0x18, 0x12, 0xea, 0x52, 0x9f, 0x84, 0xf2,
	0x0e, 0x6b, 0x9f, 0xdc, 0xe5, 0x9f, 0x96, 0xda, 0xf5, 0x0a, 0x6e, 0x45, 0x74, 0x4d, 0x6e, 0x1e,
	0xe2, 0x7f, 0xbc, 0xc3, 0x0d, 0x1c, 0x1e, 0x4e, 0x56, 0xdd, 0x46, 0x03, 0xc7, 0x15, 0x12, 0xf1,
	0xaf, 0xf7, 0x78, 0xd4, 0x7e, 0x7e, 0x96, 0x56, 0x8b, 0x84, 0xf2, 0xcf, 0x59, 0xb2, 0xf4, 0x7e,
	0xec, 0xd1, 0x6c, 0x7f, 0x3a, 0xdf, 0xcf, 0xce, 0x29, 0x77, 0xf6, 0xe6, 0x3b, 0x51, 0x4c, 0x3e,
	0xe8, 0xb7, 0x7c, 0x75, 0x84, 0xa9, 0x7c, 0x2b, 0xf0, 0xc3, 0xe5, 0xec, 0x59, 0x96, 0xf6, 0x0d,
	0xb7, 0xe1, 0x87, 0xfc, 0x20, 0x72, 0x6f, 0x77, 0xbe, 0x57, 0xf7, 0x03, 0x8a, 0x63, 0xb1, 0x7e,
	0xe7, 0x13, 0x0b, 0x70, 0xf4, 0x4c, 0x46, 0x90, 0xf9, 0x4f, 0x00, 0x4b, 0x5e, 0x8c, 0x5d, 0x8a,
	0xb3, 0x35, 0x73, 0x67, 0xd9, 0x27, 0xe5, 0x05, 0x37, 0x49, 0xb2, 0x15, 0x6b, 0x1b, 0x5b, 0x39,
	0x59, 0xb3, 0x9f, 0x03, 0xa9, 0xf3, 0x14, 0x80, 0x25, 0xb6, 0x89, 0xf2, 0x67, 0x4c, 0xce, 0xf1,
	0x07, 0xa0, 0xc2, 0xb2, 0x75, 0x40, 0xac, 0x26, 0xc8, 0x45, 0x11, 0xdb, 0xc8, 0xc0, 0xa2, 0x18,
	0x7b, 0x24, 0xae, 0x95, 0x4f, 0x55, 0xe1, 0x2d, 0x47, 0xab, 0x55, 0xf3, 0xcd, 0xf0, 0xe0, 0x99,
	0x26, 0x8e, 0x31, 0xf2, 0xf9, 0xad, 0x31, 0x59, 0x0a, 0x70, 0x0b, 0xad, 0xfa, 0xb4, 0x89, 0x68,
	0x13, 0x23, 0x3f, 0x8c, 0xda, 0x14, 0xd5, 0x5c, 0xea, 0x96, 0x4f, 0x1d, 0x65, 0xdf, 0x38, 0x62,
	0x1e, 0x86, 0x6f, 0x59, 0xc4, 0xb4, 0x1d, 0x87, 0xb8, 0x86, 0x56, 0x9b, 0x38, 0xe4, 0xf7, 0xb5,
	0x13, 0x1c, 0xa3, 0xc0, 0xf5, 0x96, 0x13, 0xe4, 0xb6, 0x69, 0x93, 0xc4, 0xfe, 0x87, 0x04, 0x1b,
	0x17, 0x9e, 0x7f, 0xe5, 0x11, 0xa3, 0x64, 0x8f, 0x2a, 0xb6, 0x67, 0xc1, 0x8c, 0xf9, 0x67, 0x03,
	0x96, 0xda, 0x51, 0x6d, 0x30, 0xec, 0xae, 0x15, 0xfb, 0x29, 0x23, 0x75, 0x2e, 0x19, 0xdd, 0x04,
	0x3c, 0xc8, 0x1f, 0xd5, 0x41, 0x00, 0x12, 0xab, 0x09, 0x72, 0xc3, 0xa1, 0x31, 0x60, 0x0b, 0x06,
	0xf6, 0xc1, 0xbd, 0x0f, 0xf6, 0xc3, 0x7b, 0x6a, 0x3f, 0xbb, 0xe7, 0xa8, 0xb9, 0x07, 0x4e, 0x2d,
	0xf2, 0xf7, 0xa0, 0x55, 0x37, 0x41, 0x21, 0xa1, 0xa8, 0x4e, 0xda, 0x61, 0xad, 0x7c, 0xea, 0x3d,
	0xf0, 0x96, 0xbb, 0xaa, 0x47, 0xcc, 0x05, 0xf8, 0xee, 0x07, 0x70, 0xbc, 0x82, 0x63, 0xf6, 0xda,
	0x76, 0xe8, 0xae, 0xb8, 0x7e, 0xe0, 0x2e, 0x05, 0xb8, 0x8c, 0x8e, 0xb9, 0xde, 0x32, 0x22, 0xf5,
	0x3a, 0xaa, 0x93, 0x18, 0xdd, 0x79, 0x57, 0xb5, 0xc5, 0x20, 0xd4, 0x50, 0x8c, 0x23, 0xec, 0x52,
	0x14, 0xe3, 0x0f, 0xb4, 0x71, 0x42, 0x51, 0x3b, 0xa4, 0x7e, 0x80, 0x92, 0xb6, 0xe7, 0xe1, 0x24,
	0xa9, 0xb7, 0x03, 0x49, 0xb4, 0x55, 0x24, 0xfa, 0x2a, 0x80, 0x63, 0x0d, 0x4c, 0x15, 0xcb, 0x52,
	0x4a, 0xd6, 0x74, 0x27, 0xb7, 0x8b, 0x38, 0x89, 0x48, 0x98, 0x60, 0xfb, 0x32, 0x48, 0x9d, 0xcf,
	0x75, 0x8b, 0x6c, 0xfa, 0x5e, 0x4c, 0x8b, 0x04, 0x23, 0x01, 0xcf, 0xba, 0x7d, 0x11, 0xd3, 0xd8,
	0xc7, 0x2b, 0x03, 0xa4, 0x36, 0x04, 0xda, 0x38, 0xba, 0x29, 0x73, 0x97, 0x42, 0x57, 0x61, 0xbf,
	0x48, 0xe5, 0x9c, 0x5f, 0x3b, 0x6f, 0x7e, 0xd6, 0x80, 0x66, 0x03, 0xd3, 0x79, 0x5c, 0x77, 0xdb,
	0x41, 0x8e, 0xd5, 0x62, 0x18, 0x3b, 0x16, 0x17, 0x05, 0x7b, 0x3d, 0xb4, 0xf5, 0x5b, 0x90, 0x3a,
	0x8f, 0x76, 0xe3, 0xb6, 0x19, 0x6e, 0x07, 0xc9, 0xc7, 0x6c, 0x3a, 0x03, 0x6f, 0x32, 0xef, 0xe8,
	0x64, 0x40, 0x64, 0x47, 0x12, 0x9c, 0xaf, 0x9c, 0x8b, 0xf1, 0x8a, 0x9f, 0xf8, 0x24, 0x3c, 0x6f,
	0xfe, 0x03, 0xc0, 0x71, 0x8f, 0x44, 0x6b, 0x8a, 0x8c, 0x5d, 0x0c, 0xf0, 0x1c, 0x89, 0xd6, 0x4e,
	0xf3, 0x6c, 0x78, 0x92, 0x89, 0x5a, 0x25, 0x96, 0x5f, 0x82, 0xd4, 0xf9, 0x66, 0x37, 0xf6, 0x7d,
	0xec, 0x7e, 0xe4, 0xf6, 0x06, 0x7d, 0x64, 0x8e, 0x44, 0x7e, 0x5f, 0xc4, 0x52, 0xb1, 0x2c, 0x4b,
	0xb0, 0x5b, 0x42, 0xbc, 0x8a, 0xfc, 0x21, 0xd2, 0xb0, 0xcb, 0x2e, 0xe5, 0x34, 0x30, 0x9c, 0x4c,
	0xeb, 0x57, 0x00, 0x2c, 0xd5, 0x70, 0x80, 0xb5, 0xa4, 0x92, 0xc9, 0x7d, 0x77, 0x59, 0x14, 0x98,
	0x72, 0x56, 0x60, 0xca, 0xc7, 0x59, 0x81, 0xb1, 0xbf, 0x01, 0x52, 0xe7, 0xe1, 0x1e, 0x19, 0x75,
	0x9e, 0x3f, 0xa6, 0x33, 0xa3, 0x8a, 0xd5, 0xbe, 0x09, 0x65, 0x68, 0xe8, 0x76, 0xce, 0x68, 0xe8,
	0xb8, 0xc2, 0x5f, 0x30, 0xe0, 0xfe, 0xc0, 0x4f, 0x94, 0x8c, 0x93, 0x13, 0x24, 0x66, 0xef, 0x98,
	0xc7, 0x51, 0x8c, 0x3d, 0x97, 0xe2, 0x9a, 0x59, 0x12, 0x8a, 0xce, 0xaa, 0xd0, 0x80, 0x08, 0xff,
	0x98, 0x91, 0x3a, 0x7f, 0xeb, 0x06, 0x7d, 0x88, 0x2b, 0x3d, 0x08, 0x8a, 0xa8, 0x13, 0x74, 0x82,
	0xc4, 0x88, 0xe3, 0x79, 0xdf, 0xfc, 0xf1, 0x85, 0xc5, 0xe3, 0x73, 0xce, 0x99, 0xe3, 0xf3, 0x0f,
	0x59, 0x75, 0xed, 0xd3, 0x2c, 0x3a, 0xbd, 0x88, 0x48, 0x84, 0x63, 0x97, 0x12, 0x9e, 0xce, 0x18,
	0x9e, 0xa4, 0x1d, 0x45, 0x24, 0xa6, 0xb8, 0xf6, 0x10, 0xd2, 0xc2, 0x23, 0x08, 0x8a, 0xd4, 0x25,
	0x28, 0xa1, 0x24, 0xc6, 0x35, 0xd4, 0x0e, 0x6b, 0x38, 0xce, 0x2b, 0x89, 0xeb, 0x79, 0xa4, 0x1d,
	0xd2, 0xe1, 0x29, 0xe6, 0x36, 0x73, 0x42, 0x71, 0x9a, 0x54, 0xd8, 0x3b, 0xaa, 0xc0, 0xbc, 0x64,
	0xc0, 0xc9, 0x5e, 0xb4, 0x9a, 0x63, 0x8c, 0xbc, 0x13, 0xbc, 0x6c, 0x27, 0x03, 0x98, 0x7c, 0x11,
	0xa4, 0xce, 0xd3, 0xdd, 0x4c, 0x1e, 0xb8, 0x0e, 0x93, 0xd6, 0xdd, 0x5b, 0x81, 0x91, 0xbd, 0xf6,
	0x64, 0x07, 0x23, 0x15, 0xc6, 0xc5, 0x2c, 0x98, 0xa9, 0x02, 0xf3, 0x57, 0x06, 0xdc, 0x53, 0x60,
	0xe6, 0x55, 0x29, 0xed, 0xbf, 0x20, 0x75, 0xfe, 0xd2, 0xcd, 0x4f, 0x65, 0x00, 0x3f, 0x73, 0xa4,
	0x15, 0xb9, 0xe1, 0x5a, 0x51, 0x6c, 0xee, 0x0d, 0x13, 0x9b, 0x27, 0x5e, 0x37, 0x3c, 0x56, 0xc7,
	0x4d, 0x98, 0xb3, 0x5a, 0x05, 0xe6, 0x27, 0x0d, 0xb8, 0xa3, 0x40, 0xe4, 0x7a, 0xb5, 0xf5, 0x3b,
	0x90, 0x3a, 0x97, 0xfb, 0xd5, 0xa3, 0x81, 0xdc, 0x59, 0x6f, 0xdd, 0x64, 0x0e, 0x26, 0x6d, 0x3d,
	0xd6, 0x72, 0x51, 0xbd, 0x64, 0xc0, 0x69, 0x2e, 0xe2, 0xf5, 0xa8, 0x6a, 0x54, 0x14, 0xac, 0x76,
	0x48, 0xed, 0xc7, 0x8d, 0xd4, 0xb9, 0xd0, 0x6d, 0xfb, 0xee, 0xe6, 0xbb, 0xbd, 0xc8, 0x70, 0x32,
	0x33, 0x85, 0x28, 0x41, 0x67, 0x9a, 0xb8, 0x47, 0xfe, 0x22, 0xaf, 0x4e, 0x52, 0x88, 0x9f, 0x1f,
	0x91, 0xfa, 0xba, 0x82, 0xf6, 0x60, 0x32, 0x7c, 0x72, 0x4d, 0x73, 0xa7, 0x46, 0x2e, 0x3f, 0x8e,
	0x79, 0xd1, 0x80, 0xa5, 0x22, 0xb1, 0x45, 0x95, 0x69, 0x5c, 0xfe, 0x15, 0xa4, 0xce, 0x6f, 0xba,
	0x65, 0x55, 0xfe, 0xff, 0xb8, 0xb4, 0xe6, 0xb7, 0x14, 0x27, 0x53, 0x76, 0x17, 0x27, 0xcc, 0x10,
	0xfc, 0xc1, 0x80, 0x07, 0x8a, 0xb4, 0x5c, 0xbf, 0x6c, 0x6a, 0x54, 0x7d, 0xd1, 0x48, 0x9d, 0x7f,
	0x77, 0x53, 0xf5, 0xb6, 0xbe, 0x54, 0x9d, 0x5e, 0x65, 0x2d, 0xd1, 0xd2, 0x5a, 0x1f, 0xc9, 0x35,
	0x6f, 0x68, 0xc9, 0x3c, 0x98, 0x0c, 0xbf, 0x44, 0xec, 0x31, 0xa7, 0x3a, 0x4b, 0x84, 0x10, 0xdc,
	0xe7, 0x0d, 0x38, 0xd5, 0x93, 0xd9, 0xbe, 0xba, 0x7b, 0x19, 0xa4, 0xce, 0xcf, 0xba, 0xc9, 0x9c,
	0x59, 0x3f, 0x99, 0xd6, 0x3b, 0xb7, 0x06, 0x29, 0x96, 0xdd, 0x9b, 0x14, 0xa6, 0xb8, 0x57, 0x54,
	0x3b, 0x7f, 0x3f, 0xf1, 0xf8, 0x33, 0xcd, 0x09, 0xc6, 0xc1, 0xbd, 0x0b, 0x0f, 0x64, 0x0b, 0xca,
	0x74, 0xff, 0x10, 0xa4, 0xce, 0x57, 0x00, 0x1c, 0xcd, 0x36, 0x12, 0x73, 0x42, 0x36, 0xf2, 0xea,
	0x56, 0x2b, 0xef, 0xe1, 0x03, 0xb9, 0x86, 0xc4, 0x34, 0x63, 0xe3, 0xdb, 0xf7, 0xec, 0x00, 0x0c,
	0xe6, 0x0b, 0xaa, 0x7d, 0xef, 0x0f, 0xb3, 0x73, 0xc1, 0xfe, 0xb2, 0x91, 0x3a, 0x1f, 0x37, 0x0a,
	0x78, 0x65, 0xdf, 0x9e, 0xe3, 0x55, 0x2d, 0xfb, 0x30, 0xf0, 0xde, 0x14, 0xcd, 0xba, 0x4e, 0xeb,
	0xb3, 0xa2, 0x59, 0x57, 0x9c, 0x66, 0xdd, 0x4b, 0x17, 0x95, 0x8f, 0x81, 0xd4, 0xb9, 0x50, 0x90,
	0xce, 0x38, 0xb3, 0x05, 0x8a, 0xc7, 0x37, 0xea, 0xd9, 0x39, 0xf1, 0xc3, 0x46, 0x80, 0xbb, 0x09,
	0x1d, 0x5a, 0xb7, 0x62, 0x96, 0x14, 0x0a, 0xd1, 0xad, 0x3c, 0x29, 0xcd, 0xa3, 0x3a, 0xde, 0x80,
	0x7c, 0xdb, 0x85, 0xed, 0x1a, 0x48, 0x9d, 0x97, 0x0a, 0xd8, 0xf6, 0xdd, 0xef, 0x27, 0x39, 0xb8,
	0x64, 0x18, 0x49, 0x35, 0x50, 0x0f, 0x93, 0xc3, 0x41, 0x44, 0x9b, 0x2e, 0x45, 0x2d, 0x97, 0x7a,
	0x42, 0x47, 0xec, 0x5b, 0x81, 0x8f, 0x6b, 0xc8, 0x8b, 0x7d, 0x8a, 0x63, 0xdf, 0x1d, 0xae, 0x43,
	0x54, 0xef, 0xaf, 0x02, 0xf3, 0xef, 0x40, 0x38, 0xc4, 0x1c, 0x70, 0x21, 0x87, 0x76, 0x11, 0xf4,
	0x63, 0x90, 0x3a, 0x8f, 0x17, 0x08, 0x2a, 0x15, 0x09, 0xd2, 0x13, 0xe5, 0x66, 0x02, 0x65, 0x36,
	0x50, 0xbd, 0x5f, 0xb3, 0x81, 0x7f, 0x94, 0xb3, 0x09, 0xa5, 0xf3, 0x81, 0xb3, 0x89, 0x27, 0x41,
	0xea, 0x7c, 0xba, 0x00, 0x77, 0x07, 0x1f, 0x4b, 0x28, 0xb1, 0x97, 0xd5, 0x20, 0x42, 0x49, 0x7c,
	0xc3, 0x66, 0x10, 0x4a, 0xf7, 0xd9, 0x0c, 0xe2, 0x39, 0x35, 0x83, 0xe8, 0x8a, 0xe2, 0x7e, 0x33,
	0x88, 0x8b, 0x20, 0x75, 0xce, 0x15, 0xd2, 0xa2, 0x9c, 0x3e, 0x28, 0x84, 0x7b, 0xd5, 0xe0, 0xa1,
	0x33, 0x8a, 0x87, 0x3a, 0x72, 0x28, 0x06, 0xf1, 0xbf, 0x80, 0x34, 0xeb, 0xeb, 0x89, 0x62, 0xad,
	0xd0, 0xff, 0x14, 0xa4, 0xce, 0x57, 0x3b, 0xca, 0x1a, 0xaf, 0xf1, 0xb9, 0x3e, 0xdf, 0xd5, 0xd3,
	0x3c, 0xe6, 0x52, 0xdd, 0x38, 0x89, 0x32, 0x33, 0x9d, 0x4b, 0x54, 0x78, 0x9b, 0x6b, 0x40, 0x9a,
	0xe9, 0x3e, 0x01, 0xa9, 0x61, 0xfd, 0xc5, 0xcd, 0x84, 0x95, 0x99, 0xe4, 0x0e, 0xac, 0x4c, 0xb1,
	0x2f, 0xb2, 0x68, 0xe4, 0x36, 0xe3, 0x18, 0x76, 0x3d, 0x12, 0x9a, 0x90, 0xe1, 0x13, 0xd7, 0x2a,
	0x08, 0x2f, 0x83, 0xd4, 0xf9, 0x12, 0x80, 0xdb, 0xc5, 0x32, 0x0b, 0x41, 0xe1, 0x54, 0xe4, 0x6d,
	0xd3, 0xb9, 0x4f, 0x59, 0xe2, 0x2b, 0x9b, 0xe2, 0x52, 0xc6, 0xed, 0xed, 0x15, 0xf1, 0x7a, 0x86,
	0xeb, 0xe7, 0x06, 0x1c, 0x17, 0x1e, 0xa5, 0x07, 0x2e, 0xed, 0xda, 0xbe, 0x64, 0xa4, 0xce, 0x47,
	0x0c, 0x0d, 0x9b, 0x74, 0x25, 0x19, 0xb6, 0xdc, 0x93, 0xbc, 0x66, 0x6c, 0x5b, 0xde, 0x91, 0x8c,
	0x5b, 0x3a, 0x85, 0xdf, 0x07, 0x70, 0xb4, 0x81, 0xa9, 0xe4, 0x2f, 0xcb, 0x63, 0x3a, 0x77, 0x8f,
	0x80, 0xd4, 0xf9, 0x70, 0x4e, 0x1d, 0x64, 0x2e, 0x44, 0xf2, 0x76, 0x7b, 0x0f, 0x0f, 0xd2, 0x41,
	0xe0, 0xb0, 0x94, 0x5d, 0x32, 0xc7, 0xe5, 0xa9, 0x45, 0xea, 0x7a, 0x19, 0xc0, 0x29, 0x56, 0x6e,
	0xe4, 0xb1, 0x06, 0xe4, 0x2d, 0x1d, 0x0b, 0x2b, 0x34, 0x97, 0x34, 0x8d, 0x8f, 0xf3, 0xaa, 0x2a,
	0x3f, 0x59, 0xb3, 0x39, 0x9c, 0x02, 0x8a, 0x8d, 0x8c, 0x60, 0x68, 0x8e, 0x48, 0x9c, 0xcc, 0x37,
	0xfc, 0x09, 0xc0, 0x31, 0x0d, 0x65, 0x31, 0x49, 0xe9, 0xc0, 0x9e, 0xd9, 0xf2, 0xc0, 0x4c, 0x7b,
	0x47, 0x06, 0x4c, 0xf3, 0x09, 0xbf, 0x07, 0x10, 0xb2, 0xba, 0x2a, 0xf5, 0x37, 0xd0, 0x25, 0x7c,
	0x0d, 0xa4, 0xce, 0x27, 0x34, 0x8c, 0x63, 0xdc, 0x23, 0x48, 0x29, 0x1e, 0x52, 0x0e, 0x41, 0x22,
	0xdc, 0x10, 0x7f, 0x70, 0x9b, 0xad, 0x54, 0x99, 0xb9, 0x83, 0x9f, 0x00, 0x38, 0x2e, 0xdc, 0x41,
	0x47, 0x4c, 0xf5, 0xf3, 0x06, 0x9f, 0x02, 0xa9, 0xd3, 0xd6, 0x52, 0x93, 0x74, 0x06, 0x12, 0xd7,
	0x9e, 0xdc, 0x17, 0x14, 0x7e, 0xba, 0xe1, 0x05, 0xd6, 0x4c, 0x31, 0xb0, 0xae, 0x01, 0xb8, 0x9b,
	0x17, 0x8e, 0xeb, 0x47, 0x96, 0x56, 0x25, 0x7f, 0x00, 0x52, 0xe7, 0xb1, 0x42, 0xf1, 0xe0, 0x65,
	0x30, 0x13, 0xe0, 0x3d, 0x3d, 0x2b, 0xa4, 0x94, 0xc3, 0x06, 0x8a, 0x90, 0xf5, 0x31, 0x99, 0x08,
	0x85, 0x13, 0xb8, 0xca, 0x8d, 0x6a, 0x0e, 0xb7, 0xaf, 0x0f, 0xf8, 0xd1, 0xcd, 0x81, 0x90, 0x39,
	0xd6, 0x02, 0x42, 0xa6, 0xc9, 0x5f, 0xb3, 0x28, 0x13, 0x23, 0x0b, 0x3f, 0x5c, 0x36, 0x47, 0x18,
	0x2a, 0x76, 0xa5, 0x42, 0xeb, 0x5b, 0x20, 0x75, 0x2e, 0x02, 0x78, 0x2b, 0x5b, 0x64, 0x81, 0x25,
	0x67, 0x14, 0xec, 0x96, 0xdd, 0xda, 0x7c, 0xc2, 0x0f, 0x97, 0x37, 0xa5, 0xea, 0x43, 0xfb, 0x56,
	0xfe, 0x3f, 0x19, 0x0c, 0xcb, 0xd3, 0x06, 0x84, 0x72, 0x2e, 0x51, 0xc4, 0xa2, 0xae, 0xec, 0xcf,
	0x18, 0xa9, 0xf3, 0x9f, 0x1c, 0x4d, 0x36, 0x81, 0xe0, 0x68, 0xb4, 0xe9, 0xc3, 0x6b, 0x43, 0xb3,
	0xe5, 0xeb, 0x3c, 0xb4, 0x72, 0xd2, 0x9e, 0x00, 0x70, 0x7b, 0x03, 0x53, 0xce, 0x58, 0x96, 0x8f,
	0x72, 0xbe, 0x1e, 0x06, 0xa9, 0xb3, 0x92, 0xd1, 0x35, 0xc2, 0xa7, 0x0c, 0x8c, 0xab, 0x03, 0xbd,
	0x26, 0x0c, 0x3a, 0x69, 0x43, 0xed, 0x96, 0xfd, 0x70, 0x59, 0x24, 0xa0, 0x2b, 0x00, 0xee, 0xe2,
	0xbd, 0x32, 0x3b, 0xce, 0x80, 0xec, 0x93, 0x9f, 0xff, 0xeb, 0x20, 0x75, 0x52, 0xf5, 0x7b, 0x43,
	0xd1, 0x29, 0xb3, 0x6b, 0xeb, 0xed, 0x5a, 0x97, 0xcc, 0x16, 0x36, 0xa1, 0xee, 0x8d, 0x98, 0xdb,
	0xc4, 0xff, 0x13, 0x55, 0x81, 0xf9, 0x3c, 0x80, 0xa3, 0x0a, 0x5a, 0x31, 0xd3, 0xe4, 0x68, 0xbe,
	0xb3, 0x95, 0xd1, 0xec, 0xb4, 0xc7, 0x04, 0x1a, 0xad, 0x86, 0x3f, 0x0b, 0xe0, 0x08, 0xef, 0xf5,
	0x99, 0xba, 0x06, 0x56, 0xf0, 0x47, 0xc5, 0x4c, 0x4b, 0x42, 0x1b, 0x15, 0x3d, 0x3e, 0x93, 0xda,
	0x4c, 0xde, 0xdf, 0x33, 0x81, 0x6d, 0x48, 0xed, 0x9e, 0xb0, 0xa5, 0xea, 0xb2, 0xca, 0xfd, 0x0c,
	0x80, 0x50, 0xf6, 0xf5, 0x7a, 0x9c, 0xf4, 0xab, 0xdb, 0x1f, 0x05, 0xa9, 0x43, 0x54, 0x92, 0xc9,
	0xfa, 0x79, 0x86, 0x66, 0x4a, 0xeb, 0xe5, 0xf3, 0x78, 0x19, 0x5e, 0xb8, 0xcc, 0xe8, 0xe1, 0x72,
	0x15, 0xc0, 0x49, 0xd1, 0xca, 0x5e, 0x27, 0x5e, 0xb4, 0x5a, 0xf6, 0x5d, 0x90, 0x3a, 0x5f, 0xd0,
	0xd2, 0xbd, 0xe8, 0x67, 0xb9, 0xc6, 0xde, 0xd1, 0xbb, 0x97, 0xe5, 0x72, 0xdb, 0x38, 0x99, 0x31,
	0xb7, 0x2f, 0x64, 0x26, 0xaa, 0xf4, 0x15, 0x6e, 0x13, 0x33, 0x90, 0x7d, 0x6b, 0xf4, 0xf7, 0xb6,
	0x3a, 0x2e, 0xe6, 0x17, 0x35, 0x5c, 0xb3, 0x60, 0xe6, 0xd8, 0x3d, 0x70, 0xc2, 0x27, 0xe5, 0xc8,
	0x4d, 0x92, 0x65, 0x9f, 0x96, 0x17, 0xee, 0xf3, 0xc9, 0x7b, 0xef, 0x48, 0xa8, 0x9b, 0x34, 0xd5,
	0x9a, 0x47, 0x5a, 0x15, 0x9f, 0x54, 0x5a, 0xa4, 0x86, 0x83, 0x4a, 0x52, 0x5b, 0xae, 0x34, 0x48,
	0xc5, 0x27, 0xdf, 0x36, 0x5e, 0xb7, 0x70, 0xdf, 0x49, 0xb2, 0xb4, 0x8d, 0xcb, 0xf2, 0xc8, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xac, 0x85, 0xa5, 0x3a, 0xa0, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TemplatesClient is the client API for Templates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplatesClient interface {
	CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error)
	UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error)
	GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error)
	GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error)
	CopyTemplate(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesForUserDeprecatedClient, error)
	ListTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListTemplatesForUserClient, error)
	ListTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesDeprecatedClient, error)
	ListTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListTemplatesClient, error)
	CountTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CountTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*Id, error)
	UpdateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*GPSLocation, error)
	GetLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GPSLocation, error)
	ListLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListLocationsDeprecatedClient, error)
	ListLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListLocationsClient, error)
	CopyLocation(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	CountLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Id, error)
	UpdateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Beacon, error)
	GetBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Beacon, error)
	ListBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListBeaconsDeprecatedClient, error)
	ListBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListBeaconsClient, error)
	CopyBeacon(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	CountBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error)
	UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	GetLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Link, error)
	ListLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListLinksDeprecatedClient, error)
	ListLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListLinksClient, error)
	CopyLink(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	CountLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
}

type templatesClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplatesClient(cc grpc.ClientConnInterface) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/createTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error) {
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, "/io.Templates/updateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error) {
	out := new(PassTemplateResponse)
	err := c.cc.Invoke(ctx, "/io.Templates/getTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error) {
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, "/io.Templates/getDefaultTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CopyTemplate(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/copyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Templates/deleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesForUserDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[0], "/io.Templates/listTemplatesForUserDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesForUserDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesForUserDeprecatedClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesForUserDeprecatedClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesForUserDeprecatedClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListTemplatesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[1], "/io.Templates/listTemplatesForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesForUserClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesForUserClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesForUserClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListTemplatesDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[2], "/io.Templates/listTemplatesDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesDeprecatedClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesDeprecatedClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesDeprecatedClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[3], "/io.Templates/listTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListTemplatesClient interface {
	Recv() (*PassTemplateResponse, error)
	grpc.ClientStream
}

type templatesListTemplatesClient struct {
	grpc.ClientStream
}

func (x *templatesListTemplatesClient) Recv() (*PassTemplateResponse, error) {
	m := new(PassTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) CountTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplatesDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplatesForUserDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countTemplatesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/createLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*GPSLocation, error) {
	out := new(GPSLocation)
	err := c.cc.Invoke(ctx, "/io.Templates/updateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GPSLocation, error) {
	out := new(GPSLocation)
	err := c.cc.Invoke(ctx, "/io.Templates/getLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListLocationsDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[4], "/io.Templates/listLocationsDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListLocationsDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListLocationsDeprecatedClient interface {
	Recv() (*GPSLocation, error)
	grpc.ClientStream
}

type templatesListLocationsDeprecatedClient struct {
	grpc.ClientStream
}

func (x *templatesListLocationsDeprecatedClient) Recv() (*GPSLocation, error) {
	m := new(GPSLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[5], "/io.Templates/listLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListLocationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListLocationsClient interface {
	Recv() (*GPSLocation, error)
	grpc.ClientStream
}

type templatesListLocationsClient struct {
	grpc.ClientStream
}

func (x *templatesListLocationsClient) Recv() (*GPSLocation, error) {
	m := new(GPSLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) CopyLocation(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/copyLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Templates/deleteLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countLocationsDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/createBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Beacon, error) {
	out := new(Beacon)
	err := c.cc.Invoke(ctx, "/io.Templates/updateBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Beacon, error) {
	out := new(Beacon)
	err := c.cc.Invoke(ctx, "/io.Templates/getBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListBeaconsDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[6], "/io.Templates/listBeaconsDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListBeaconsDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListBeaconsDeprecatedClient interface {
	Recv() (*Beacon, error)
	grpc.ClientStream
}

type templatesListBeaconsDeprecatedClient struct {
	grpc.ClientStream
}

func (x *templatesListBeaconsDeprecatedClient) Recv() (*Beacon, error) {
	m := new(Beacon)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListBeaconsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[7], "/io.Templates/listBeacons", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListBeaconsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListBeaconsClient interface {
	Recv() (*Beacon, error)
	grpc.ClientStream
}

type templatesListBeaconsClient struct {
	grpc.ClientStream
}

func (x *templatesListBeaconsClient) Recv() (*Beacon, error) {
	m := new(Beacon)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) CopyBeacon(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/copyBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Templates/deleteBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countBeaconsDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countBeacons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/createLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/io.Templates/updateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/io.Templates/getLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Templates_ListLinksDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[8], "/io.Templates/listLinksDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListLinksDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListLinksDeprecatedClient interface {
	Recv() (*Link, error)
	grpc.ClientStream
}

type templatesListLinksDeprecatedClient struct {
	grpc.ClientStream
}

func (x *templatesListLinksDeprecatedClient) Recv() (*Link, error) {
	m := new(Link)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) ListLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Templates_ListLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Templates_serviceDesc.Streams[9], "/io.Templates/listLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &templatesListLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Templates_ListLinksClient interface {
	Recv() (*Link, error)
	grpc.ClientStream
}

type templatesListLinksClient struct {
	grpc.ClientStream
}

func (x *templatesListLinksClient) Recv() (*Link, error) {
	m := new(Link)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *templatesClient) CopyLink(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Templates/copyLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Templates/deleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countLinksDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Templates/countLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesServer is the server API for Templates service.
type TemplatesServer interface {
	CreateTemplate(context.Context, *PassTemplate) (*Id, error)
	UpdateTemplate(context.Context, *PassTemplate) (*PassTemplate, error)
	GetTemplate(context.Context, *Id) (*PassTemplateResponse, error)
	GetDefaultTemplate(context.Context, *DefaultTemplateRequest) (*PassTemplate, error)
	CopyTemplate(context.Context, *CopyObjectInput) (*Id, error)
	DeleteTemplate(context.Context, *Id) (*empty.Empty, error)
	ListTemplatesForUserDeprecated(*Pagination, Templates_ListTemplatesForUserDeprecatedServer) error
	ListTemplatesForUser(*Filters, Templates_ListTemplatesForUserServer) error
	ListTemplatesDeprecated(*Pagination, Templates_ListTemplatesDeprecatedServer) error
	ListTemplates(*Filters, Templates_ListTemplatesServer) error
	CountTemplatesDeprecated(context.Context, *Pagination) (*Count, error)
	CountTemplates(context.Context, *Filters) (*Count, error)
	CountTemplatesForUserDeprecated(context.Context, *Pagination) (*Count, error)
	CountTemplatesForUser(context.Context, *Filters) (*Count, error)
	CreateLocation(context.Context, *GPSLocation) (*Id, error)
	UpdateLocation(context.Context, *GPSLocation) (*GPSLocation, error)
	GetLocation(context.Context, *Id) (*GPSLocation, error)
	ListLocationsDeprecated(*Pagination, Templates_ListLocationsDeprecatedServer) error
	ListLocations(*Filters, Templates_ListLocationsServer) error
	CopyLocation(context.Context, *CopyObjectInput) (*Id, error)
	DeleteLocation(context.Context, *Id) (*empty.Empty, error)
	CountLocationsDeprecated(context.Context, *Pagination) (*Count, error)
	CountLocations(context.Context, *Filters) (*Count, error)
	CreateBeacon(context.Context, *Beacon) (*Id, error)
	UpdateBeacon(context.Context, *Beacon) (*Beacon, error)
	GetBeacon(context.Context, *Id) (*Beacon, error)
	ListBeaconsDeprecated(*Pagination, Templates_ListBeaconsDeprecatedServer) error
	ListBeacons(*Filters, Templates_ListBeaconsServer) error
	CopyBeacon(context.Context, *CopyObjectInput) (*Id, error)
	DeleteBeacon(context.Context, *Id) (*empty.Empty, error)
	CountBeaconsDeprecated(context.Context, *Pagination) (*Count, error)
	CountBeacons(context.Context, *Filters) (*Count, error)
	CreateLink(context.Context, *Link) (*Id, error)
	UpdateLink(context.Context, *Link) (*Link, error)
	GetLink(context.Context, *Id) (*Link, error)
	ListLinksDeprecated(*Pagination, Templates_ListLinksDeprecatedServer) error
	ListLinks(*Filters, Templates_ListLinksServer) error
	CopyLink(context.Context, *CopyObjectInput) (*Id, error)
	DeleteLink(context.Context, *Id) (*empty.Empty, error)
	CountLinksDeprecated(context.Context, *Pagination) (*Count, error)
	CountLinks(context.Context, *Filters) (*Count, error)
}

// UnimplementedTemplatesServer can be embedded to have forward compatible implementations.
type UnimplementedTemplatesServer struct {
}

func (*UnimplementedTemplatesServer) CreateTemplate(ctx context.Context, req *PassTemplate) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedTemplatesServer) UpdateTemplate(ctx context.Context, req *PassTemplate) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedTemplatesServer) GetTemplate(ctx context.Context, req *Id) (*PassTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplatesServer) GetDefaultTemplate(ctx context.Context, req *DefaultTemplateRequest) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultTemplate not implemented")
}
func (*UnimplementedTemplatesServer) CopyTemplate(ctx context.Context, req *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTemplate not implemented")
}
func (*UnimplementedTemplatesServer) DeleteTemplate(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplatesForUserDeprecated(req *Pagination, srv Templates_ListTemplatesForUserDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesForUserDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplatesForUser(req *Filters, srv Templates_ListTemplatesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesForUser not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplatesDeprecated(req *Pagination, srv Templates_ListTemplatesDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) ListTemplates(req *Filters, srv Templates_ListTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplatesDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplates(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplates not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplatesForUserDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesForUserDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) CountTemplatesForUser(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesForUser not implemented")
}
func (*UnimplementedTemplatesServer) CreateLocation(ctx context.Context, req *GPSLocation) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (*UnimplementedTemplatesServer) UpdateLocation(ctx context.Context, req *GPSLocation) (*GPSLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (*UnimplementedTemplatesServer) GetLocation(ctx context.Context, req *Id) (*GPSLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (*UnimplementedTemplatesServer) ListLocationsDeprecated(req *Pagination, srv Templates_ListLocationsDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLocationsDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) ListLocations(req *Filters, srv Templates_ListLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (*UnimplementedTemplatesServer) CopyLocation(ctx context.Context, req *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyLocation not implemented")
}
func (*UnimplementedTemplatesServer) DeleteLocation(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (*UnimplementedTemplatesServer) CountLocationsDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLocationsDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) CountLocations(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLocations not implemented")
}
func (*UnimplementedTemplatesServer) CreateBeacon(ctx context.Context, req *Beacon) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeacon not implemented")
}
func (*UnimplementedTemplatesServer) UpdateBeacon(ctx context.Context, req *Beacon) (*Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeacon not implemented")
}
func (*UnimplementedTemplatesServer) GetBeacon(ctx context.Context, req *Id) (*Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacon not implemented")
}
func (*UnimplementedTemplatesServer) ListBeaconsDeprecated(req *Pagination, srv Templates_ListBeaconsDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBeaconsDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) ListBeacons(req *Filters, srv Templates_ListBeaconsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBeacons not implemented")
}
func (*UnimplementedTemplatesServer) CopyBeacon(ctx context.Context, req *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyBeacon not implemented")
}
func (*UnimplementedTemplatesServer) DeleteBeacon(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeacon not implemented")
}
func (*UnimplementedTemplatesServer) CountBeaconsDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconsDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) CountBeacons(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeacons not implemented")
}
func (*UnimplementedTemplatesServer) CreateLink(ctx context.Context, req *Link) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (*UnimplementedTemplatesServer) UpdateLink(ctx context.Context, req *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLink not implemented")
}
func (*UnimplementedTemplatesServer) GetLink(ctx context.Context, req *Id) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (*UnimplementedTemplatesServer) ListLinksDeprecated(req *Pagination, srv Templates_ListLinksDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLinksDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) ListLinks(req *Filters, srv Templates_ListLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (*UnimplementedTemplatesServer) CopyLink(ctx context.Context, req *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyLink not implemented")
}
func (*UnimplementedTemplatesServer) DeleteLink(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (*UnimplementedTemplatesServer) CountLinksDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinksDeprecated not implemented")
}
func (*UnimplementedTemplatesServer) CountLinks(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinks not implemented")
}

func RegisterTemplatesServer(s *grpc.Server, srv TemplatesServer) {
	s.RegisterService(&_Templates_serviceDesc, srv)
}

func _Templates_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetDefaultTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetDefaultTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, req.(*DefaultTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CopyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CopyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyTemplate(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListTemplatesForUserDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesForUserDeprecated(m, &templatesListTemplatesForUserDeprecatedServer{stream})
}

type Templates_ListTemplatesForUserDeprecatedServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesForUserDeprecatedServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesForUserDeprecatedServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListTemplatesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesForUser(m, &templatesListTemplatesForUserServer{stream})
}

type Templates_ListTemplatesForUserServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesForUserServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesForUserServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListTemplatesDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesDeprecated(m, &templatesListTemplatesDeprecatedServer{stream})
}

type Templates_ListTemplatesDeprecatedServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesDeprecatedServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesDeprecatedServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplates(m, &templatesListTemplatesServer{stream})
}

type Templates_ListTemplatesServer interface {
	Send(*PassTemplateResponse) error
	grpc.ServerStream
}

type templatesListTemplatesServer struct {
	grpc.ServerStream
}

func (x *templatesListTemplatesServer) Send(m *PassTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_CountTemplatesDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplatesDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplates(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplatesForUserDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesForUserDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplatesForUserDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesForUserDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplatesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountTemplatesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CreateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateLocation(ctx, req.(*GPSLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateLocation(ctx, req.(*GPSLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetLocation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListLocationsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLocationsDeprecated(m, &templatesListLocationsDeprecatedServer{stream})
}

type Templates_ListLocationsDeprecatedServer interface {
	Send(*GPSLocation) error
	grpc.ServerStream
}

type templatesListLocationsDeprecatedServer struct {
	grpc.ServerStream
}

func (x *templatesListLocationsDeprecatedServer) Send(m *GPSLocation) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLocations(m, &templatesListLocationsServer{stream})
}

type Templates_ListLocationsServer interface {
	Send(*GPSLocation) error
	grpc.ServerStream
}

type templatesListLocationsServer struct {
	grpc.ServerStream
}

func (x *templatesListLocationsServer) Send(m *GPSLocation) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_CopyLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CopyLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyLocation(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/DeleteLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteLocation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLocationsDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLocationsDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountLocationsDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLocationsDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLocations(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CreateBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateBeacon(ctx, req.(*Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/UpdateBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateBeacon(ctx, req.(*Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetBeacon(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListBeaconsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListBeaconsDeprecated(m, &templatesListBeaconsDeprecatedServer{stream})
}

type Templates_ListBeaconsDeprecatedServer interface {
	Send(*Beacon) error
	grpc.ServerStream
}

type templatesListBeaconsDeprecatedServer struct {
	grpc.ServerStream
}

func (x *templatesListBeaconsDeprecatedServer) Send(m *Beacon) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListBeacons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListBeacons(m, &templatesListBeaconsServer{stream})
}

type Templates_ListBeaconsServer interface {
	Send(*Beacon) error
	grpc.ServerStream
}

type templatesListBeaconsServer struct {
	grpc.ServerStream
}

func (x *templatesListBeaconsServer) Send(m *Beacon) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_CopyBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CopyBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyBeacon(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/DeleteBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteBeacon(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountBeaconsDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountBeaconsDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountBeaconsDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountBeaconsDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountBeacons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountBeacons(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetLink(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListLinksDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLinksDeprecated(m, &templatesListLinksDeprecatedServer{stream})
}

type Templates_ListLinksDeprecatedServer interface {
	Send(*Link) error
	grpc.ServerStream
}

type templatesListLinksDeprecatedServer struct {
	grpc.ServerStream
}

func (x *templatesListLinksDeprecatedServer) Send(m *Link) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_ListLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLinks(m, &templatesListLinksServer{stream})
}

type Templates_ListLinksServer interface {
	Send(*Link) error
	grpc.ServerStream
}

type templatesListLinksServer struct {
	grpc.ServerStream
}

func (x *templatesListLinksServer) Send(m *Link) error {
	return x.ServerStream.SendMsg(m)
}

func _Templates_CopyLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CopyLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyLink(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteLink(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLinksDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLinksDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountLinksDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLinksDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Templates/CountLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLinks(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Templates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTemplate",
			Handler:    _Templates_CreateTemplate_Handler,
		},
		{
			MethodName: "updateTemplate",
			Handler:    _Templates_UpdateTemplate_Handler,
		},
		{
			MethodName: "getTemplate",
			Handler:    _Templates_GetTemplate_Handler,
		},
		{
			MethodName: "getDefaultTemplate",
			Handler:    _Templates_GetDefaultTemplate_Handler,
		},
		{
			MethodName: "copyTemplate",
			Handler:    _Templates_CopyTemplate_Handler,
		},
		{
			MethodName: "deleteTemplate",
			Handler:    _Templates_DeleteTemplate_Handler,
		},
		{
			MethodName: "countTemplatesDeprecated",
			Handler:    _Templates_CountTemplatesDeprecated_Handler,
		},
		{
			MethodName: "countTemplates",
			Handler:    _Templates_CountTemplates_Handler,
		},
		{
			MethodName: "countTemplatesForUserDeprecated",
			Handler:    _Templates_CountTemplatesForUserDeprecated_Handler,
		},
		{
			MethodName: "countTemplatesForUser",
			Handler:    _Templates_CountTemplatesForUser_Handler,
		},
		{
			MethodName: "createLocation",
			Handler:    _Templates_CreateLocation_Handler,
		},
		{
			MethodName: "updateLocation",
			Handler:    _Templates_UpdateLocation_Handler,
		},
		{
			MethodName: "getLocation",
			Handler:    _Templates_GetLocation_Handler,
		},
		{
			MethodName: "copyLocation",
			Handler:    _Templates_CopyLocation_Handler,
		},
		{
			MethodName: "deleteLocation",
			Handler:    _Templates_DeleteLocation_Handler,
		},
		{
			MethodName: "countLocationsDeprecated",
			Handler:    _Templates_CountLocationsDeprecated_Handler,
		},
		{
			MethodName: "countLocations",
			Handler:    _Templates_CountLocations_Handler,
		},
		{
			MethodName: "createBeacon",
			Handler:    _Templates_CreateBeacon_Handler,
		},
		{
			MethodName: "updateBeacon",
			Handler:    _Templates_UpdateBeacon_Handler,
		},
		{
			MethodName: "getBeacon",
			Handler:    _Templates_GetBeacon_Handler,
		},
		{
			MethodName: "copyBeacon",
			Handler:    _Templates_CopyBeacon_Handler,
		},
		{
			MethodName: "deleteBeacon",
			Handler:    _Templates_DeleteBeacon_Handler,
		},
		{
			MethodName: "countBeaconsDeprecated",
			Handler:    _Templates_CountBeaconsDeprecated_Handler,
		},
		{
			MethodName: "countBeacons",
			Handler:    _Templates_CountBeacons_Handler,
		},
		{
			MethodName: "createLink",
			Handler:    _Templates_CreateLink_Handler,
		},
		{
			MethodName: "updateLink",
			Handler:    _Templates_UpdateLink_Handler,
		},
		{
			MethodName: "getLink",
			Handler:    _Templates_GetLink_Handler,
		},
		{
			MethodName: "copyLink",
			Handler:    _Templates_CopyLink_Handler,
		},
		{
			MethodName: "deleteLink",
			Handler:    _Templates_DeleteLink_Handler,
		},
		{
			MethodName: "countLinksDeprecated",
			Handler:    _Templates_CountLinksDeprecated_Handler,
		},
		{
			MethodName: "countLinks",
			Handler:    _Templates_CountLinks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listTemplatesForUserDeprecated",
			Handler:       _Templates_ListTemplatesForUserDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplatesForUser",
			Handler:       _Templates_ListTemplatesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplatesDeprecated",
			Handler:       _Templates_ListTemplatesDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplates",
			Handler:       _Templates_ListTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLocationsDeprecated",
			Handler:       _Templates_ListLocationsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLocations",
			Handler:       _Templates_ListLocations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listBeaconsDeprecated",
			Handler:       _Templates_ListBeaconsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listBeacons",
			Handler:       _Templates_ListBeacons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLinksDeprecated",
			Handler:       _Templates_ListLinksDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLinks",
			Handler:       _Templates_ListLinks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_templates.proto",
}
