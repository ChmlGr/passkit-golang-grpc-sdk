// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/common/pass.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PassObject contains pass-object level details that are common across protocols.
type PassOverrides struct {
	// Image ID's of images to override for this pass
	ImageIds *ImageIds `protobuf:"bytes,1,opt,name=imageIds,proto3" json:"imageIds,omitempty"`
	// A list of up to 10 GPS locations where this pass should be presented on the lock-screen. Overrides any template level values.
	Locations []*GPSLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the pass to be presented on the lock-screen. Overrides any template level values.
	Beacons []*Beacon `protobuf:"bytes,4,rep,name=beacons,proto3" json:"beacons,omitempty"`
	// A list of (personalized) links to be shown on the pass. Overrides any template level values.
	Links                []*Link  `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
	Colors               *Colors  `protobuf:"bytes,6,opt,name=colors,proto3" json:"colors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PassOverrides) Reset()         { *m = PassOverrides{} }
func (m *PassOverrides) String() string { return proto.CompactTextString(m) }
func (*PassOverrides) ProtoMessage()    {}
func (*PassOverrides) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7e1b4d2f709df4, []int{0}
}

func (m *PassOverrides) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassOverrides.Unmarshal(m, b)
}
func (m *PassOverrides) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassOverrides.Marshal(b, m, deterministic)
}
func (m *PassOverrides) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassOverrides.Merge(m, src)
}
func (m *PassOverrides) XXX_Size() int {
	return xxx_messageInfo_PassOverrides.Size(m)
}
func (m *PassOverrides) XXX_DiscardUnknown() {
	xxx_messageInfo_PassOverrides.DiscardUnknown(m)
}

var xxx_messageInfo_PassOverrides proto.InternalMessageInfo

func (m *PassOverrides) GetImageIds() *ImageIds {
	if m != nil {
		return m.ImageIds
	}
	return nil
}

func (m *PassOverrides) GetLocations() []*GPSLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *PassOverrides) GetBeacons() []*Beacon {
	if m != nil {
		return m.Beacons
	}
	return nil
}

func (m *PassOverrides) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PassOverrides) GetColors() *Colors {
	if m != nil {
		return m.Colors
	}
	return nil
}

type PassOptions struct {
	Apple                *AppleWalletSettings `protobuf:"bytes,1,opt,name=apple,proto3" json:"apple,omitempty"`
	Google               *GooglePaySettings   `protobuf:"bytes,2,opt,name=google,proto3" json:"google,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PassOptions) Reset()         { *m = PassOptions{} }
func (m *PassOptions) String() string { return proto.CompactTextString(m) }
func (*PassOptions) ProtoMessage()    {}
func (*PassOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7e1b4d2f709df4, []int{1}
}

func (m *PassOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassOptions.Unmarshal(m, b)
}
func (m *PassOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassOptions.Marshal(b, m, deterministic)
}
func (m *PassOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassOptions.Merge(m, src)
}
func (m *PassOptions) XXX_Size() int {
	return xxx_messageInfo_PassOptions.Size(m)
}
func (m *PassOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PassOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PassOptions proto.InternalMessageInfo

func (m *PassOptions) GetApple() *AppleWalletSettings {
	if m != nil {
		return m.Apple
	}
	return nil
}

func (m *PassOptions) GetGoogle() *GooglePaySettings {
	if m != nil {
		return m.Google
	}
	return nil
}

// Details of pass and pass holder.
type Pass struct {
	// The uuid of the pass.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The class id of the pass which it belongs to.
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty"`
	// Protocol module which this pass was issued by.
	Protocol PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty"`
	// PII data of pass holder.
	PersonDetails *Person `protobuf:"bytes,4,opt,name=personDetails,proto3" json:"personDetails,omitempty"`
	// Pass meta data such as install ip, user agent and other lifecycle data.
	Metadata *Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Holds protocol specific data (e.g. tier points for Membership protocol, flight number for flight protocol)
	RecordData map[string]string `protobuf:"bytes,6,rep,name=recordData,proto3" json:"recordData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Will hold the external id of the object (as set by protocol)
	ExternalId           string   `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pass) Reset()         { *m = Pass{} }
func (m *Pass) String() string { return proto.CompactTextString(m) }
func (*Pass) ProtoMessage()    {}
func (*Pass) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7e1b4d2f709df4, []int{2}
}

func (m *Pass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pass.Unmarshal(m, b)
}
func (m *Pass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pass.Marshal(b, m, deterministic)
}
func (m *Pass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pass.Merge(m, src)
}
func (m *Pass) XXX_Size() int {
	return xxx_messageInfo_Pass.Size(m)
}
func (m *Pass) XXX_DiscardUnknown() {
	xxx_messageInfo_Pass.DiscardUnknown(m)
}

var xxx_messageInfo_Pass proto.InternalMessageInfo

func (m *Pass) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pass) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *Pass) GetProtocol() PassProtocol {
	if m != nil {
		return m.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (m *Pass) GetPersonDetails() *Person {
	if m != nil {
		return m.PersonDetails
	}
	return nil
}

func (m *Pass) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Pass) GetRecordData() map[string]string {
	if m != nil {
		return m.RecordData
	}
	return nil
}

func (m *Pass) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func init() {
	proto.RegisterType((*PassOverrides)(nil), "io.PassOverrides")
	proto.RegisterType((*PassOptions)(nil), "io.PassOptions")
	proto.RegisterType((*Pass)(nil), "io.Pass")
	proto.RegisterMapType((map[string]string)(nil), "io.Pass.RecordDataEntry")
}

func init() {
	proto.RegisterFile("io/common/pass.proto", fileDescriptor_6c7e1b4d2f709df4)
}

var fileDescriptor_6c7e1b4d2f709df4 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xa4, 0xcd, 0xba, 0x53, 0xb6, 0x56, 0xd6, 0xa6, 0x85, 0x5e, 0xa0, 0xaa, 0x42,
	0xa8, 0x17, 0x6d, 0x82, 0x8a, 0x90, 0x26, 0x24, 0x90, 0x56, 0x86, 0x50, 0xd9, 0x10, 0x51, 0x76,
	0x81, 0xc4, 0x9d, 0x97, 0x58, 0xc1, 0x8a, 0x93, 0x13, 0xc5, 0x66, 0xac, 0xaf, 0xc1, 0x13, 0x70,
	0xcd, 0xeb, 0xf0, 0x22, 0x3c, 0x02, 0xb2, 0xf3, 0xa7, 0xe5, 0xcf, 0x4d, 0x15, 0x7f, 0xdf, 0xef,
	0x7c, 0xf6, 0x39, 0x76, 0xe1, 0x84, 0x63, 0x10, 0x63, 0x9e, 0x63, 0x11, 0x94, 0x54, 0x4a, 0xbf,
	0xac, 0x50, 0x21, 0xb1, 0x39, 0x4e, 0xb4, 0xc3, 0x73, 0x9a, 0xb2, 0xfa, 0xb7, 0x76, 0x26, 0xa7,
	0x3b, 0x5e, 0xf0, 0x22, 0x6b, 0x0a, 0x26, 0x67, 0x3b, 0x39, 0x67, 0xaa, 0xe2, 0x71, 0x6b, 0x78,
	0x7b, 0xf9, 0xac, 0x92, 0x58, 0x50, 0xd1, 0x38, 0x0f, 0xf7, 0x1c, 0x2d, 0xc4, 0x28, 0xe4, 0x7f,
	0xad, 0x7b, 0x9e, 0x73, 0xb5, 0xfd, 0x37, 0x4f, 0xb1, 0xbc, 0x14, 0x54, 0xb5, 0x27, 0x5b, 0xd4,
	0x29, 0xcb, 0x94, 0x15, 0x4b, 0xf9, 0x95, 0xa6, 0x29, 0xab, 0x02, 0x2c, 0x15, 0xc7, 0x42, 0x06,
	0xb4, 0x28, 0x50, 0x51, 0xf3, 0x5d, 0xd3, 0xb3, 0x5f, 0x16, 0x1c, 0x85, 0x54, 0xca, 0x0f, 0x77,
	0xac, 0xaa, 0x78, 0xc2, 0x24, 0x99, 0xc3, 0xc0, 0x34, 0xba, 0x49, 0xa4, 0x67, 0x4d, 0xad, 0xf9,
	0x70, 0xf5, 0xc0, 0xe7, 0xe8, 0x6f, 0x1a, 0x2d, 0xea, 0x5c, 0xf2, 0x1c, 0x0e, 0x05, 0xc6, 0x75,
	0x9c, 0xe7, 0x4c, 0x9d, 0xf9, 0x70, 0x35, 0xd2, 0xe8, 0xdb, 0xf0, 0xe6, 0xba, 0xd1, 0xd7, 0xee,
	0xb7, 0x0b, 0xe7, 0xbb, 0x05, 0xd1, 0x8e, 0x24, 0x0b, 0x38, 0xb8, 0x65, 0x34, 0xd6, 0x45, 0x3d,
	0x53, 0x04, 0xba, 0x68, 0x6d, 0xa4, 0x8e, 0x6f, 0x11, 0xf2, 0x04, 0xfa, 0x66, 0xc0, 0x5e, 0xdf,
	0xb0, 0x03, 0xcd, 0x5e, 0xf3, 0x22, 0xeb, 0xc8, 0xda, 0x26, 0x33, 0x70, 0x63, 0x14, 0x58, 0x49,
	0xcf, 0x35, 0x87, 0x36, 0xa1, 0xaf, 0x8d, 0x12, 0x35, 0xce, 0xbb, 0xde, 0xc0, 0x1e, 0x3b, 0xb3,
	0x0c, 0x86, 0xa6, 0xe3, 0x7a, 0x26, 0x64, 0x09, 0x7d, 0x5a, 0x96, 0x82, 0x35, 0xcd, 0x9e, 0xe9,
	0xba, 0x0b, 0x2d, 0x7c, 0xa4, 0x42, 0x30, 0x75, 0xc3, 0x94, 0xe2, 0x45, 0x2a, 0xa3, 0x9a, 0x22,
	0x4b, 0x70, 0x53, 0xc4, 0x54, 0x30, 0xcf, 0x36, 0xfc, 0xa9, 0xe9, 0xd8, 0x28, 0x21, 0xdd, 0x76,
	0x74, 0x03, 0xcd, 0x7e, 0xda, 0xd0, 0xd3, 0xbb, 0x91, 0x63, 0xb0, 0x79, 0x62, 0xf6, 0x38, 0x8c,
	0x6c, 0x9e, 0x10, 0x0f, 0x0e, 0x62, 0x41, 0xa5, 0xdc, 0x24, 0x26, 0xe8, 0x30, 0x6a, 0x97, 0x64,
	0x01, 0x83, 0xf6, 0x21, 0x78, 0xce, 0xd4, 0x9a, 0x1f, 0xaf, 0xc6, 0x7a, 0x0f, 0x9d, 0x12, 0x36,
	0x7a, 0xd4, 0x11, 0xe4, 0x29, 0x1c, 0xd5, 0x0f, 0xea, 0x92, 0x29, 0xca, 0x85, 0x9e, 0x69, 0xd7,
	0x7e, 0x68, 0x8c, 0xe8, 0x4f, 0x40, 0x5f, 0x70, 0xce, 0x14, 0x4d, 0xa8, 0xa2, 0x5e, 0x7f, 0x77,
	0xc1, 0xef, 0x1b, 0x2d, 0xea, 0x5c, 0x72, 0x0e, 0x50, 0xb1, 0x18, 0xab, 0xe4, 0x52, 0xb3, 0xae,
	0xb9, 0x00, 0xaf, 0x3d, 0x8b, 0x1f, 0x75, 0xd6, 0x9b, 0x42, 0x55, 0xdb, 0x68, 0x8f, 0x25, 0x8f,
	0x00, 0xd8, 0xbd, 0x62, 0x55, 0x41, 0xc5, 0x26, 0xf1, 0x0e, 0x4c, 0x83, 0x7b, 0xca, 0xe4, 0x25,
	0x8c, 0xfe, 0x2a, 0x27, 0x63, 0x70, 0x32, 0xb6, 0x6d, 0x26, 0xa4, 0x3f, 0xc9, 0x09, 0xf4, 0xef,
	0xa8, 0xf8, 0xc2, 0x9a, 0x01, 0xd5, 0x8b, 0x17, 0xf6, 0xb9, 0xb5, 0x7e, 0x05, 0x23, 0x8e, 0xbe,
	0xfe, 0xa3, 0x66, 0x5c, 0xf9, 0xe1, 0x15, 0xc7, 0x4f, 0x8f, 0xa5, 0xa2, 0xf2, 0x73, 0xa7, 0xc5,
	0x98, 0x07, 0x1c, 0x83, 0x1c, 0x13, 0x26, 0x02, 0x99, 0x64, 0x41, 0x8a, 0x01, 0xc7, 0x1f, 0x76,
	0x2f, 0xbc, 0xda, 0xe0, 0xad, 0x6b, 0xc6, 0xf7, 0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0x16, 0x33, 0x7d, 0xf6, 0x03, 0x00, 0x00,
}
