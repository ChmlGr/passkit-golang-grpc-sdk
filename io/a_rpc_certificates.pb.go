// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/core/a_rpc_certificates.proto

package io

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("io/core/a_rpc_certificates.proto", fileDescriptor_918e929d7e08b6db)
}

var fileDescriptor_918e929d7e08b6db = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0x80, 0x99, 0x45, 0x14, 0xa3, 0xeb, 0x42, 0x4a, 0xab, 0x9d, 0xee, 0xd6, 0x3a, 0xbb, 0xa0,
	0x16, 0x9c, 0x14, 0xbd, 0xf5, 0x20, 0xb8, 0x5d, 0x17, 0x96, 0x05, 0x29, 0x2a, 0x1e, 0xf6, 0x32,
	0xa6, 0x33, 0xaf, 0x63, 0xdc, 0x69, 0x5e, 0x9c, 0xa4, 0x87, 0x22, 0x5e, 0x44, 0xf0, 0x07, 0xf8,
	0x2f, 0xfc, 0x35, 0x82, 0x7f, 0xc1, 0x1f, 0x22, 0x49, 0xa7, 0xdb, 0x99, 0x75, 0x0a, 0x8a, 0xa7,
	0xc9, 0xe4, 0xe5, 0x7d, 0x5f, 0x5e, 0xf2, 0x42, 0x7a, 0x02, 0x59, 0x8c, 0x39, 0x30, 0x1e, 0xe5,
	0x2a, 0x8e, 0x62, 0xc8, 0x8d, 0x98, 0x8a, 0x98, 0x1b, 0xd0, 0xa1, 0xca, 0xd1, 0x20, 0xdd, 0x12,
	0xe8, 0xef, 0xa6, 0x88, 0x69, 0x06, 0x8c, 0x2b, 0xc1, 0xb8, 0x94, 0x68, 0xb8, 0x11, 0x28, 0x8b,
	0x15, 0x7e, 0xa7, 0x88, 0xba, 0xbf, 0xc9, 0x7c, 0xca, 0x60, 0xa6, 0xcc, 0xa2, 0x08, 0x76, 0x9d,
	0x60, 0x36, 0x43, 0x59, 0x7c, 0x22, 0x9c, 0xbc, 0x87, 0xd8, 0xac, 0x92, 0xdd, 0x06, 0xd6, 0xd6,
	0xf2, 0xb8, 0x58, 0xe1, 0xaf, 0x09, 0x8a, 0xa7, 0x42, 0x3a, 0x77, 0x11, 0x6b, 0xad, 0x63, 0x53,
	0x91, 0x19, 0xc8, 0x97, 0xf3, 0x8f, 0x7f, 0x5c, 0x23, 0x37, 0x47, 0xa5, 0x5a, 0xe8, 0x57, 0x8f,
	0xec, 0xa6, 0x60, 0x4a, 0x73, 0xaf, 0x44, 0x2a, 0x85, 0x4c, 0x5f, 0xc2, 0x87, 0x39, 0x68, 0x43,
	0x5b, 0xe1, 0xb2, 0x8a, 0x70, 0x55, 0x45, 0xf8, 0xdc, 0x56, 0xe1, 0xef, 0x85, 0x02, 0xc3, 0x8d,
	0x69, 0xc1, 0xe0, 0xf3, 0xcf, 0x5f, 0xdf, 0xb6, 0xfa, 0xf4, 0xc1, 0xa6, 0x22, 0x22, 0xbd, 0x4c,
	0x88, 0xf2, 0x42, 0x94, 0x90, 0x06, 0x4f, 0x92, 0x67, 0x4a, 0x65, 0x50, 0xc2, 0xd2, 0x6d, 0xeb,
	0x39, 0x16, 0x19, 0x1c, 0x2e, 0x0c, 0x68, 0xbf, 0x71, 0x49, 0x7b, 0xc4, 0x0d, 0x0f, 0x1e, 0x3a,
	0xd9, 0x7e, 0xd0, 0xad, 0xc8, 0xb8, 0x45, 0x95, 0x6f, 0x6e, 0xe8, 0xf5, 0x69, 0x4a, 0x5a, 0x73,
	0x95, 0x70, 0x03, 0xff, 0x23, 0xf2, 0xff, 0x42, 0x24, 0xc8, 0xed, 0x14, 0xcc, 0x65, 0x8b, 0xa5,
	0xd0, 0x96, 0x45, 0x8f, 0xb9, 0xd6, 0xaf, 0x17, 0x0a, 0x4e, 0x12, 0x90, 0x36, 0x0a, 0x79, 0xbd,
	0xf2, 0x9e, 0x53, 0x76, 0x68, 0xbb, 0xa2, 0xfc, 0xa8, 0x2e, 0xd2, 0x3f, 0xd1, 0x88, 0xdc, 0xcd,
	0x84, 0xfe, 0xc3, 0xa5, 0x8f, 0x40, 0xe5, 0x60, 0x47, 0x09, 0xbd, 0xb5, 0x54, 0xae, 0xba, 0xa4,
	0x5e, 0xd5, 0x74, 0xaa, 0x1d, 0xba, 0x5d, 0x56, 0xe9, 0x81, 0x47, 0xdf, 0x92, 0x66, 0xad, 0x80,
	0xde, 0x28, 0xce, 0xcc, 0x40, 0xbe, 0xe1, 0xc4, 0xf6, 0x1d, 0x73, 0x2f, 0xb8, 0x53, 0x61, 0x2e,
	0x8f, 0x8c, 0x59, 0xe8, 0xd0, 0xeb, 0x0f, 0x3c, 0x7a, 0x46, 0x7a, 0x31, 0xce, 0xe5, 0x3f, 0xd5,
	0x70, 0xdd, 0xf9, 0x6c, 0x56, 0xd0, 0x71, 0x96, 0x26, 0x6d, 0x54, 0x2d, 0x0e, 0x49, 0xdf, 0x90,
	0x56, 0x3d, 0xbb, 0xba, 0xfd, 0x12, 0xee, 0xc0, 0xe1, 0xba, 0x41, 0xbb, 0x6e, 0xd3, 0x8e, 0x65,
	0x6f, 0xf8, 0x8b, 0x47, 0xda, 0x1a, 0x64, 0xf2, 0xe2, 0x78, 0x54, 0x34, 0xff, 0x28, 0x07, 0x77,
	0x9b, 0x3c, 0xd3, 0xb4, 0x67, 0x71, 0xb5, 0xa1, 0xe2, 0x89, 0xf8, 0x1b, 0x5e, 0x56, 0xf0, 0xc8,
	0xd9, 0xef, 0x07, 0x41, 0xd5, 0x2e, 0xa7, 0x31, 0x8b, 0xd7, 0x14, 0x66, 0xd5, 0x43, 0xaf, 0x7f,
	0xf8, 0x94, 0xec, 0x08, 0x0c, 0x6d, 0x3f, 0x9c, 0x0b, 0x13, 0x8e, 0x4f, 0x05, 0x9e, 0x1d, 0x68,
	0xc3, 0xf5, 0xbb, 0x8b, 0xb9, 0x18, 0x67, 0x4c, 0x20, 0x9b, 0x61, 0x02, 0x19, 0xd3, 0xc9, 0x39,
	0x4b, 0x91, 0x09, 0xfc, 0xbe, 0x75, 0x65, 0x7c, 0x7a, 0x82, 0x93, 0xab, 0x4e, 0xff, 0xe4, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xcb, 0xa6, 0xbc, 0xf2, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CertificatesClient is the client API for Certificates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificatesClient interface {
	GetCertificateSigningRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CertificateSigningRequest, error)
	AddAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error)
	UpdateAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error)
	GetAppleCertificateData(ctx context.Context, in *PassTypeIdentifier, opts ...grpc.CallOption) (*CertificateData, error)
	ListAppleCertificatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesDeprecatedClient, error)
	ListAppleCertificates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesClient, error)
	CountAppleCertificatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountAppleCertificates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	SendNFCSigningCredentials(ctx context.Context, in *NFCSigningCredentialsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type certificatesClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificatesClient(cc grpc.ClientConnInterface) CertificatesClient {
	return &certificatesClient{cc}
}

func (c *certificatesClient) GetCertificateSigningRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CertificateSigningRequest, error) {
	out := new(CertificateSigningRequest)
	err := c.cc.Invoke(ctx, "/io.Certificates/getCertificateSigningRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) AddAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/addAppleCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) UpdateAppleCertificate(ctx context.Context, in *FileBytes, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/updateAppleCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) GetAppleCertificateData(ctx context.Context, in *PassTypeIdentifier, opts ...grpc.CallOption) (*CertificateData, error) {
	out := new(CertificateData)
	err := c.cc.Invoke(ctx, "/io.Certificates/getAppleCertificateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) ListAppleCertificatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Certificates_serviceDesc.Streams[0], "/io.Certificates/listAppleCertificatesDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificatesListAppleCertificatesDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Certificates_ListAppleCertificatesDeprecatedClient interface {
	Recv() (*CertificateData, error)
	grpc.ClientStream
}

type certificatesListAppleCertificatesDeprecatedClient struct {
	grpc.ClientStream
}

func (x *certificatesListAppleCertificatesDeprecatedClient) Recv() (*CertificateData, error) {
	m := new(CertificateData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificatesClient) ListAppleCertificates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Certificates_ListAppleCertificatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Certificates_serviceDesc.Streams[1], "/io.Certificates/listAppleCertificates", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificatesListAppleCertificatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Certificates_ListAppleCertificatesClient interface {
	Recv() (*CertificateData, error)
	grpc.ClientStream
}

type certificatesListAppleCertificatesClient struct {
	grpc.ClientStream
}

func (x *certificatesListAppleCertificatesClient) Recv() (*CertificateData, error) {
	m := new(CertificateData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificatesClient) CountAppleCertificatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Certificates/countAppleCertificatesDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) CountAppleCertificates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Certificates/countAppleCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) SendNFCSigningCredentials(ctx context.Context, in *NFCSigningCredentialsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Certificates/sendNFCSigningCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificatesServer is the server API for Certificates service.
type CertificatesServer interface {
	GetCertificateSigningRequest(context.Context, *empty.Empty) (*CertificateSigningRequest, error)
	AddAppleCertificate(context.Context, *FileBytes) (*CertificateData, error)
	UpdateAppleCertificate(context.Context, *FileBytes) (*CertificateData, error)
	GetAppleCertificateData(context.Context, *PassTypeIdentifier) (*CertificateData, error)
	ListAppleCertificatesDeprecated(*Pagination, Certificates_ListAppleCertificatesDeprecatedServer) error
	ListAppleCertificates(*Filters, Certificates_ListAppleCertificatesServer) error
	CountAppleCertificatesDeprecated(context.Context, *Pagination) (*Count, error)
	CountAppleCertificates(context.Context, *Filters) (*Count, error)
	SendNFCSigningCredentials(context.Context, *NFCSigningCredentialsRequest) (*empty.Empty, error)
}

// UnimplementedCertificatesServer can be embedded to have forward compatible implementations.
type UnimplementedCertificatesServer struct {
}

func (*UnimplementedCertificatesServer) GetCertificateSigningRequest(ctx context.Context, req *empty.Empty) (*CertificateSigningRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateSigningRequest not implemented")
}
func (*UnimplementedCertificatesServer) AddAppleCertificate(ctx context.Context, req *FileBytes) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppleCertificate not implemented")
}
func (*UnimplementedCertificatesServer) UpdateAppleCertificate(ctx context.Context, req *FileBytes) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppleCertificate not implemented")
}
func (*UnimplementedCertificatesServer) GetAppleCertificateData(ctx context.Context, req *PassTypeIdentifier) (*CertificateData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppleCertificateData not implemented")
}
func (*UnimplementedCertificatesServer) ListAppleCertificatesDeprecated(req *Pagination, srv Certificates_ListAppleCertificatesDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAppleCertificatesDeprecated not implemented")
}
func (*UnimplementedCertificatesServer) ListAppleCertificates(req *Filters, srv Certificates_ListAppleCertificatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAppleCertificates not implemented")
}
func (*UnimplementedCertificatesServer) CountAppleCertificatesDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppleCertificatesDeprecated not implemented")
}
func (*UnimplementedCertificatesServer) CountAppleCertificates(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppleCertificates not implemented")
}
func (*UnimplementedCertificatesServer) SendNFCSigningCredentials(ctx context.Context, req *NFCSigningCredentialsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNFCSigningCredentials not implemented")
}

func RegisterCertificatesServer(s *grpc.Server, srv CertificatesServer) {
	s.RegisterService(&_Certificates_serviceDesc, srv)
}

func _Certificates_GetCertificateSigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).GetCertificateSigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/GetCertificateSigningRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).GetCertificateSigningRequest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_AddAppleCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).AddAppleCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/AddAppleCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).AddAppleCertificate(ctx, req.(*FileBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_UpdateAppleCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).UpdateAppleCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/UpdateAppleCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).UpdateAppleCertificate(ctx, req.(*FileBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_GetAppleCertificateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTypeIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).GetAppleCertificateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/GetAppleCertificateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).GetAppleCertificateData(ctx, req.(*PassTypeIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_ListAppleCertificatesDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificatesServer).ListAppleCertificatesDeprecated(m, &certificatesListAppleCertificatesDeprecatedServer{stream})
}

type Certificates_ListAppleCertificatesDeprecatedServer interface {
	Send(*CertificateData) error
	grpc.ServerStream
}

type certificatesListAppleCertificatesDeprecatedServer struct {
	grpc.ServerStream
}

func (x *certificatesListAppleCertificatesDeprecatedServer) Send(m *CertificateData) error {
	return x.ServerStream.SendMsg(m)
}

func _Certificates_ListAppleCertificates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificatesServer).ListAppleCertificates(m, &certificatesListAppleCertificatesServer{stream})
}

type Certificates_ListAppleCertificatesServer interface {
	Send(*CertificateData) error
	grpc.ServerStream
}

type certificatesListAppleCertificatesServer struct {
	grpc.ServerStream
}

func (x *certificatesListAppleCertificatesServer) Send(m *CertificateData) error {
	return x.ServerStream.SendMsg(m)
}

func _Certificates_CountAppleCertificatesDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).CountAppleCertificatesDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/CountAppleCertificatesDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).CountAppleCertificatesDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_CountAppleCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).CountAppleCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/CountAppleCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).CountAppleCertificates(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_SendNFCSigningCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFCSigningCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).SendNFCSigningCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Certificates/SendNFCSigningCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).SendNFCSigningCredentials(ctx, req.(*NFCSigningCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Certificates",
	HandlerType: (*CertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCertificateSigningRequest",
			Handler:    _Certificates_GetCertificateSigningRequest_Handler,
		},
		{
			MethodName: "addAppleCertificate",
			Handler:    _Certificates_AddAppleCertificate_Handler,
		},
		{
			MethodName: "updateAppleCertificate",
			Handler:    _Certificates_UpdateAppleCertificate_Handler,
		},
		{
			MethodName: "getAppleCertificateData",
			Handler:    _Certificates_GetAppleCertificateData_Handler,
		},
		{
			MethodName: "countAppleCertificatesDeprecated",
			Handler:    _Certificates_CountAppleCertificatesDeprecated_Handler,
		},
		{
			MethodName: "countAppleCertificates",
			Handler:    _Certificates_CountAppleCertificates_Handler,
		},
		{
			MethodName: "sendNFCSigningCredentials",
			Handler:    _Certificates_SendNFCSigningCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listAppleCertificatesDeprecated",
			Handler:       _Certificates_ListAppleCertificatesDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listAppleCertificates",
			Handler:       _Certificates_ListAppleCertificates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_certificates.proto",
}
