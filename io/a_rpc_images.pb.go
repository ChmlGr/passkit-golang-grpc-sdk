// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/core/a_rpc_images.proto

package io

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("io/core/a_rpc_images.proto", fileDescriptor_1d2a273accdc0530)
}

var fileDescriptor_1d2a273accdc0530 = []byte{
	// 1243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x96, 0xcf, 0x8b, 0x1c, 0x45,
	0x14, 0xc7, 0xa9, 0x8d, 0x6c, 0x48, 0xcd, 0xec, 0x6e, 0x52, 0xd9, 0x1f, 0x49, 0xef, 0x12, 0x8a,
	0x46, 0x0c, 0xae, 0xa6, 0x7b, 0xc8, 0x26, 0x97, 0x20, 0x42, 0x6f, 0x62, 0x64, 0x37, 0x41, 0x97,
	0x35, 0x8b, 0xa0, 0x87, 0x50, 0xd3, 0x5d, 0xd3, 0x53, 0x6e, 0x4f, 0x57, 0x5b, 0x55, 0x9d, 0x65,
	0x13, 0xa2, 0x98, 0xab, 0xa2, 0x30, 0xfe, 0x01, 0x22, 0xf1, 0x62, 0x6e, 0x0a, 0x9e, 0x44, 0x10,
	0x02, 0xfe, 0x03, 0x5e, 0xf4, 0x20, 0x5e, 0x44, 0xbc, 0xa8, 0x47, 0xf5, 0x26, 0x55, 0xd5, 0x3d,
	0xdd, 0xb3, 0xb3, 0x9b, 0x44, 0x9c, 0x43, 0x72, 0x99, 0xa1, 0xaa, 0xde, 0xab, 0xfa, 0x7e, 0xde,
	0x7b, 0x5d, 0xf5, 0xa0, 0xc3, 0xb8, 0x1f, 0x72, 0x41, 0x7d, 0x72, 0x5d, 0x64, 0xe1, 0x75, 0xd6,
	0x23, 0x31, 0x95, 0x5e, 0x26, 0xb8, 0xe2, 0x68, 0x82, 0x71, 0x67, 0x29, 0xe6, 0x3c, 0x4e, 0xa8,
	0x4f, 0x32, 0xe6, 0x93, 0x34, 0xe5, 0x8a, 0x28, 0xc6, 0xd3, 0xc2, 0xc2, 0x59, 0x2c, 0x56, 0xcd,
	0xa8, 0x9d, 0x77, 0x7c, 0xda, 0xcb, 0xd4, 0x6e, 0xb1, 0xf8, 0xbc, 0xf9, 0x0b, 0xcf, 0xc4, 0x34,
	0x3d, 0x23, 0x77, 0x48, 0x1c, 0x53, 0xe1, 0xf3, 0xcc, 0xb8, 0xef, 0xb3, 0xd5, 0x29, 0x23, 0xa4,
	0xd7, 0xe3, 0x69, 0xf1, 0x77, 0x9d, 0xb7, 0xdf, 0xa2, 0xa1, 0x2a, 0xd7, 0x9d, 0x6a, 0x3d, 0x23,
	0x31, 0x4b, 0x8d, 0x73, 0xb1, 0x36, 0xcb, 0xb8, 0x6f, 0x94, 0xdb, 0xdf, 0x62, 0x76, 0xbe, 0xf2,
	0xe8, 0xb0, 0x44, 0x51, 0x61, 0xe7, 0xcf, 0xde, 0x3d, 0x05, 0x27, 0xd7, 0x0c, 0x27, 0x7a, 0x13,
	0xce, 0x48, 0xaa, 0x36, 0x04, 0xef, 0xb0, 0x84, 0x9a, 0x39, 0x34, 0xe7, 0x31, 0xee, 0xd5, 0x67,
	0xd6, 0xd2, 0x2c, 0x57, 0xce, 0xbc, 0x67, 0x51, 0xbd, 0x12, 0xd5, 0x7b, 0x49, 0xa3, 0xba, 0x27,
	0xef, 0x7c, 0xff, 0xcb, 0xc7, 0x13, 0xc7, 0xdd, 0xe9, 0x42, 0x40, 0x66, 0x3d, 0x2f, 0x80, 0x65,
	0xb4, 0x0e, 0x67, 0xe2, 0x3d, 0x9b, 0x1f, 0xb0, 0x8b, 0x73, 0x58, 0x1f, 0xba, 0x25, 0x12, 0x77,
	0xde, 0x6c, 0x77, 0x14, 0xed, 0xd9, 0x0e, 0x5d, 0x84, 0xc7, 0xf7, 0xec, 0xb5, 0xba, 0xbb, 0x16,
	0xa1, 0x49, 0xed, 0xb7, 0x16, 0x55, 0xfe, 0x8b, 0xc6, 0x7f, 0x0e, 0x1d, 0x1f, 0xf6, 0xf7, 0x6f,
	0xb1, 0xe8, 0x36, 0xfa, 0x11, 0xc0, 0x66, 0x28, 0x28, 0x51, 0xb4, 0xc0, 0x9f, 0xd5, 0x6e, 0x17,
	0xab, 0x19, 0x8b, 0xda, 0x34, 0x9b, 0x9a, 0x71, 0x24, 0xdd, 0xcf, 0x40, 0x3f, 0xf8, 0x10, 0xa0,
	0x29, 0x6b, 0x86, 0xad, 0xa7, 0x33, 0x67, 0x87, 0x12, 0x9b, 0x63, 0xb0, 0xa0, 0x21, 0x17, 0x91,
	0xb7, 0xde, 0x82, 0x87, 0xce, 0xb5, 0x5a, 0xe8, 0x59, 0x78, 0xfa, 0x5a, 0x97, 0x0a, 0x8a, 0x99,
	0xc4, 0x04, 0x67, 0x82, 0xb7, 0x13, 0xda, 0xc3, 0x3b, 0x4c, 0x75, 0xb1, 0xea, 0x52, 0xcc, 0xf4,
	0x31, 0x38, 0x22, 0x8a, 0x78, 0xeb, 0xe7, 0xb4, 0xc7, 0x0a, 0x3a, 0x03, 0x9f, 0xdb, 0xa4, 0x2a,
	0x17, 0x29, 0x8d, 0xf0, 0x4e, 0x97, 0xa6, 0xc6, 0x2e, 0x97, 0x54, 0xe0, 0x84, 0x84, 0xdb, 0x12,
	0x93, 0x5c, 0x75, 0xb9, 0x60, 0x37, 0x6d, 0xd6, 0x0d, 0x64, 0xd3, 0x3d, 0x6c, 0x21, 0xa5, 0x0e,
	0xf6, 0xfd, 0x09, 0xd8, 0xc8, 0xb3, 0xa8, 0x24, 0xb1, 0x68, 0x5b, 0xd5, 0x84, 0x45, 0x9b, 0x19,
	0xa0, 0x6d, 0x1a, 0xc5, 0xee, 0x07, 0x13, 0xfd, 0xe0, 0x2f, 0x80, 0x9a, 0xd6, 0xd2, 0xd2, 0x39,
	0x27, 0xec, 0x48, 0x62, 0x92, 0xfe, 0x6f, 0x3e, 0xd7, 0xf2, 0x2d, 0xc2, 0x93, 0x5b, 0x07, 0xd1,
	0xac, 0x9f, 0xd2, 0x36, 0xe7, 0xd0, 0x02, 0x9c, 0xb3, 0xaa, 0xf0, 0x0e, 0x91, 0x38, 0xe5, 0x0a,
	0x77, 0x78, 0x9e, 0x46, 0xde, 0xfa, 0xeb, 0xf0, 0xd0, 0xf9, 0xd6, 0x0a, 0xda, 0x80, 0xaf, 0xbc,
	0x46, 0xc5, 0x0d, 0x2a, 0xf4, 0xb1, 0x79, 0x4a, 0x6e, 0x10, 0x96, 0x90, 0x76, 0x42, 0x3d, 0xbc,
	0x4a, 0xc2, 0x6d, 0xcc, 0x3b, 0x1d, 0xdc, 0xe1, 0x02, 0x9f, 0x3d, 0xdf, 0xea, 0x69, 0xe9, 0x11,
	0x16, 0x34, 0xa3, 0x44, 0x61, 0x41, 0xdf, 0xce, 0xa9, 0x54, 0x38, 0x4f, 0x15, 0x4b, 0xb0, 0xcc,
	0xc3, 0x90, 0x4a, 0xd9, 0xc9, 0x13, 0x1b, 0xc6, 0x86, 0x33, 0x69, 0xc3, 0xa8, 0xa3, 0x78, 0x17,
	0xc0, 0x46, 0x4c, 0x95, 0x09, 0xc3, 0xd6, 0xe6, 0xd5, 0xd1, 0xfa, 0xba, 0x03, 0xfa, 0x41, 0x82,
	0xa6, 0x5e, 0xa6, 0xca, 0xc6, 0x0a, 0x6f, 0x6d, 0x5e, 0x75, 0x16, 0x36, 0xa9, 0x12, 0x8c, 0xde,
	0xa8, 0x47, 0x2c, 0x17, 0xc9, 0x58, 0xe0, 0x8d, 0xc6, 0x29, 0xd4, 0x28, 0xea, 0xd9, 0xd4, 0xf1,
	0xd7, 0x00, 0x4e, 0x97, 0x2a, 0x57, 0xf3, 0x34, 0x4a, 0xe8, 0x40, 0x68, 0x95, 0x60, 0xbb, 0xe0,
	0x7e, 0x04, 0xfa, 0x81, 0x40, 0x47, 0x2b, 0xc1, 0x76, 0xde, 0x71, 0xf6, 0xd1, 0xdc, 0x36, 0x4b,
	0xe3, 0x93, 0x3d, 0x8b, 0x50, 0x21, 0xdb, 0xee, 0x6c, 0xd5, 0x7f, 0x05, 0x60, 0xb3, 0x54, 0x7f,
	0x89, 0x28, 0xb2, 0x8f, 0xf6, 0xa2, 0x38, 0xdf, 0x07, 0xfd, 0x20, 0x43, 0xd3, 0x95, 0x76, 0x6d,
	0xbe, 0xaf, 0xf2, 0xb2, 0x3e, 0xc7, 0xa5, 0x1c, 0xa1, 0xa3, 0x85, 0x72, 0x5d, 0xc5, 0x56, 0xf7,
	0xcf, 0x00, 0xce, 0xc6, 0x54, 0x5d, 0xe5, 0x21, 0x49, 0xd8, 0x4d, 0x1a, 0x0d, 0x8a, 0x64, 0x41,
	0xeb, 0x1e, 0x9e, 0xb6, 0x5f, 0xdb, 0xa0, 0x6a, 0xf4, 0x1d, 0xf2, 0x2e, 0x5a, 0xd0, 0x20, 0x03,
	0xbb, 0x5a, 0xfd, 0xe0, 0x1a, 0x11, 0x4e, 0x06, 0x06, 0xac, 0x34, 0x18, 0x1f, 0xd7, 0x12, 0x72,
	0x6a, 0x85, 0xe4, 0xdf, 0x4a, 0x48, 0x1a, 0xe7, 0x24, 0xa6, 0x17, 0x79, 0x44, 0x6f, 0xa3, 0x2f,
	0x00, 0x6c, 0x44, 0x34, 0xa1, 0xe5, 0x1d, 0x52, 0x26, 0xe6, 0xa0, 0xbb, 0xff, 0x3d, 0xd0, 0x0f,
	0xb6, 0x51, 0xf3, 0x92, 0x71, 0x29, 0xee, 0x8e, 0x05, 0x3b, 0x1a, 0xc9, 0xcd, 0xf8, 0xbe, 0x85,
	0xe5, 0xa1, 0x6f, 0xe1, 0x57, 0x00, 0x67, 0xad, 0xe6, 0xe1, 0x0c, 0x1c, 0x9c, 0x95, 0x91, 0x32,
	0xbb, 0x0b, 0xfa, 0xc1, 0x3b, 0x68, 0xbe, 0xc0, 0xd8, 0x93, 0x20, 0x07, 0x0f, 0x80, 0x46, 0x52,
	0x33, 0x66, 0xb2, 0xa5, 0xe5, 0x07, 0x25, 0xe7, 0x77, 0x00, 0x17, 0x13, 0x26, 0xed, 0x77, 0x23,
	0x2f, 0x73, 0xa1, 0x0f, 0xbb, 0x44, 0x33, 0x41, 0x43, 0xa2, 0x68, 0x84, 0xa6, 0xcd, 0xbb, 0x3d,
	0xe8, 0x0c, 0x46, 0x31, 0xef, 0x81, 0x7e, 0xd0, 0x07, 0xb6, 0x0a, 0x83, 0x24, 0x29, 0x5e, 0x32,
	0x7c, 0x99, 0x0b, 0xac, 0xb7, 0x72, 0x56, 0x6a, 0x55, 0x98, 0x24, 0x16, 0x51, 0x62, 0xa9, 0xb8,
	0xa0, 0x11, 0xce, 0xd3, 0x88, 0x8a, 0xea, 0x51, 0x22, 0x61, 0xc8, 0xf3, 0x54, 0x8d, 0xaf, 0x30,
	0xa7, 0x51, 0xb3, 0x78, 0xcc, 0x7c, 0x7d, 0x40, 0x0b, 0xa0, 0xdf, 0x00, 0x3c, 0x36, 0xc2, 0x8b,
	0x1a, 0x9a, 0xea, 0xb2, 0xe9, 0x66, 0xe4, 0x28, 0xe2, 0x97, 0x8f, 0x33, 0xe2, 0xbc, 0x7b, 0xac,
	0x8e, 0xe8, 0x6b, 0xb8, 0x0b, 0x60, 0xb9, 0x05, 0xd0, 0x4f, 0x00, 0xce, 0x56, 0xa8, 0xff, 0x25,
	0xa7, 0x9f, 0xda, 0xe6, 0xe4, 0x44, 0x09, 0x1c, 0x94, 0x6f, 0x62, 0xd9, 0xa7, 0x78, 0x8f, 0x46,
	0x1c, 0xf2, 0x5e, 0x46, 0xd2, 0xdd, 0xf1, 0xc1, 0x1e, 0x41, 0x65, 0x73, 0xd2, 0x02, 0xe8, 0x07,
	0x00, 0x61, 0xc5, 0xf7, 0x90, 0x1c, 0x7e, 0xfe, 0xb8, 0x22, 0x1d, 0x73, 0x07, 0x25, 0x5a, 0xa5,
	0xee, 0x6f, 0x00, 0xe7, 0x4c, 0x9d, 0x3c, 0x34, 0x77, 0x47, 0x4c, 0xaf, 0xa9, 0x4d, 0xdd, 0xfb,
	0xa0, 0x1f, 0xdc, 0x03, 0xe8, 0x19, 0x33, 0xaa, 0x17, 0x6a, 0xc5, 0xaa, 0x38, 0xbe, 0xd6, 0xa5,
	0xb6, 0x6a, 0x5f, 0xa8, 0x3f, 0x0f, 0xe6, 0x30, 0xcc, 0x3b, 0x0f, 0x2c, 0xde, 0xd3, 0x72, 0xfc,
	0xf8, 0x33, 0x68, 0xaa, 0xc4, 0x37, 0x1a, 0xd0, 0x1f, 0x00, 0x36, 0x6a, 0xe8, 0xc3, 0x69, 0xad,
	0xd1, 0x7e, 0xf7, 0x24, 0xd2, 0x22, 0x77, 0x98, 0x56, 0x37, 0x87, 0xff, 0x00, 0xb8, 0x54, 0x03,
	0x7e, 0xf8, 0x15, 0x5c, 0x0b, 0xc2, 0x37, 0xa0, 0x1f, 0x7c, 0x02, 0x90, 0x3b, 0x12, 0x84, 0x57,
	0x77, 0x74, 0xcb, 0xdf, 0xde, 0xad, 0x02, 0x70, 0xfe, 0xd1, 0x2f, 0xa9, 0xd3, 0x72, 0xfc, 0xd7,
	0xd4, 0xa0, 0x69, 0x2b, 0xae, 0x29, 0x9b, 0xec, 0x3f, 0x01, 0x44, 0xa3, 0xec, 0x07, 0xe6, 0xfc,
	0xdb, 0x27, 0x06, 0x77, 0xc1, 0xdd, 0x07, 0xf7, 0x02, 0x58, 0x5e, 0x7d, 0x11, 0xce, 0x30, 0xee,
	0x65, 0x44, 0xca, 0x6d, 0xa6, 0xbc, 0x8d, 0x2b, 0x8c, 0xbf, 0xf1, 0xb4, 0x54, 0x44, 0x76, 0x07,
	0x73, 0x21, 0xef, 0xf9, 0x8c, 0xfb, 0x3d, 0x1e, 0xd1, 0xc4, 0x97, 0xd1, 0xb6, 0x1f, 0x73, 0x9f,
	0xf1, 0x7b, 0x13, 0x4f, 0x6d, 0x5c, 0x59, 0xe3, 0xed, 0x49, 0xd3, 0x2c, 0xad, 0xfc, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x3b, 0xd5, 0x64, 0x9a, 0x61, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImagesClient is the client API for Images service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImagesClient interface {
	SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProfileImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error)
	GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error)
	UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error)
	GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error)
	GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error)
	DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	ListImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesForUserDeprecatedClient, error)
	ListImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Images_ListImagesForUserClient, error)
	ListImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesDeprecatedClient, error)
	ListImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Images_ListImagesClient, error)
	CountImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CountImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
}

type imagesClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesClient(cc grpc.ClientConnInterface) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Images/setProfileImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getProfileImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getProfileImageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error) {
	out := new(ImageIds)
	err := c.cc.Invoke(ctx, "/io.Images/createImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/updateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error) {
	out := new(ImageBundle)
	err := c.cc.Invoke(ctx, "/io.Images/getImageBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/getImageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/io.Images/getLocalizedImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/io.Images/deleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, "/io.Images/deleteLocalizedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesForUserDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[0], "/io.Images/listImagesForUserDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesForUserDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesForUserDeprecatedClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesForUserDeprecatedClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesForUserDeprecatedClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) ListImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Images_ListImagesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[1], "/io.Images/listImagesForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesForUserClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesForUserClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesForUserClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) ListImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Images_ListImagesDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[2], "/io.Images/listImagesDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesDeprecatedClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesDeprecatedClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesDeprecatedClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) ListImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Images_ListImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[3], "/io.Images/listImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesListImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_ListImagesClient interface {
	Recv() (*ImageRecord, error)
	grpc.ClientStream
}

type imagesListImagesClient struct {
	grpc.ClientStream
}

func (x *imagesListImagesClient) Recv() (*ImageRecord, error) {
	m := new(ImageRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) CountImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImagesDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImagesForUserDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/io.Images/countImagesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServer is the server API for Images service.
type ImagesServer interface {
	SetProfileImage(context.Context, *ProfileImageInput) (*empty.Empty, error)
	GetProfileImage(context.Context, *empty.Empty) (*Url, error)
	GetProfileImageById(context.Context, *Id) (*Url, error)
	CreateImages(context.Context, *CreateImageInput) (*ImageIds, error)
	UpdateImage(context.Context, *UpdateImageInput) (*ImageRecord, error)
	GetImageURL(context.Context, *Id) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(context.Context, *Id) (*ImageBundle, error)
	GetImageData(context.Context, *Id) (*ImageRecord, error)
	GetLocalizedImageURL(context.Context, *LocalizedImageInput) (*Url, error)
	DeleteImage(context.Context, *Id) (*empty.Empty, error)
	DeleteLocalizedImage(context.Context, *LocalizedImageInput) (*ImageRecord, error)
	ListImagesForUserDeprecated(*Pagination, Images_ListImagesForUserDeprecatedServer) error
	ListImagesForUser(*Filters, Images_ListImagesForUserServer) error
	ListImagesDeprecated(*Pagination, Images_ListImagesDeprecatedServer) error
	ListImages(*Filters, Images_ListImagesServer) error
	CountImagesDeprecated(context.Context, *Pagination) (*Count, error)
	CountImages(context.Context, *Filters) (*Count, error)
	CountImagesForUserDeprecated(context.Context, *Pagination) (*Count, error)
	CountImagesForUser(context.Context, *Filters) (*Count, error)
}

// UnimplementedImagesServer can be embedded to have forward compatible implementations.
type UnimplementedImagesServer struct {
}

func (*UnimplementedImagesServer) SetProfileImage(ctx context.Context, req *ProfileImageInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileImage not implemented")
}
func (*UnimplementedImagesServer) GetProfileImage(ctx context.Context, req *empty.Empty) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImage not implemented")
}
func (*UnimplementedImagesServer) GetProfileImageById(ctx context.Context, req *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImageById not implemented")
}
func (*UnimplementedImagesServer) CreateImages(ctx context.Context, req *CreateImageInput) (*ImageIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImages not implemented")
}
func (*UnimplementedImagesServer) UpdateImage(ctx context.Context, req *UpdateImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (*UnimplementedImagesServer) GetImageURL(ctx context.Context, req *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageURL not implemented")
}
func (*UnimplementedImagesServer) GetImageBundle(ctx context.Context, req *Id) (*ImageBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageBundle not implemented")
}
func (*UnimplementedImagesServer) GetImageData(ctx context.Context, req *Id) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageData not implemented")
}
func (*UnimplementedImagesServer) GetLocalizedImageURL(ctx context.Context, req *LocalizedImageInput) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalizedImageURL not implemented")
}
func (*UnimplementedImagesServer) DeleteImage(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedImagesServer) DeleteLocalizedImage(ctx context.Context, req *LocalizedImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalizedImage not implemented")
}
func (*UnimplementedImagesServer) ListImagesForUserDeprecated(req *Pagination, srv Images_ListImagesForUserDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesForUserDeprecated not implemented")
}
func (*UnimplementedImagesServer) ListImagesForUser(req *Filters, srv Images_ListImagesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesForUser not implemented")
}
func (*UnimplementedImagesServer) ListImagesDeprecated(req *Pagination, srv Images_ListImagesDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesDeprecated not implemented")
}
func (*UnimplementedImagesServer) ListImages(req *Filters, srv Images_ListImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (*UnimplementedImagesServer) CountImagesDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesDeprecated not implemented")
}
func (*UnimplementedImagesServer) CountImages(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImages not implemented")
}
func (*UnimplementedImagesServer) CountImagesForUserDeprecated(ctx context.Context, req *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesForUserDeprecated not implemented")
}
func (*UnimplementedImagesServer) CountImagesForUser(ctx context.Context, req *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesForUser not implemented")
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

func _Images_SetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).SetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/SetProfileImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).SetProfileImage(ctx, req.(*ProfileImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetProfileImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetProfileImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImageById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CreateImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateImages(ctx, req.(*CreateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).UpdateImage(ctx, req.(*UpdateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageURL(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageBundle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetImageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageData(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetLocalizedImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/GetLocalizedImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteImage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteLocalizedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/DeleteLocalizedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListImagesForUserDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesForUserDeprecated(m, &imagesListImagesForUserDeprecatedServer{stream})
}

type Images_ListImagesForUserDeprecatedServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesForUserDeprecatedServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesForUserDeprecatedServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_ListImagesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesForUser(m, &imagesListImagesForUserServer{stream})
}

type Images_ListImagesForUserServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesForUserServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesForUserServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_ListImagesDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesDeprecated(m, &imagesListImagesDeprecatedServer{stream})
}

type Images_ListImagesDeprecatedServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesDeprecatedServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesDeprecatedServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_ListImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImages(m, &imagesListImagesServer{stream})
}

type Images_ListImagesServer interface {
	Send(*ImageRecord) error
	grpc.ServerStream
}

type imagesListImagesServer struct {
	grpc.ServerStream
}

func (x *imagesListImagesServer) Send(m *ImageRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_CountImagesDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImagesDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImages(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImagesForUserDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesForUserDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImagesForUserDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesForUserDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Images/CountImagesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesForUser(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setProfileImage",
			Handler:    _Images_SetProfileImage_Handler,
		},
		{
			MethodName: "getProfileImage",
			Handler:    _Images_GetProfileImage_Handler,
		},
		{
			MethodName: "getProfileImageById",
			Handler:    _Images_GetProfileImageById_Handler,
		},
		{
			MethodName: "createImages",
			Handler:    _Images_CreateImages_Handler,
		},
		{
			MethodName: "updateImage",
			Handler:    _Images_UpdateImage_Handler,
		},
		{
			MethodName: "getImageURL",
			Handler:    _Images_GetImageURL_Handler,
		},
		{
			MethodName: "getImageBundle",
			Handler:    _Images_GetImageBundle_Handler,
		},
		{
			MethodName: "getImageData",
			Handler:    _Images_GetImageData_Handler,
		},
		{
			MethodName: "getLocalizedImageURL",
			Handler:    _Images_GetLocalizedImageURL_Handler,
		},
		{
			MethodName: "deleteImage",
			Handler:    _Images_DeleteImage_Handler,
		},
		{
			MethodName: "deleteLocalizedImage",
			Handler:    _Images_DeleteLocalizedImage_Handler,
		},
		{
			MethodName: "countImagesDeprecated",
			Handler:    _Images_CountImagesDeprecated_Handler,
		},
		{
			MethodName: "countImages",
			Handler:    _Images_CountImages_Handler,
		},
		{
			MethodName: "countImagesForUserDeprecated",
			Handler:    _Images_CountImagesForUserDeprecated_Handler,
		},
		{
			MethodName: "countImagesForUser",
			Handler:    _Images_CountImagesForUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listImagesForUserDeprecated",
			Handler:       _Images_ListImagesForUserDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImagesForUser",
			Handler:       _Images_ListImagesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImagesDeprecated",
			Handler:       _Images_ListImagesDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImages",
			Handler:       _Images_ListImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_images.proto",
}
