// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/common/filter.proto

package io

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Operator int32

const (
	// Join grouped filter fields with AND operator. E.g. tier_id = bronze AND tier_id = silver. The default.
	Operator_AND Operator = 0
	// Join grouped filter fields with OR operator. E.g. tier_id = bronze OR tier_id = silver.
	Operator_OR Operator = 1
)

var Operator_name = map[int32]string{
	0: "AND",
	1: "OR",
}

var Operator_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x Operator) String() string {
	return proto.EnumName(Operator_name, int32(x))
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eadbf5048cd9cde2, []int{0}
}

type Filters struct {
	// Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Allows you to offset the first record returned by the limit.
	Offset       int32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	FilterGroups []*FilterGroup `protobuf:"bytes,3,rep,name=filterGroups,proto3" json:"filterGroups,omitempty"`
	// Field to order results by.
	OrderBy string `protobuf:"bytes,4,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	// Will return in ascending order if true, or descending order if false.
	OrderAsc             bool     `protobuf:"varint,5,opt,name=orderAsc,proto3" json:"orderAsc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filters) Reset()         { *m = Filters{} }
func (m *Filters) String() string { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()    {}
func (*Filters) Descriptor() ([]byte, []int) {
	return fileDescriptor_eadbf5048cd9cde2, []int{0}
}

func (m *Filters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filters.Unmarshal(m, b)
}
func (m *Filters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filters.Marshal(b, m, deterministic)
}
func (m *Filters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filters.Merge(m, src)
}
func (m *Filters) XXX_Size() int {
	return xxx_messageInfo_Filters.Size(m)
}
func (m *Filters) XXX_DiscardUnknown() {
	xxx_messageInfo_Filters.DiscardUnknown(m)
}

var xxx_messageInfo_Filters proto.InternalMessageInfo

func (m *Filters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Filters) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Filters) GetFilterGroups() []*FilterGroup {
	if m != nil {
		return m.FilterGroups
	}
	return nil
}

func (m *Filters) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *Filters) GetOrderAsc() bool {
	if m != nil {
		return m.OrderAsc
	}
	return false
}

type FieldFilter struct {
	// Column name to filter results by.
	// @tag: validateGeneric:"required"
	FilterField string `protobuf:"bytes,1,opt,name=filterField,proto3" json:"filterField,omitempty" validateGeneric:"required"`
	// Values to test against the filter fields.
	// @tag: validateGeneric:"required"
	FilterValue string `protobuf:"bytes,2,opt,name=filterValue,proto3" json:"filterValue,omitempty" validateGeneric:"required"`
	// Operator (e.g. eq, gt, gte, lt, lte, like)
	// @tag: validateGeneric:"required"
	FilterOperator       string   `protobuf:"bytes,3,opt,name=filterOperator,proto3" json:"filterOperator,omitempty" validateGeneric:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldFilter) Reset()         { *m = FieldFilter{} }
func (m *FieldFilter) String() string { return proto.CompactTextString(m) }
func (*FieldFilter) ProtoMessage()    {}
func (*FieldFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_eadbf5048cd9cde2, []int{1}
}

func (m *FieldFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldFilter.Unmarshal(m, b)
}
func (m *FieldFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldFilter.Marshal(b, m, deterministic)
}
func (m *FieldFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldFilter.Merge(m, src)
}
func (m *FieldFilter) XXX_Size() int {
	return xxx_messageInfo_FieldFilter.Size(m)
}
func (m *FieldFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FieldFilter proto.InternalMessageInfo

func (m *FieldFilter) GetFilterField() string {
	if m != nil {
		return m.FilterField
	}
	return ""
}

func (m *FieldFilter) GetFilterValue() string {
	if m != nil {
		return m.FilterValue
	}
	return ""
}

func (m *FieldFilter) GetFilterOperator() string {
	if m != nil {
		return m.FilterOperator
	}
	return ""
}

type FilterGroup struct {
	// Use AND or OR conditions to join each filter field. E.g. (tier_id = bronze AND tier_id = silver) (tier_id = bronze OR tier_id = silver)
	Condition Operator `protobuf:"varint,1,opt,name=condition,proto3,enum=io.Operator" json:"condition,omitempty"`
	// Filter fields.
	FieldFilters         []*FieldFilter `protobuf:"bytes,2,rep,name=fieldFilters,proto3" json:"fieldFilters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FilterGroup) Reset()         { *m = FilterGroup{} }
func (m *FilterGroup) String() string { return proto.CompactTextString(m) }
func (*FilterGroup) ProtoMessage()    {}
func (*FilterGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_eadbf5048cd9cde2, []int{2}
}

func (m *FilterGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterGroup.Unmarshal(m, b)
}
func (m *FilterGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterGroup.Marshal(b, m, deterministic)
}
func (m *FilterGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterGroup.Merge(m, src)
}
func (m *FilterGroup) XXX_Size() int {
	return xxx_messageInfo_FilterGroup.Size(m)
}
func (m *FilterGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterGroup.DiscardUnknown(m)
}

var xxx_messageInfo_FilterGroup proto.InternalMessageInfo

func (m *FilterGroup) GetCondition() Operator {
	if m != nil {
		return m.Condition
	}
	return Operator_AND
}

func (m *FilterGroup) GetFieldFilters() []*FieldFilter {
	if m != nil {
		return m.FieldFilters
	}
	return nil
}

func init() {
	proto.RegisterEnum("io.Operator", Operator_name, Operator_value)
	proto.RegisterType((*Filters)(nil), "io.Filters")
	proto.RegisterType((*FieldFilter)(nil), "io.FieldFilter")
	proto.RegisterType((*FilterGroup)(nil), "io.FilterGroup")
}

func init() {
	proto.RegisterFile("io/common/filter.proto", fileDescriptor_eadbf5048cd9cde2)
}

var fileDescriptor_eadbf5048cd9cde2 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6b, 0xdb, 0x40,
	0x10, 0xc5, 0x2b, 0x39, 0xfe, 0x37, 0x0e, 0x49, 0x58, 0x4a, 0x10, 0xe9, 0x65, 0x31, 0xa5, 0x18,
	0xd3, 0x68, 0xc1, 0xb9, 0xf5, 0x50, 0x70, 0x28, 0x0e, 0x25, 0xd0, 0x18, 0x41, 0x5b, 0xc8, 0x6d,
	0x2b, 0x8d, 0x95, 0x21, 0x92, 0x46, 0xec, 0xae, 0x5b, 0xf2, 0x35, 0xfa, 0x31, 0xfa, 0x21, 0x4b,
	0xc9, 0x6e, 0x2c, 0x27, 0xbd, 0xcd, 0xfb, 0xe9, 0x69, 0xe6, 0xe9, 0x21, 0x38, 0x25, 0x56, 0x39,
	0xd7, 0x35, 0x37, 0x6a, 0x43, 0x95, 0x43, 0x93, 0xb6, 0x86, 0x1d, 0x8b, 0x98, 0xf8, 0xec, 0xbd,
	0x1f, 0xf3, 0xf3, 0x12, 0x9b, 0x73, 0xfb, 0x4b, 0x97, 0x25, 0x1a, 0xc5, 0xad, 0x23, 0x6e, 0xac,
	0xd2, 0x4d, 0xc3, 0x4e, 0xfb, 0x39, 0xbc, 0x31, 0xfd, 0x1b, 0xc1, 0x70, 0xe5, 0x57, 0x58, 0xf1,
	0x1a, 0xfa, 0x15, 0xd5, 0xe4, 0x92, 0x48, 0x46, 0xb3, 0x7e, 0x16, 0x84, 0x38, 0x85, 0x01, 0x6f,
	0x36, 0x16, 0x5d, 0x12, 0x7b, 0xfc, 0xa4, 0xc4, 0x05, 0x1c, 0x86, 0xdb, 0x57, 0x86, 0xb7, 0xad,
	0x4d, 0x7a, 0xb2, 0x37, 0x9b, 0x2c, 0x8e, 0x53, 0xe2, 0x74, 0xb5, 0xe7, 0xd9, 0x0b, 0x93, 0x48,
	0x60, 0xc8, 0xa6, 0x40, 0x73, 0xf9, 0x90, 0x1c, 0xc8, 0x68, 0x36, 0xce, 0x76, 0x52, 0x9c, 0xc1,
	0xc8, 0x8f, 0x4b, 0x9b, 0x27, 0x7d, 0x19, 0xcd, 0x46, 0x59, 0xa7, 0x3f, 0xdc, 0xfe, 0x5e, 0x7e,
	0x87, 0xaf, 0x73, 0x58, 0xeb, 0x92, 0x1a, 0x1f, 0x7f, 0x71, 0xf5, 0x14, 0x5a, 0xea, 0xb6, 0xad,
	0x08, 0xad, 0xac, 0xb7, 0x95, 0xa3, 0xb6, 0x42, 0x19, 0xee, 0xc9, 0x9c, 0x9b, 0x82, 0xfc, 0x97,
	0x4a, 0xc7, 0xd2, 0xa0, 0x33, 0x84, 0x3f, 0x51, 0xd6, 0xda, 0xe5, 0x77, 0x58, 0x48, 0x83, 0x39,
	0x9b, 0xc2, 0xa6, 0xd3, 0x07, 0x98, 0xac, 0x08, 0xab, 0x22, 0xec, 0x13, 0x12, 0x26, 0x61, 0x81,
	0x87, 0xbe, 0x89, 0x71, 0xf6, 0x1c, 0xed, 0x1d, 0xdf, 0x74, 0xb5, 0x45, 0x5f, 0x4a, 0xe7, 0xf0,
	0x48, 0xbc, 0x83, 0xa3, 0x20, 0x6f, 0x5a, 0x34, 0xda, 0xb1, 0x49, 0x7a, 0xde, 0xf4, 0x1f, 0x9d,
	0x36, 0x8f, 0xa7, 0xbb, 0x72, 0xc4, 0x1c, 0xc6, 0x5d, 0x68, 0x7f, 0xf8, 0x68, 0x71, 0xf8, 0xd8,
	0xe6, 0xce, 0x9f, 0xed, 0x1f, 0x87, 0xf2, 0xbb, 0xd4, 0x36, 0x89, 0x9f, 0x97, 0xdf, 0xf1, 0xec,
	0x85, 0x69, 0xfe, 0x06, 0x46, 0xbb, 0x5d, 0x62, 0x08, 0xbd, 0xe5, 0x97, 0x4f, 0x27, 0xaf, 0xc4,
	0x00, 0xe2, 0x9b, 0xec, 0x24, 0xba, 0xfc, 0x08, 0xc7, 0xc4, 0x69, 0xab, 0xad, 0xbd, 0x27, 0x97,
	0xae, 0xaf, 0x89, 0x6f, 0xdf, 0x5a, 0xa7, 0xed, 0x5d, 0xc7, 0x72, 0xae, 0x15, 0xb1, 0xaa, 0xb9,
	0xc0, 0x4a, 0xd9, 0xe2, 0x5e, 0x95, 0xac, 0x88, 0xff, 0xc4, 0x07, 0xeb, 0xeb, 0xcf, 0xfc, 0x63,
	0xe0, 0xff, 0xa7, 0x8b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x87, 0x30, 0x97, 0x9b, 0x02,
	0x00, 0x00,
}
