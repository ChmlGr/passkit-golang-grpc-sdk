// Code generated by protoc-gen-go. DO NOT EDIT.
// source: io/member/a_rpc.proto

package members

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	io "stash.passkit.com/io/model/sdk/go/io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("io/member/a_rpc.proto", fileDescriptor_da1df6aaaa6a1ffb)
}

var fileDescriptor_da1df6aaaa6a1ffb = []byte{
	// 2604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5b, 0x6c, 0x1d, 0x47,
	0x19, 0x66, 0x5c, 0x9a, 0x34, 0xe3, 0x38, 0x49, 0xd7, 0xb1, 0x5d, 0xaf, 0xd3, 0x76, 0x7a, 0xb8,
	0xa5, 0xa6, 0x3e, 0xc7, 0xcd, 0x45, 0x2a, 0x4e, 0x69, 0xbb, 0x71, 0xdc, 0xe0, 0x24, 0x6d, 0x5c,
	0x3b, 0xa5, 0xa8, 0x6d, 0x5a, 0xcd, 0xd9, 0xfd, 0xcf, 0x39, 0x53, 0xef, 0xd9, 0xd9, 0xee, 0xcc,
	0xda, 0x39, 0x54, 0x96, 0x4a, 0x41, 0x7d, 0x01, 0x84, 0x58, 0x2a, 0x21, 0x01, 0x42, 0xc0, 0x03,
	0x0f, 0xf4, 0xa9, 0x42, 0x2a, 0x12, 0x12, 0x55, 0x5f, 0x78, 0x43, 0x08, 0x81, 0xc4, 0x03, 0xe2,
	0x09, 0x21, 0x2e, 0xe2, 0x91, 0x67, 0x24, 0x34, 0x97, 0xbd, 0x9c, 0x8b, 0x6d, 0xe2, 0x88, 0x3e,
	0x1d, 0xef, 0xdc, 0xfe, 0xef, 0x9b, 0xf9, 0xff, 0xef, 0xff, 0x67, 0x8c, 0xa7, 0x18, 0x6f, 0x74,
	0xa1, 0xdb, 0x84, 0xa4, 0x41, 0x5f, 0x4d, 0x62, 0xbf, 0x1e, 0x27, 0x5c, 0x72, 0xe7, 0xb0, 0x69,
	0x13, 0xee, 0xa9, 0x36, 0xe7, 0xed, 0x10, 0x1a, 0x34, 0x66, 0x0d, 0x1a, 0x45, 0x5c, 0x52, 0xc9,
	0x78, 0x24, 0xcc, 0x30, 0x77, 0xce, 0xf6, 0xea, 0xaf, 0x66, 0xda, 0x6a, 0x40, 0x37, 0x96, 0x3d,
	0xdb, 0xf9, 0x00, 0xe3, 0x0d, 0x9f, 0x77, 0xbb, 0x3c, 0xb2, 0x3f, 0xaf, 0xf2, 0xe6, 0x6b, 0xe0,
	0xcb, 0x7c, 0xf2, 0x4c, 0xd9, 0xdf, 0x05, 0x21, 0x68, 0x1b, 0x6c, 0x87, 0x5b, 0x76, 0xc4, 0xb4,
	0xcd, 0x22, 0x6d, 0xd2, 0xf6, 0x4d, 0x97, 0x7d, 0x2d, 0x16, 0x4a, 0x48, 0x2a, 0xed, 0x96, 0x87,
	0xf9, 0xa9, 0x18, 0xb1, 0xed, 0x71, 0xc2, 0xdb, 0x09, 0xed, 0xda, 0x8e, 0x93, 0x65, 0x87, 0x64,
	0xc5, 0xf0, 0x47, 0xf4, 0x8f, 0xbf, 0xd0, 0x86, 0x68, 0x41, 0x6c, 0xd3, 0x76, 0x1b, 0x92, 0x06,
	0x8f, 0x35, 0xe5, 0x61, 0xfa, 0x67, 0xfe, 0xf3, 0x28, 0x3e, 0xfc, 0x8c, 0xd9, 0x28, 0x67, 0x07,
	0x4f, 0xf8, 0x09, 0x50, 0x09, 0x6b, 0xc6, 0x8c, 0x73, 0xa2, 0x6e, 0xf7, 0xb0, 0x6e, 0x5b, 0xdc,
	0x43, 0x75, 0xc6, 0xeb, 0xab, 0x41, 0x6d, 0x3d, 0xf3, 0xce, 0xe1, 0x7b, 0x6c, 0xab, 0x70, 0x8e,
	0x2d, 0xeb, 0x79, 0x24, 0x1f, 0x76, 0x9f, 0xf9, 0x16, 0x84, 0x12, 0x0b, 0x99, 0x24, 0xe0, 0xf3,
	0x24, 0x78, 0xeb, 0x0f, 0x7f, 0xfd, 0xce, 0xd8, 0x54, 0xed, 0x84, 0xc5, 0x2d, 0x72, 0x46, 0x4b,
	0x68, 0xde, 0xf9, 0x36, 0xc2, 0x13, 0x69, 0x1c, 0xec, 0x69, 0x7f, 0xa8, 0xa5, 0xf6, 0x72, 0xe6,
	0x3d, 0x51, 0x45, 0xf2, 0xbc, 0x5e, 0xa1, 0x40, 0x52, 0x33, 0xdf, 0x82, 0xd0, 0x88, 0xc0, 0x2d,
	0x26, 0x24, 0x8b, 0xda, 0x23, 0x31, 0xb9, 0x23, 0x31, 0xbd, 0x89, 0x30, 0x6e, 0x83, 0xcc, 0x01,
	0x59, 0xfa, 0x23, 0x60, 0x7c, 0x29, 0xf3, 0x1e, 0xab, 0xc0, 0x18, 0xbf, 0x0c, 0xb2, 0xc0, 0xf0,
	0xe0, 0x65, 0x90, 0xfb, 0x02, 0x98, 0x71, 0xa6, 0x06, 0x01, 0x34, 0xde, 0x60, 0xc1, 0x8e, 0x93,
	0x21, 0x3c, 0xee, 0xf3, 0xb8, 0x97, 0x63, 0x98, 0x1b, 0xb4, 0xbd, 0xcc, 0xe3, 0xde, 0x3a, 0xbc,
	0x9e, 0x82, 0x90, 0xc5, 0xf9, 0xbc, 0x92, 0x79, 0x17, 0x2a, 0x70, 0x8e, 0xaa, 0x31, 0x05, 0x9e,
	0x87, 0x96, 0x79, 0xcc, 0xf6, 0xdf, 0x12, 0xb7, 0x36, 0x8c, 0x48, 0x01, 0x51, 0xfb, 0xf2, 0xce,
	0x18, 0x9e, 0x08, 0x20, 0x84, 0xf2, 0xac, 0xf2, 0xad, 0x99, 0xae, 0x9b, 0x80, 0xaa, 0xe7, 0x01,
	0x55, 0x5f, 0x51, 0x01, 0x55, 0xfb, 0x0b, 0xca, 0xbc, 0x0f, 0x50, 0xf5, 0xa4, 0x2e, 0xe9, 0xf9,
	0x05, 0xaa, 0x1f, 0x23, 0xd3, 0xb0, 0x17, 0xae, 0x3a, 0xd1, 0x63, 0x54, 0x47, 0xd5, 0xb3, 0x44,
	0x1a, 0x4a, 0x41, 0x58, 0x44, 0x68, 0x18, 0x12, 0x15, 0x0a, 0xe2, 0x11, 0x42, 0xa3, 0x80, 0x58,
	0xf4, 0x24, 0x8d, 0x02, 0x48, 0x22, 0xa0, 0xb2, 0x43, 0x98, 0x24, 0x4d, 0x50, 0xf3, 0x59, 0xb4,
	0x45, 0x43, 0xa6, 0x7c, 0x23, 0xd0, 0x63, 0x13, 0xe8, 0xf2, 0x2d, 0x08, 0xea, 0xe4, 0x59, 0x80,
	0x40, 0x10, 0xc9, 0x49, 0x13, 0x48, 0x2a, 0x20, 0x20, 0xdb, 0x4c, 0x76, 0x88, 0x4f, 0x13, 0xa8,
	0x9b, 0x6d, 0x99, 0x1f, 0x7d, 0x50, 0x6a, 0x5b, 0x3e, 0x44, 0x78, 0x3a, 0x64, 0x22, 0xf7, 0x17,
	0x71, 0x09, 0xe2, 0x04, 0x7c, 0x65, 0xc3, 0x39, 0xa6, 0xf6, 0x67, 0xad, 0xd0, 0x82, 0x11, 0x2e,
	0xf4, 0x15, 0x94, 0x79, 0x50, 0xd9, 0x20, 0xf7, 0x1a, 0x13, 0x85, 0x13, 0x09, 0xf2, 0xd2, 0xa5,
	0x95, 0xb5, 0xf5, 0x95, 0x65, 0xef, 0xc6, 0xca, 0xa5, 0x9b, 0xee, 0xe7, 0x2b, 0x5f, 0x4b, 0xe4,
	0xfa, 0x3a, 0xe1, 0x31, 0x24, 0x54, 0xf2, 0x84, 0x30, 0x41, 0x22, 0x2e, 0x89, 0x48, 0xe3, 0x98,
	0x27, 0x12, 0x82, 0x9b, 0x44, 0x2d, 0x23, 0xf4, 0xd6, 0x58, 0xb8, 0x42, 0xf3, 0x98, 0x74, 0xee,
	0x1d, 0xe4, 0x21, 0x16, 0x91, 0xf3, 0x16, 0xc2, 0x47, 0xab, 0x14, 0x9c, 0x71, 0x05, 0xfc, 0x69,
	0x2d, 0x54, 0x62, 0x04, 0xea, 0xe7, 0x32, 0x6f, 0xa1, 0x02, 0x7a, 0xa2, 0x0f, 0xb4, 0xeb, 0xec,
	0x62, 0x7c, 0xae, 0x36, 0x3d, 0x64, 0xbc, 0xa1, 0xcc, 0x2e, 0xa1, 0xf9, 0x45, 0xe4, 0x74, 0x30,
	0x36, 0x4a, 0x74, 0x83, 0x41, 0xe2, 0x4c, 0x14, 0x46, 0xd5, 0x67, 0xe1, 0xe3, 0xcb, 0x99, 0x77,
	0x1a, 0xdf, 0xad, 0x9a, 0x84, 0x33, 0x6e, 0x05, 0x48, 0x0f, 0x70, 0x4a, 0xf5, 0x89, 0x60, 0x5b,
	0x3b, 0x84, 0x36, 0xea, 0xd4, 0x26, 0x0a, 0xa3, 0xaa, 0x51, 0x9d, 0xd8, 0x16, 0xc6, 0x46, 0x73,
	0x46, 0x59, 0xea, 0xff, 0xac, 0x5d, 0xc9, 0xbc, 0x46, 0x61, 0xd0, 0xea, 0x8c, 0x1e, 0x37, 0x5b,
	0x88, 0x8c, 0x36, 0x46, 0x9a, 0x3d, 0xf3, 0xcb, 0x4c, 0x20, 0x39, 0xee, 0xb0, 0xdd, 0xef, 0x22,
	0x7c, 0xb8, 0x0d, 0x52, 0x5b, 0x9d, 0xed, 0x33, 0x63, 0x43, 0x79, 0x35, 0x8a, 0x53, 0x39, 0x88,
	0xa0, 0x99, 0x79, 0xe7, 0x73, 0x04, 0xf7, 0x28, 0x89, 0xd1, 0xe6, 0x6b, 0xea, 0xaf, 0xd2, 0x74,
	0x1e, 0x17, 0xca, 0xab, 0x2d, 0x0c, 0xb3, 0xe9, 0x9f, 0x74, 0x6a, 0x7d, 0x38, 0x1a, 0x6f, 0xd8,
	0xa1, 0xab, 0xc1, 0x4e, 0xe3, 0x0d, 0xd5, 0xb2, 0x1a, 0xec, 0x38, 0x7f, 0x44, 0x18, 0x9b, 0xd0,
	0xde, 0x0f, 0xdc, 0x6e, 0xa1, 0xfe, 0x0e, 0xca, 0xbc, 0xa0, 0xd8, 0x28, 0x1b, 0xe6, 0x1a, 0xe9,
	0xb3, 0x45, 0x88, 0x1b, 0x64, 0xd5, 0x20, 0xdd, 0xee, 0xa8, 0x90, 0x0b, 0x79, 0xd4, 0x56, 0xc1,
	0x27, 0x3b, 0xa0, 0x87, 0xec, 0x1f, 0x8f, 0x9f, 0x99, 0xff, 0x1f, 0x58, 0xa9, 0x2d, 0xff, 0x15,
	0xc2, 0x93, 0xca, 0xc5, 0x34, 0xae, 0x4a, 0x64, 0x3e, 0x50, 0x30, 0x54, 0xce, 0x6a, 0x19, 0x96,
	0xfd, 0x83, 0x67, 0x90, 0x66, 0xde, 0xcb, 0x39, 0xb9, 0x19, 0xed, 0xed, 0xfa, 0xef, 0xfe, 0xf8,
	0x5c, 0x3a, 0x50, 0x7c, 0x6a, 0xe9, 0xd2, 0xa4, 0x4e, 0x38, 0xc7, 0xfa, 0x48, 0xa9, 0xc8, 0x7c,
	0x0f, 0xe1, 0x23, 0x05, 0x7e, 0xe7, 0xe4, 0x28, 0xd4, 0x83, 0x58, 0x77, 0x3e, 0x0a, 0xac, 0xf7,
	0xd5, 0x26, 0xfb, 0xb1, 0x56, 0x02, 0x39, 0xc5, 0xe3, 0x10, 0x25, 0x3c, 0x34, 0x25, 0x86, 0x73,
	0xbc, 0x80, 0x67, 0x1a, 0x8a, 0x58, 0x7e, 0x26, 0xf3, 0x16, 0xcb, 0x42, 0xe4, 0xc4, 0x8a, 0x9a,
	0xa3, 0x83, 0xd7, 0x8e, 0x9b, 0xd4, 0x2d, 0x79, 0x44, 0x9b, 0x45, 0xb4, 0xf1, 0x93, 0xb5, 0xe3,
	0x85, 0x71, 0xf3, 0xab, 0x8e, 0xfa, 0x03, 0x84, 0xef, 0xad, 0xd8, 0x5d, 0x4b, 0x9b, 0x21, 0xf3,
	0x77, 0xb7, 0xfe, 0x2d, 0x94, 0x79, 0x9b, 0xa5, 0xf9, 0xd9, 0x41, 0xf3, 0xe4, 0x74, 0xac, 0x57,
	0x78, 0xd8, 0x5d, 0x19, 0x81, 0x83, 0xb0, 0xc8, 0x3a, 0x6c, 0x00, 0x2d, 0x9a, 0x86, 0xd2, 0xf8,
	0x36, 0x6f, 0x55, 0x72, 0x94, 0xec, 0x50, 0xa9, 0xb6, 0xd3, 0xac, 0x33, 0x24, 0x81, 0x79, 0x79,
	0xa7, 0x7b, 0x15, 0x81, 0x1f, 0x22, 0x3c, 0xd9, 0x06, 0x69, 0xcc, 0xaf, 0xeb, 0xdc, 0x77, 0xb1,
	0xb7, 0x1a, 0x14, 0x59, 0x76, 0x90, 0x4a, 0x2d, 0xca, 0xbc, 0x6b, 0x25, 0x03, 0x55, 0x71, 0xe4,
	0xe8, 0x4c, 0xe6, 0x54, 0xc2, 0xb0, 0x46, 0x85, 0xb8, 0xca, 0x24, 0x59, 0xbd, 0xe4, 0x12, 0x5d,
	0x92, 0xec, 0x31, 0x42, 0x43, 0x9c, 0x75, 0x66, 0x06, 0x21, 0xb2, 0xc0, 0x54, 0x25, 0x7f, 0x47,
	0x78, 0x6e, 0x08, 0xe0, 0xca, 0x2d, 0x09, 0x49, 0x44, 0xc3, 0xd5, 0xc0, 0x39, 0x3d, 0x00, 0x70,
	0x78, 0x48, 0xee, 0xb2, 0x43, 0x54, 0xbe, 0x81, 0x32, 0xef, 0xd9, 0x92, 0x0b, 0x19, 0xc9, 0x25,
	0x5f, 0x47, 0x91, 0x79, 0x68, 0x34, 0x99, 0xca, 0x10, 0xcd, 0xe6, 0xbc, 0x73, 0x76, 0x90, 0x0d,
	0x14, 0x68, 0xfa, 0x55, 0xa3, 0x6c, 0xdf, 0x71, 0x7e, 0x83, 0xf0, 0x84, 0xdf, 0x01, 0x7f, 0x73,
	0x35, 0xb2, 0x5e, 0x4c, 0x06, 0x10, 0x2f, 0x9b, 0xde, 0xeb, 0x69, 0x11, 0x86, 0xbb, 0x29, 0xe3,
	0x9b, 0x28, 0xf3, 0x5e, 0x2a, 0xa9, 0x1d, 0xd7, 0x33, 0x55, 0xe1, 0x62, 0x16, 0x74, 0x9f, 0xd4,
	0x0d, 0xa6, 0x94, 0xc9, 0x09, 0x35, 0x7b, 0x04, 0x98, 0xec, 0x18, 0x3f, 0x33, 0x84, 0xca, 0x63,
	0x22, 0x3c, 0x19, 0xe2, 0x79, 0xaa, 0x36, 0x74, 0x6a, 0x16, 0xbf, 0xf2, 0xac, 0xdf, 0x21, 0x7c,
	0x4c, 0x7f, 0x5e, 0x4f, 0xe5, 0x1d, 0xf3, 0xf9, 0x2a, 0xca, 0xbc, 0x9b, 0x95, 0xb8, 0x35, 0x7c,
	0x78, 0x9a, 0x1f, 0x98, 0xfb, 0x94, 0x25, 0xa4, 0x9a, 0x0e, 0xce, 0xe8, 0xfe, 0xda, 0x7d, 0x23,
	0x19, 0x5d, 0x4f, 0x95, 0xcc, 0x38, 0x5f, 0x1b, 0xc3, 0x53, 0x4a, 0x72, 0x2c, 0x8c, 0xdb, 0x90,
	0xf6, 0x21, 0xdf, 0xfb, 0x05, 0xca, 0xbc, 0xaf, 0xa3, 0x8a, 0x14, 0x68, 0xd1, 0xcc, 0x53, 0x54,
	0x9f, 0x6c, 0xc2, 0x6d, 0xca, 0xa6, 0x56, 0xcd, 0x7c, 0xa5, 0x16, 0x4f, 0x08, 0x25, 0x6d, 0xb6,
	0x05, 0x11, 0x11, 0xd0, 0xee, 0x42, 0x24, 0xeb, 0x64, 0xc3, 0x4c, 0x10, 0xa4, 0x72, 0x65, 0xd4,
	0xfc, 0x6b, 0x0e, 0x19, 0xe4, 0xaf, 0xf8, 0x56, 0x7d, 0x76, 0x11, 0x39, 0xbf, 0x44, 0x78, 0xbc,
	0xb2, 0x0d, 0xbb, 0x64, 0x88, 0x21, 0xca, 0xaa, 0xec, 0xdc, 0x28, 0x19, 0x1f, 0xad, 0x32, 0x76,
	0x97, 0xee, 0x10, 0xf9, 0xa7, 0x6a, 0xfb, 0x22, 0x37, 0x89, 0xe2, 0xfb, 0x08, 0x1f, 0x35, 0x85,
	0xd8, 0x7e, 0xa9, 0x22, 0xc9, 0xbc, 0xe7, 0x4b, 0xb8, 0x13, 0xb6, 0x0e, 0xb3, 0xfe, 0x76, 0x21,
	0xaf, 0xc4, 0x0e, 0xea, 0x6a, 0x27, 0xdd, 0x51, 0xf9, 0xe4, 0x6f, 0x08, 0x63, 0xa0, 0x49, 0xb4,
	0xc6, 0x59, 0x24, 0x45, 0xc5, 0xad, 0x56, 0x68, 0x12, 0x5d, 0x4c, 0xf3, 0x8e, 0x7c, 0x8f, 0xa7,
	0x06, 0xb0, 0x9b, 0xde, 0xda, 0x8f, 0x50, 0xe6, 0x6d, 0x97, 0xd0, 0xc7, 0xd5, 0x64, 0x12, 0xeb,
	0x3e, 0xf7, 0x55, 0xf5, 0x21, 0xec, 0x97, 0xdd, 0x64, 0xcb, 0xe1, 0x34, 0x0b, 0x20, 0x92, 0xac,
	0xc5, 0x60, 0x40, 0xa3, 0x07, 0xf0, 0x3f, 0x5c, 0x27, 0x5e, 0xa0, 0x4a, 0xa5, 0x0e, 0x10, 0xda,
	0xe5, 0xa9, 0x5a, 0x28, 0x4e, 0xf8, 0x16, 0x0b, 0x20, 0x30, 0xa7, 0x41, 0xdc, 0xb9, 0xa1, 0x94,
	0xa3, 0x0d, 0x36, 0x14, 0x39, 0x45, 0xf4, 0x1f, 0x08, 0xe3, 0x66, 0x7a, 0xa7, 0x44, 0x7f, 0x82,
	0x32, 0xaf, 0x57, 0x21, 0xaa, 0x26, 0xe6, 0x44, 0x69, 0xe5, 0xe3, 0xc0, 0x3c, 0x2f, 0x41, 0x90,
	0xfa, 0xf2, 0x60, 0x54, 0x15, 0x3d, 0x45, 0xf5, 0xcf, 0x08, 0x1f, 0x11, 0x20, 0x2d, 0xd3, 0xb2,
	0xcc, 0xdd, 0xc8, 0xdb, 0xf6, 0x21, 0xf9, 0x03, 0x94, 0x79, 0xb2, 0x24, 0x89, 0x37, 0x40, 0xe6,
	0x1c, 0x6f, 0x96, 0x7f, 0x1f, 0x98, 0xe2, 0x06, 0xec, 0xc9, 0xef, 0x41, 0xd7, 0xdd, 0x85, 0x9f,
	0x00, 0x2d, 0x8a, 0xef, 0x23, 0x3c, 0x5d, 0x0d, 0x28, 0x71, 0xb1, 0xb7, 0x61, 0xc2, 0xd5, 0xb9,
	0x7f, 0x80, 0x90, 0x6d, 0xdf, 0x4f, 0xec, 0x21, 0xf3, 0x9e, 0xaa, 0x28, 0x63, 0x5f, 0xe0, 0x09,
	0x45, 0xc7, 0xca, 0x81, 0xeb, 0xf6, 0x07, 0x61, 0xb5, 0xcf, 0x24, 0x28, 0x77, 0x28, 0x41, 0xd9,
	0xee, 0x1c, 0xb8, 0xb9, 0x7f, 0xfc, 0x9f, 0x80, 0xdb, 0x0b, 0xc9, 0x28, 0xe0, 0xf9, 0xf5, 0x64,
	0x37, 0xe0, 0xf3, 0x7b, 0x01, 0x7f, 0x17, 0xe1, 0xa3, 0x55, 0xe0, 0xc3, 0x12, 0xb6, 0x1b, 0xc0,
	0x01, 0x49, 0xeb, 0x03, 0xe8, 0x5e, 0xe8, 0x07, 0x75, 0x00, 0x49, 0x9b, 0x1f, 0x25, 0x69, 0xef,
	0x8d, 0xe1, 0x69, 0x5f, 0x79, 0xd6, 0xed, 0x67, 0xcd, 0x23, 0x4a, 0x89, 0x97, 0xd5, 0xdc, 0xda,
	0xbf, 0x50, 0xe6, 0xfd, 0xba, 0x92, 0x2f, 0x3f, 0xa1, 0x9b, 0x89, 0x79, 0x2e, 0x80, 0xc0, 0xd6,
	0xcf, 0x03, 0x99, 0xf3, 0xb9, 0xdb, 0xc8, 0x9c, 0xeb, 0x20, 0x13, 0x06, 0x5b, 0xfa, 0xca, 0xa8,
	0xe1, 0xaa, 0xba, 0xba, 0x95, 0x2f, 0x9f, 0xe3, 0xbc, 0x52, 0xc3, 0x77, 0x9d, 0x5b, 0x3c, 0xeb,
	0xcc, 0xe1, 0xd9, 0xe7, 0x05, 0x24, 0x24, 0xa4, 0xaa, 0xe8, 0xa0, 0xa9, 0xec, 0xf0, 0x84, 0x7d,
	0xd9, 0xe4, 0xa3, 0x2b, 0x0f, 0xa8, 0x31, 0xe7, 0x9c, 0x19, 0x3c, 0x65, 0x8a, 0x51, 0xb2, 0x4d,
	0x8d, 0xb9, 0x16, 0x4f, 0x23, 0x1b, 0x56, 0xa7, 0x9c, 0x32, 0xac, 0xb4, 0xb9, 0x6a, 0xa6, 0x52,
	0xea, 0x78, 0xb4, 0xba, 0x67, 0xbb, 0xa4, 0xd8, 0xca, 0xfe, 0xbc, 0x8f, 0x32, 0xef, 0x9b, 0x95,
	0xfd, 0x99, 0x1e, 0xbd, 0x3f, 0xee, 0xa7, 0x3f, 0x62, 0x9e, 0x0f, 0xd6, 0xf6, 0xe0, 0xa9, 0xdc,
	0xe3, 0xf7, 0x08, 0xbb, 0xba, 0xbe, 0xd7, 0xaf, 0xda, 0x5f, 0x60, 0x42, 0xf2, 0xa4, 0xf7, 0x34,
	0x4f, 0xac, 0x6b, 0x0f, 0xbe, 0x66, 0xe9, 0x47, 0x22, 0x3b, 0x58, 0xdf, 0xff, 0x5f, 0x2f, 0x39,
	0xcf, 0x95, 0x05, 0xbc, 0x72, 0x62, 0x3d, 0x86, 0x74, 0xcc, 0x8a, 0xee, 0xaa, 0x7e, 0xbb, 0x50,
	0xf7, 0xc9, 0x0e, 0x14, 0x9d, 0xfa, 0xb6, 0xd4, 0xa1, 0x5b, 0x40, 0x9a, 0xa0, 0xcb, 0x8c, 0x48,
	0x12, 0xc9, 0x0b, 0x19, 0xdd, 0xa3, 0xde, 0x70, 0x9d, 0xa1, 0x4a, 0xd1, 0x2e, 0xaa, 0x6e, 0xd0,
	0x7f, 0x42, 0x78, 0x4a, 0x93, 0x92, 0xf4, 0x2a, 0xf4, 0xc4, 0xd3, 0x3c, 0x19, 0x7c, 0xbd, 0xd4,
	0x3c, 0x36, 0x64, 0xc2, 0xa2, 0xb6, 0xa8, 0xbd, 0x8b, 0x32, 0xef, 0x6d, 0x34, 0x40, 0x44, 0x4d,
	0x26, 0x6a, 0xb6, 0x55, 0xf6, 0xfc, 0xf9, 0xf2, 0x95, 0x75, 0x90, 0xa9, 0x4a, 0xe1, 0x94, 0xa8,
	0x0a, 0x47, 0x1d, 0x5f, 0xa0, 0xdf, 0x30, 0x7d, 0x45, 0x5e, 0x52, 0xd2, 0x62, 0x10, 0x06, 0x64,
	0x13, 0x7a, 0xa2, 0x4e, 0x96, 0x69, 0x54, 0x3c, 0x67, 0xa8, 0x65, 0x9a, 0x29, 0x0b, 0x03, 0x16,
	0xb5, 0xed, 0x89, 0x0b, 0xd2, 0x20, 0x92, 0x36, 0x43, 0x20, 0x1d, 0xa0, 0xaa, 0x5d, 0x18, 0x76,
	0x73, 0xce, 0xec, 0x30, 0x3b, 0x49, 0xcd, 0x8d, 0xec, 0xe7, 0x63, 0xd8, 0x49, 0x20, 0x82, 0x6d,
	0x0b, 0x77, 0xe5, 0x56, 0xcc, 0x92, 0x9e, 0x73, 0xaa, 0x70, 0x51, 0xa3, 0xca, 0xa6, 0x79, 0x84,
	0xab, 0xfe, 0x1b, 0x65, 0xde, 0x6f, 0x2b, 0x6c, 0xdd, 0x8b, 0x54, 0xfa, 0x1d, 0x92, 0x56, 0x65,
	0x9e, 0x80, 0x9e, 0xed, 0xfe, 0x14, 0x55, 0x3b, 0x85, 0x6d, 0x56, 0x9c, 0xbd, 0x6b, 0xd7, 0x08,
	0xf5, 0x25, 0xdb, 0xaa, 0x08, 0xec, 0x88, 0x47, 0x9d, 0x8d, 0x0e, 0x4f, 0xc3, 0x80, 0xf0, 0x28,
	0xec, 0x95, 0xef, 0x3a, 0x1d, 0x88, 0x48, 0x8f, 0xa7, 0x64, 0x9b, 0x9a, 0xf3, 0xb6, 0xa6, 0xd5,
	0x92, 0x6a, 0xa6, 0x35, 0xa2, 0xdb, 0xf4, 0xde, 0x17, 0x55, 0xa9, 0xbd, 0xf4, 0xd9, 0x7b, 0x93,
	0xa9, 0x4d, 0xb5, 0x1d, 0xb3, 0x6b, 0xee, 0xf4, 0xf0, 0xbd, 0x4f, 0x2d, 0xb5, 0x84, 0xe6, 0x2f,
	0x7e, 0x78, 0x28, 0xf3, 0xfe, 0x79, 0xb7, 0xf3, 0xf6, 0x18, 0x9e, 0xcc, 0x55, 0x34, 0xd7, 0x2c,
	0x6f, 0x6d, 0xd5, 0x09, 0x6f, 0x74, 0x80, 0x8c, 0xe8, 0x20, 0xa1, 0x4a, 0xcf, 0x0a, 0x6c, 0x97,
	0x46, 0xca, 0x65, 0x7b, 0x3c, 0x4d, 0x72, 0xc6, 0x1d, 0x16, 0x17, 0xaf, 0x9d, 0xfa, 0x89, 0x2b,
	0xa6, 0x42, 0x80, 0x71, 0x18, 0x2f, 0x8e, 0x43, 0x20, 0x2f, 0xd0, 0x30, 0x54, 0x7e, 0x1f, 0x05,
	0xe4, 0xb2, 0xce, 0x08, 0x64, 0x8d, 0xf6, 0xea, 0xee, 0x63, 0x1d, 0x29, 0x63, 0xb1, 0xd4, 0x68,
	0xa8, 0x09, 0x9b, 0x4c, 0xd6, 0x7d, 0xde, 0x6d, 0x84, 0xd0, 0xa6, 0x61, 0x43, 0x42, 0xd2, 0x15,
	0x0b, 0xbc, 0xb5, 0x20, 0xd2, 0xa6, 0xf0, 0x13, 0xa6, 0xff, 0xa1, 0xb3, 0x20, 0x20, 0xd9, 0x62,
	0x3e, 0x34, 0x6a, 0x4f, 0xe2, 0xe3, 0x39, 0x4a, 0x1b, 0x1b, 0xce, 0x4c, 0xbe, 0x58, 0xc0, 0x7d,
	0x51, 0xcf, 0x57, 0x64, 0xdc, 0x9d, 0xb4, 0xf2, 0xfa, 0x54, 0xc5, 0xca, 0x99, 0x43, 0x8f, 0xd6,
	0x17, 0x17, 0x12, 0x7f, 0x1e, 0x8d, 0x9d, 0x39, 0x41, 0xe3, 0x38, 0x64, 0xbe, 0x8e, 0xaa, 0xc6,
	0x6b, 0x82, 0x47, 0x4b, 0x43, 0x2d, 0xeb, 0x9f, 0xc3, 0x77, 0x9d, 0x59, 0x5c, 0x74, 0xce, 0xe0,
	0xd3, 0xc6, 0xed, 0xf3, 0xe3, 0x53, 0xe7, 0x94, 0x18, 0xdf, 0x52, 0x62, 0x2e, 0x52, 0xdf, 0x07,
	0x21, 0x5a, 0x69, 0x58, 0x77, 0x0e, 0xe1, 0x8f, 0x7f, 0x6f, 0x0c, 0x1d, 0x5e, 0x5f, 0x33, 0x12,
	0xb6, 0x8a, 0x2f, 0x0f, 0x4f, 0x4d, 0x95, 0xa8, 0x05, 0x1c, 0x8c, 0x5e, 0x69, 0x05, 0x88, 0x21,
	0xe9, 0x32, 0x21, 0x18, 0x8f, 0xb4, 0x04, 0xe8, 0xf5, 0xac, 0x19, 0xc1, 0xd3, 0xc4, 0x87, 0xfa,
	0xfa, 0x05, 0x23, 0x78, 0xe7, 0xf0, 0xfc, 0x28, 0x30, 0x66, 0x54, 0xb9, 0xaa, 0xfe, 0xd7, 0x42,
	0x09, 0xe7, 0x71, 0x7c, 0xd7, 0xf9, 0xc5, 0x45, 0xe7, 0x3c, 0xfe, 0xec, 0xd0, 0xe4, 0x04, 0x14,
	0x07, 0x1a, 0x91, 0x34, 0x82, 0x5b, 0x31, 0xf8, 0x12, 0x02, 0x02, 0x49, 0xc2, 0x93, 0x72, 0xf6,
	0x4d, 0x35, 0xfb, 0xac, 0xf3, 0x45, 0x7c, 0x63, 0x17, 0x32, 0x4c, 0xd8, 0xff, 0x37, 0xc8, 0x4e,
	0xc2, 0xa5, 0x0c, 0x21, 0xa8, 0x93, 0x8b, 0x54, 0x5d, 0x92, 0x5b, 0x2d, 0xab, 0x20, 0x2d, 0xd8,
	0x26, 0xd6, 0x51, 0xa4, 0x9e, 0x9b, 0xf4, 0x08, 0x6d, 0x53, 0x16, 0xd5, 0x5f, 0x7c, 0x02, 0x3f,
	0x8e, 0x31, 0x8d, 0xd9, 0x55, 0xe8, 0x79, 0xa9, 0xec, 0x38, 0xf5, 0x7b, 0xc6, 0x9c, 0xd9, 0x2b,
	0x2f, 0xdc, 0x20, 0xea, 0x4b, 0x55, 0x92, 0xe6, 0x4c, 0x88, 0xe4, 0x9b, 0x10, 0xd5, 0xdd, 0x09,
	0xaf, 0x9a, 0x09, 0xc8, 0x58, 0xf3, 0x04, 0x3e, 0xd6, 0x37, 0xff, 0x63, 0x78, 0x86, 0xf1, 0xc2,
	0x17, 0xd6, 0xae, 0x6a, 0xd1, 0xd6, 0x3e, 0xfb, 0xe2, 0x23, 0x42, 0x52, 0xd1, 0xa9, 0x57, 0x3d,
	0x8f, 0xf1, 0x46, 0x97, 0x07, 0x10, 0x36, 0x44, 0xb0, 0xd9, 0x68, 0xf3, 0x46, 0xf1, 0xef, 0x46,
	0xf1, 0xb3, 0xb1, 0x23, 0x6b, 0x57, 0xed, 0xcc, 0xe6, 0x21, 0x5d, 0xcd, 0x9c, 0xfd, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x94, 0x00, 0xe4, 0x43, 0x88, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MembersClient is the client API for Members service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MembersClient interface {
	// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
	CreateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*io.Id, error)
	// Updates an existing program record.
	UpdateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*Program, error)
	// Gets an existing program record by id.
	GetProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Program, error)
	// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
	CopyProgram(ctx context.Context, in *ProgramCopyRequest, opts ...grpc.CallOption) (*io.Id, error)
	// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
	DeleteProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists all programs for the logged in user.
	ListProgramsDeprecated(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (Members_ListProgramsDeprecatedClient, error)
	// Lists all programs for the logged in user.
	ListPrograms(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (Members_ListProgramsClient, error)
	// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
	CreateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*io.Id, error)
	// Updates a tier by tier id
	UpdateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*Tier, error)
	// Gets a tier by tier ID
	GetTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*Tier, error)
	// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
	DeleteTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists all the tiers.
	ListTiersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Members_ListTiersDeprecatedClient, error)
	// Lists all the tiers.
	ListTiers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Members_ListTiersClient, error)
	// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
	EnrolMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
	EnrolMemberPublic(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	GetMemberRecordById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Member, error)
	GetMemberRecordByExternalId(ctx context.Context, in *MemberRecordByExternalIdRequest, opts ...grpc.CallOption) (*Member, error)
	CheckInMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckOutMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Members_ListMembersDeprecatedClient, error)
	ListMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Members_ListMembersClient, error)
	UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	// @todo: define callback
	EarnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	// @todo: define callback
	BurnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	SetPoints(ctx context.Context, in *SetPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	UpdateMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error)
	CountMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (*io.Count, error)
	CountMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error)
	GetMessageHistoryForMember(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (Members_GetMessageHistoryForMemberClient, error)
	GetMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error)
	RenewMembersExpiry(ctx context.Context, in *UpdateExpiryRequest, opts ...grpc.CallOption) (*io.Count, error)
}

type membersClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersClient(cc grpc.ClientConnInterface) MembersClient {
	return &membersClient{cc}
}

func (c *membersClient) CreateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/createProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, "/members.Members/updateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, "/members.Members/getProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CopyProgram(ctx context.Context, in *ProgramCopyRequest, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/copyProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/deleteProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListProgramsDeprecated(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (Members_ListProgramsDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[0], "/members.Members/listProgramsDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListProgramsDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListProgramsDeprecatedClient interface {
	Recv() (*Program, error)
	grpc.ClientStream
}

type membersListProgramsDeprecatedClient struct {
	grpc.ClientStream
}

func (x *membersListProgramsDeprecatedClient) Recv() (*Program, error) {
	m := new(Program)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) ListPrograms(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (Members_ListProgramsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[1], "/members.Members/listPrograms", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListProgramsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListProgramsClient interface {
	Recv() (*Program, error)
	grpc.ClientStream
}

type membersListProgramsClient struct {
	grpc.ClientStream
}

func (x *membersListProgramsClient) Recv() (*Program, error) {
	m := new(Program)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) CreateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/createTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*Tier, error) {
	out := new(Tier)
	err := c.cc.Invoke(ctx, "/members.Members/updateTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*Tier, error) {
	out := new(Tier)
	err := c.cc.Invoke(ctx, "/members.Members/getTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/deleteTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListTiersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Members_ListTiersDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[2], "/members.Members/listTiersDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListTiersDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListTiersDeprecatedClient interface {
	Recv() (*Tier, error)
	grpc.ClientStream
}

type membersListTiersDeprecatedClient struct {
	grpc.ClientStream
}

func (x *membersListTiersDeprecatedClient) Recv() (*Tier, error) {
	m := new(Tier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) ListTiers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Members_ListTiersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[3], "/members.Members/listTiers", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListTiersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListTiersClient interface {
	Recv() (*Tier, error)
	grpc.ClientStream
}

type membersListTiersClient struct {
	grpc.ClientStream
}

func (x *membersListTiersClient) Recv() (*Tier, error) {
	m := new(Tier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) EnrolMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/enrolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) EnrolMemberPublic(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/enrolMemberPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMemberRecordById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/members.Members/getMemberRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMemberRecordByExternalId(ctx context.Context, in *MemberRecordByExternalIdRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/members.Members/getMemberRecordByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CheckInMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/checkInMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CheckOutMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/checkOutMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Members_ListMembersDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[4], "/members.Members/listMembersDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListMembersDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListMembersDeprecatedClient interface {
	Recv() (*Member, error)
	grpc.ClientStream
}

type membersListMembersDeprecatedClient struct {
	grpc.ClientStream
}

func (x *membersListMembersDeprecatedClient) Recv() (*Member, error) {
	m := new(Member)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) ListMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Members_ListMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[5], "/members.Members/listMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersListMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_ListMembersClient interface {
	Recv() (*Member, error)
	grpc.ClientStream
}

type membersListMembersClient struct {
	grpc.ClientStream
}

func (x *membersListMembersClient) Recv() (*Member, error) {
	m := new(Member)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/members.Members/updateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) EarnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, "/members.Members/earnPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) BurnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, "/members.Members/burnPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) SetPoints(ctx context.Context, in *SetPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, "/members.Members/setPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/updateMembersBySegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/deleteMembersBySegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/members.Members/deleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CountMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (*io.Count, error) {
	out := new(io.Count)
	err := c.cc.Invoke(ctx, "/members.Members/countMembersDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CountMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error) {
	out := new(io.Count)
	err := c.cc.Invoke(ctx, "/members.Members/countMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMessageHistoryForMember(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (Members_GetMessageHistoryForMemberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Members_serviceDesc.Streams[6], "/members.Members/getMessageHistoryForMember", opts...)
	if err != nil {
		return nil, err
	}
	x := &membersGetMessageHistoryForMemberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Members_GetMessageHistoryForMemberClient interface {
	Recv() (*io.Message, error)
	grpc.ClientStream
}

type membersGetMessageHistoryForMemberClient struct {
	grpc.ClientStream
}

func (x *membersGetMessageHistoryForMemberClient) Recv() (*io.Message, error) {
	m := new(io.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *membersClient) GetMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error) {
	out := new(io.Strings)
	err := c.cc.Invoke(ctx, "/members.Members/getMetaKeysForProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) RenewMembersExpiry(ctx context.Context, in *UpdateExpiryRequest, opts ...grpc.CallOption) (*io.Count, error) {
	out := new(io.Count)
	err := c.cc.Invoke(ctx, "/members.Members/renewMembersExpiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServer is the server API for Members service.
type MembersServer interface {
	// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
	CreateProgram(context.Context, *Program) (*io.Id, error)
	// Updates an existing program record.
	UpdateProgram(context.Context, *Program) (*Program, error)
	// Gets an existing program record by id.
	GetProgram(context.Context, *io.Id) (*Program, error)
	// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
	CopyProgram(context.Context, *ProgramCopyRequest) (*io.Id, error)
	// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
	DeleteProgram(context.Context, *io.Id) (*empty.Empty, error)
	// Lists all programs for the logged in user.
	ListProgramsDeprecated(*io.Pagination, Members_ListProgramsDeprecatedServer) error
	// Lists all programs for the logged in user.
	ListPrograms(*io.Filters, Members_ListProgramsServer) error
	// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
	CreateTier(context.Context, *Tier) (*io.Id, error)
	// Updates a tier by tier id
	UpdateTier(context.Context, *Tier) (*Tier, error)
	// Gets a tier by tier ID
	GetTier(context.Context, *TierRequestInput) (*Tier, error)
	// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
	DeleteTier(context.Context, *TierRequestInput) (*empty.Empty, error)
	// Lists all the tiers.
	ListTiersDeprecated(*ListRequestDeprecated, Members_ListTiersDeprecatedServer) error
	// Lists all the tiers.
	ListTiers(*ListRequest, Members_ListTiersServer) error
	// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
	EnrolMember(context.Context, *Member) (*io.Id, error)
	// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
	EnrolMemberPublic(context.Context, *Member) (*io.Id, error)
	GetMemberRecordById(context.Context, *io.Id) (*Member, error)
	GetMemberRecordByExternalId(context.Context, *MemberRecordByExternalIdRequest) (*Member, error)
	CheckInMember(context.Context, *MemberCheckInOutRequest) (*empty.Empty, error)
	CheckOutMember(context.Context, *MemberCheckInOutRequest) (*empty.Empty, error)
	ListMembersDeprecated(*ListRequestDeprecated, Members_ListMembersDeprecatedServer) error
	ListMembers(*ListRequest, Members_ListMembersServer) error
	UpdateMember(context.Context, *Member) (*io.Id, error)
	// @todo: define callback
	EarnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error)
	// @todo: define callback
	BurnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error)
	SetPoints(context.Context, *SetPointsRequest) (*MemberPoints, error)
	UpdateMembersBySegment(context.Context, *MemberSegmentRequest) (*empty.Empty, error)
	DeleteMembersBySegment(context.Context, *MemberSegmentRequest) (*empty.Empty, error)
	DeleteMember(context.Context, *Member) (*empty.Empty, error)
	CountMembersDeprecated(context.Context, *ListRequestDeprecated) (*io.Count, error)
	CountMembers(context.Context, *ListRequest) (*io.Count, error)
	GetMessageHistoryForMember(*io.Pagination, Members_GetMessageHistoryForMemberServer) error
	GetMetaKeysForProgram(context.Context, *io.Id) (*io.Strings, error)
	RenewMembersExpiry(context.Context, *UpdateExpiryRequest) (*io.Count, error)
}

// UnimplementedMembersServer can be embedded to have forward compatible implementations.
type UnimplementedMembersServer struct {
}

func (*UnimplementedMembersServer) CreateProgram(ctx context.Context, req *Program) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (*UnimplementedMembersServer) UpdateProgram(ctx context.Context, req *Program) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgram not implemented")
}
func (*UnimplementedMembersServer) GetProgram(ctx context.Context, req *io.Id) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (*UnimplementedMembersServer) CopyProgram(ctx context.Context, req *ProgramCopyRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyProgram not implemented")
}
func (*UnimplementedMembersServer) DeleteProgram(ctx context.Context, req *io.Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgram not implemented")
}
func (*UnimplementedMembersServer) ListProgramsDeprecated(req *io.Pagination, srv Members_ListProgramsDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProgramsDeprecated not implemented")
}
func (*UnimplementedMembersServer) ListPrograms(req *io.Filters, srv Members_ListProgramsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPrograms not implemented")
}
func (*UnimplementedMembersServer) CreateTier(ctx context.Context, req *Tier) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTier not implemented")
}
func (*UnimplementedMembersServer) UpdateTier(ctx context.Context, req *Tier) (*Tier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTier not implemented")
}
func (*UnimplementedMembersServer) GetTier(ctx context.Context, req *TierRequestInput) (*Tier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTier not implemented")
}
func (*UnimplementedMembersServer) DeleteTier(ctx context.Context, req *TierRequestInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTier not implemented")
}
func (*UnimplementedMembersServer) ListTiersDeprecated(req *ListRequestDeprecated, srv Members_ListTiersDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTiersDeprecated not implemented")
}
func (*UnimplementedMembersServer) ListTiers(req *ListRequest, srv Members_ListTiersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTiers not implemented")
}
func (*UnimplementedMembersServer) EnrolMember(ctx context.Context, req *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrolMember not implemented")
}
func (*UnimplementedMembersServer) EnrolMemberPublic(ctx context.Context, req *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrolMemberPublic not implemented")
}
func (*UnimplementedMembersServer) GetMemberRecordById(ctx context.Context, req *io.Id) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRecordById not implemented")
}
func (*UnimplementedMembersServer) GetMemberRecordByExternalId(ctx context.Context, req *MemberRecordByExternalIdRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRecordByExternalId not implemented")
}
func (*UnimplementedMembersServer) CheckInMember(ctx context.Context, req *MemberCheckInOutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInMember not implemented")
}
func (*UnimplementedMembersServer) CheckOutMember(ctx context.Context, req *MemberCheckInOutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOutMember not implemented")
}
func (*UnimplementedMembersServer) ListMembersDeprecated(req *ListRequestDeprecated, srv Members_ListMembersDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMembersDeprecated not implemented")
}
func (*UnimplementedMembersServer) ListMembers(req *ListRequest, srv Members_ListMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (*UnimplementedMembersServer) UpdateMember(ctx context.Context, req *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedMembersServer) EarnPoints(ctx context.Context, req *EarnBurnPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnPoints not implemented")
}
func (*UnimplementedMembersServer) BurnPoints(ctx context.Context, req *EarnBurnPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnPoints not implemented")
}
func (*UnimplementedMembersServer) SetPoints(ctx context.Context, req *SetPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoints not implemented")
}
func (*UnimplementedMembersServer) UpdateMembersBySegment(ctx context.Context, req *MemberSegmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembersBySegment not implemented")
}
func (*UnimplementedMembersServer) DeleteMembersBySegment(ctx context.Context, req *MemberSegmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembersBySegment not implemented")
}
func (*UnimplementedMembersServer) DeleteMember(ctx context.Context, req *Member) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (*UnimplementedMembersServer) CountMembersDeprecated(ctx context.Context, req *ListRequestDeprecated) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembersDeprecated not implemented")
}
func (*UnimplementedMembersServer) CountMembers(ctx context.Context, req *ListRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembers not implemented")
}
func (*UnimplementedMembersServer) GetMessageHistoryForMember(req *io.Pagination, srv Members_GetMessageHistoryForMemberServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageHistoryForMember not implemented")
}
func (*UnimplementedMembersServer) GetMetaKeysForProgram(ctx context.Context, req *io.Id) (*io.Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaKeysForProgram not implemented")
}
func (*UnimplementedMembersServer) RenewMembersExpiry(ctx context.Context, req *UpdateExpiryRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewMembersExpiry not implemented")
}

func RegisterMembersServer(s *grpc.Server, srv MembersServer) {
	s.RegisterService(&_Members_serviceDesc, srv)
}

func _Members_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CreateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CreateProgram(ctx, req.(*Program))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/UpdateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateProgram(ctx, req.(*Program))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/GetProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CopyProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CopyProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CopyProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CopyProgram(ctx, req.(*ProgramCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/DeleteProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListProgramsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListProgramsDeprecated(m, &membersListProgramsDeprecatedServer{stream})
}

type Members_ListProgramsDeprecatedServer interface {
	Send(*Program) error
	grpc.ServerStream
}

type membersListProgramsDeprecatedServer struct {
	grpc.ServerStream
}

func (x *membersListProgramsDeprecatedServer) Send(m *Program) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_ListPrograms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListPrograms(m, &membersListProgramsServer{stream})
}

type Members_ListProgramsServer interface {
	Send(*Program) error
	grpc.ServerStream
}

type membersListProgramsServer struct {
	grpc.ServerStream
}

func (x *membersListProgramsServer) Send(m *Program) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_CreateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CreateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CreateTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CreateTier(ctx, req.(*Tier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/UpdateTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateTier(ctx, req.(*Tier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TierRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/GetTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetTier(ctx, req.(*TierRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TierRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/DeleteTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteTier(ctx, req.(*TierRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListTiersDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequestDeprecated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListTiersDeprecated(m, &membersListTiersDeprecatedServer{stream})
}

type Members_ListTiersDeprecatedServer interface {
	Send(*Tier) error
	grpc.ServerStream
}

type membersListTiersDeprecatedServer struct {
	grpc.ServerStream
}

func (x *membersListTiersDeprecatedServer) Send(m *Tier) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_ListTiers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListTiers(m, &membersListTiersServer{stream})
}

type Members_ListTiersServer interface {
	Send(*Tier) error
	grpc.ServerStream
}

type membersListTiersServer struct {
	grpc.ServerStream
}

func (x *membersListTiersServer) Send(m *Tier) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_EnrolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EnrolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/EnrolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EnrolMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_EnrolMemberPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EnrolMemberPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/EnrolMemberPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EnrolMemberPublic(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMemberRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMemberRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/GetMemberRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMemberRecordById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMemberRecordByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRecordByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMemberRecordByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/GetMemberRecordByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMemberRecordByExternalId(ctx, req.(*MemberRecordByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CheckInMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCheckInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CheckInMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CheckInMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CheckInMember(ctx, req.(*MemberCheckInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CheckOutMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCheckInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CheckOutMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CheckOutMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CheckOutMember(ctx, req.(*MemberCheckInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListMembersDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequestDeprecated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListMembersDeprecated(m, &membersListMembersDeprecatedServer{stream})
}

type Members_ListMembersDeprecatedServer interface {
	Send(*Member) error
	grpc.ServerStream
}

type membersListMembersDeprecatedServer struct {
	grpc.ServerStream
}

func (x *membersListMembersDeprecatedServer) Send(m *Member) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_ListMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListMembers(m, &membersListMembersServer{stream})
}

type Members_ListMembersServer interface {
	Send(*Member) error
	grpc.ServerStream
}

type membersListMembersServer struct {
	grpc.ServerStream
}

func (x *membersListMembersServer) Send(m *Member) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_EarnPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnBurnPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EarnPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/EarnPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EarnPoints(ctx, req.(*EarnBurnPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_BurnPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnBurnPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).BurnPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/BurnPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).BurnPoints(ctx, req.(*EarnBurnPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_SetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).SetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/SetPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).SetPoints(ctx, req.(*SetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateMembersBySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateMembersBySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/UpdateMembersBySegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateMembersBySegment(ctx, req.(*MemberSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteMembersBySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMembersBySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/DeleteMembersBySegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMembersBySegment(ctx, req.(*MemberSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CountMembersDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestDeprecated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CountMembersDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CountMembersDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CountMembersDeprecated(ctx, req.(*ListRequestDeprecated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CountMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CountMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/CountMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CountMembers(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMessageHistoryForMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).GetMessageHistoryForMember(m, &membersGetMessageHistoryForMemberServer{stream})
}

type Members_GetMessageHistoryForMemberServer interface {
	Send(*io.Message) error
	grpc.ServerStream
}

type membersGetMessageHistoryForMemberServer struct {
	grpc.ServerStream
}

func (x *membersGetMessageHistoryForMemberServer) Send(m *io.Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Members_GetMetaKeysForProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMetaKeysForProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/GetMetaKeysForProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMetaKeysForProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_RenewMembersExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).RenewMembersExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.Members/RenewMembersExpiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).RenewMembersExpiry(ctx, req.(*UpdateExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Members_serviceDesc = grpc.ServiceDesc{
	ServiceName: "members.Members",
	HandlerType: (*MembersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProgram",
			Handler:    _Members_CreateProgram_Handler,
		},
		{
			MethodName: "updateProgram",
			Handler:    _Members_UpdateProgram_Handler,
		},
		{
			MethodName: "getProgram",
			Handler:    _Members_GetProgram_Handler,
		},
		{
			MethodName: "copyProgram",
			Handler:    _Members_CopyProgram_Handler,
		},
		{
			MethodName: "deleteProgram",
			Handler:    _Members_DeleteProgram_Handler,
		},
		{
			MethodName: "createTier",
			Handler:    _Members_CreateTier_Handler,
		},
		{
			MethodName: "updateTier",
			Handler:    _Members_UpdateTier_Handler,
		},
		{
			MethodName: "getTier",
			Handler:    _Members_GetTier_Handler,
		},
		{
			MethodName: "deleteTier",
			Handler:    _Members_DeleteTier_Handler,
		},
		{
			MethodName: "enrolMember",
			Handler:    _Members_EnrolMember_Handler,
		},
		{
			MethodName: "enrolMemberPublic",
			Handler:    _Members_EnrolMemberPublic_Handler,
		},
		{
			MethodName: "getMemberRecordById",
			Handler:    _Members_GetMemberRecordById_Handler,
		},
		{
			MethodName: "getMemberRecordByExternalId",
			Handler:    _Members_GetMemberRecordByExternalId_Handler,
		},
		{
			MethodName: "checkInMember",
			Handler:    _Members_CheckInMember_Handler,
		},
		{
			MethodName: "checkOutMember",
			Handler:    _Members_CheckOutMember_Handler,
		},
		{
			MethodName: "updateMember",
			Handler:    _Members_UpdateMember_Handler,
		},
		{
			MethodName: "earnPoints",
			Handler:    _Members_EarnPoints_Handler,
		},
		{
			MethodName: "burnPoints",
			Handler:    _Members_BurnPoints_Handler,
		},
		{
			MethodName: "setPoints",
			Handler:    _Members_SetPoints_Handler,
		},
		{
			MethodName: "updateMembersBySegment",
			Handler:    _Members_UpdateMembersBySegment_Handler,
		},
		{
			MethodName: "deleteMembersBySegment",
			Handler:    _Members_DeleteMembersBySegment_Handler,
		},
		{
			MethodName: "deleteMember",
			Handler:    _Members_DeleteMember_Handler,
		},
		{
			MethodName: "countMembersDeprecated",
			Handler:    _Members_CountMembersDeprecated_Handler,
		},
		{
			MethodName: "countMembers",
			Handler:    _Members_CountMembers_Handler,
		},
		{
			MethodName: "getMetaKeysForProgram",
			Handler:    _Members_GetMetaKeysForProgram_Handler,
		},
		{
			MethodName: "renewMembersExpiry",
			Handler:    _Members_RenewMembersExpiry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listProgramsDeprecated",
			Handler:       _Members_ListProgramsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPrograms",
			Handler:       _Members_ListPrograms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTiersDeprecated",
			Handler:       _Members_ListTiersDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTiers",
			Handler:       _Members_ListTiers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listMembersDeprecated",
			Handler:       _Members_ListMembersDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listMembers",
			Handler:       _Members_ListMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getMessageHistoryForMember",
			Handler:       _Members_GetMessageHistoryForMember_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/member/a_rpc.proto",
}
